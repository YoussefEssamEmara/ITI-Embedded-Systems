
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f3c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00001f3c  00001fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000021a8  00000000  00000000  00001fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000011dc  00000000  00000000  00004178  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000724d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008138  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000092d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009aa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <main>
      7a:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 65 0f 	jmp	0x1eca	; 0x1eca <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 65 0f 	jmp	0x1eca	; 0x1eca <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 75 0f 	jmp	0x1eea	; 0x1eea <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <TWI_voidMasterInit>:
#include "TWI_Private.h"
#include "TWI_Config.h"

/* A function to Initialize Master */
void TWI_voidMasterInit (u8 Copy_u8SlaveAddress)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	0f 92       	push	r0
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	89 83       	std	Y+1, r24	; 0x01
	/* Set Clock Frequency to 400kbps ( TWBR = 2, TWPS two Bits = 00 ) */
	TWBR = 2;
     b42:	e0 e2       	ldi	r30, 0x20	; 32
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	82 e0       	ldi	r24, 0x02	; 2
     b48:	80 83       	st	Z, r24
	CLR_BIT(TWSR, TWSR_TWPS0);
     b4a:	a1 e2       	ldi	r26, 0x21	; 33
     b4c:	b0 e0       	ldi	r27, 0x00	; 0
     b4e:	e1 e2       	ldi	r30, 0x21	; 33
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	8e 7f       	andi	r24, 0xFE	; 254
     b56:	8c 93       	st	X, r24
	CLR_BIT(TWSR, TWSR_TWPS1);
     b58:	a1 e2       	ldi	r26, 0x21	; 33
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	e1 e2       	ldi	r30, 0x21	; 33
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	8d 7f       	andi	r24, 0xFD	; 253
     b64:	8c 93       	st	X, r24

	/* Set address for master */
	if (Copy_u8SlaveAddress != 0)
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	88 23       	and	r24, r24
     b6a:	29 f0       	breq	.+10     	; 0xb76 <TWI_voidMasterInit+0x40>
	{
		/* Assign the required node address in the 7MSB in the register */
		TWAR = (Copy_u8SlaveAddress << 1);
     b6c:	e2 e2       	ldi	r30, 0x22	; 34
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	88 0f       	add	r24, r24
     b74:	80 83       	st	Z, r24
	}

	/* Enable TWI */
	SET_BIT(TWCR, TWCR_TWEN);
     b76:	a6 e5       	ldi	r26, 0x56	; 86
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e6 e5       	ldi	r30, 0x56	; 86
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	84 60       	ori	r24, 0x04	; 4
     b82:	8c 93       	st	X, r24
}
     b84:	0f 90       	pop	r0
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <TWI_voidSlaveInit>:

/* A function to Initialize Slave */
void TWI_voidSlaveInit (u8 Copy_u8SlaveAddress)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	0f 92       	push	r0
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	89 83       	std	Y+1, r24	; 0x01
	/* Assign the required node address in the 7MSB in the register */
	TWAR = Copy_u8SlaveAddress << 1;
     b98:	e2 e2       	ldi	r30, 0x22	; 34
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	88 0f       	add	r24, r24
     ba0:	80 83       	st	Z, r24

	/* Enable TWI */
	SET_BIT(TWCR, TWCR_TWEN);
     ba2:	a6 e5       	ldi	r26, 0x56	; 86
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e5       	ldi	r30, 0x56	; 86
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	84 60       	ori	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
}
     bb0:	0f 90       	pop	r0
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <TWI_SendStartCondition>:

/* A function to send start condition */
TWI_ErrStatus TWI_SendStartCondition (void)
{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	0f 92       	push	r0
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
	/* Variable for Error Status */
	TWI_ErrStatus Local_ErrStatus = NoError;
     bc2:	19 82       	std	Y+1, r1	; 0x01

	/* Send Start Condition on the bus */
	SET_BIT(TWCR, TWCR_TWSTA);
     bc4:	a6 e5       	ldi	r26, 0x56	; 86
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e6 e5       	ldi	r30, 0x56	; 86
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	80 62       	ori	r24, 0x20	; 32
     bd0:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start previous operation */
	SET_BIT(TWCR, TWCR_TWINT);
     bd2:	a6 e5       	ldi	r26, 0x56	; 86
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e6 e5       	ldi	r30, 0x56	; 86
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	80 68       	ori	r24, 0x80	; 128
     bde:	8c 93       	st	X, r24

	/* Wait until the interrupt flag is raised again and previous operation is complete */
	while ((GET_BIT(TWCR, TWCR_TWINT)) == 0);
     be0:	e6 e5       	ldi	r30, 0x56	; 86
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	88 23       	and	r24, r24
     be8:	dc f7       	brge	.-10     	; 0xbe0 <TWI_SendStartCondition+0x28>

	/* Check for the operation  */
	if ((TWSR & 0xF8) != START_ACK)
     bea:	e1 e2       	ldi	r30, 0x21	; 33
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	88 2f       	mov	r24, r24
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	88 7f       	andi	r24, 0xF8	; 248
     bf6:	90 70       	andi	r25, 0x00	; 0
     bf8:	88 30       	cpi	r24, 0x08	; 8
     bfa:	91 05       	cpc	r25, r1
     bfc:	11 f0       	breq	.+4      	; 0xc02 <TWI_SendStartCondition+0x4a>
	{
		Local_ErrStatus = StartConditionErr;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do nothing */
	}

	return Local_ErrStatus;
     c02:	89 81       	ldd	r24, Y+1	; 0x01
}
     c04:	0f 90       	pop	r0
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <TWI_SendRepeatedStart>:

/* A function to send repeated start */
TWI_ErrStatus TWI_SendRepeatedStart (void)
{
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	0f 92       	push	r0
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
	/* Variable for Error Status */
	TWI_ErrStatus Local_ErrStatus = NoError;
     c16:	19 82       	std	Y+1, r1	; 0x01

	/* Send Start Condition on the bus */
	SET_BIT(TWCR, TWCR_TWSTA);
     c18:	a6 e5       	ldi	r26, 0x56	; 86
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e6 e5       	ldi	r30, 0x56	; 86
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	80 62       	ori	r24, 0x20	; 32
     c24:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start previous operation */
	SET_BIT(TWCR, TWCR_TWINT);
     c26:	a6 e5       	ldi	r26, 0x56	; 86
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e6 e5       	ldi	r30, 0x56	; 86
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	80 68       	ori	r24, 0x80	; 128
     c32:	8c 93       	st	X, r24

	/* Wait until the interrupt flag is raised again and previous operation is complete */
	while ((GET_BIT(TWCR, TWCR_TWINT)) == 0);
     c34:	e6 e5       	ldi	r30, 0x56	; 86
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	88 23       	and	r24, r24
     c3c:	dc f7       	brge	.-10     	; 0xc34 <TWI_SendRepeatedStart+0x28>

	/* Check for the operation  */
	if ((TWSR & 0xF8) != REP_START_ACK)
     c3e:	e1 e2       	ldi	r30, 0x21	; 33
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	88 2f       	mov	r24, r24
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	88 7f       	andi	r24, 0xF8	; 248
     c4a:	90 70       	andi	r25, 0x00	; 0
     c4c:	80 31       	cpi	r24, 0x10	; 16
     c4e:	91 05       	cpc	r25, r1
     c50:	11 f0       	breq	.+4      	; 0xc56 <TWI_SendRepeatedStart+0x4a>
	{
		Local_ErrStatus = RepeatedStartConditionErr;
     c52:	82 e0       	ldi	r24, 0x02	; 2
     c54:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do nothing */
	}

	return Local_ErrStatus;
     c56:	89 81       	ldd	r24, Y+1	; 0x01
}
     c58:	0f 90       	pop	r0
     c5a:	cf 91       	pop	r28
     c5c:	df 91       	pop	r29
     c5e:	08 95       	ret

00000c60 <TWI_SendSlaveAddressWithWrite>:

/* A function to send slave address with write */
TWI_ErrStatus TWI_SendSlaveAddressWithWrite (u8 Copy_u8SlaveAddress)
{
     c60:	df 93       	push	r29
     c62:	cf 93       	push	r28
     c64:	00 d0       	rcall	.+0      	; 0xc66 <TWI_SendSlaveAddressWithWrite+0x6>
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	8a 83       	std	Y+2, r24	; 0x02
	/* Variable for Error Status */
	TWI_ErrStatus Local_ErrStatus = NoError;
     c6c:	19 82       	std	Y+1, r1	; 0x01

	/* Set the slave address in the 7 MSB in the data register */
	TWDR = (Copy_u8SlaveAddress << 1);
     c6e:	e3 e2       	ldi	r30, 0x23	; 35
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	8a 81       	ldd	r24, Y+2	; 0x02
     c74:	88 0f       	add	r24, r24
     c76:	80 83       	st	Z, r24

	/* Select Write */
	CLR_BIT(TWDR, TWDR_TWD0);
     c78:	a3 e2       	ldi	r26, 0x23	; 35
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e3 e2       	ldi	r30, 0x23	; 35
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	8e 7f       	andi	r24, 0xFE	; 254
     c84:	8c 93       	st	X, r24

	/* Clear Start Condition bit */
	CLR_BIT(TWCR, TWCR_TWSTA);
     c86:	a6 e5       	ldi	r26, 0x56	; 86
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e6 e5       	ldi	r30, 0x56	; 86
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	8f 7d       	andi	r24, 0xDF	; 223
     c92:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start previous operation */
	SET_BIT(TWCR, TWCR_TWINT);
     c94:	a6 e5       	ldi	r26, 0x56	; 86
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e6 e5       	ldi	r30, 0x56	; 86
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	80 68       	ori	r24, 0x80	; 128
     ca0:	8c 93       	st	X, r24

	/* Wait until the interrupt flag is raised again and previous operation is complete */
	while ((GET_BIT(TWCR, TWCR_TWINT)) == 0);
     ca2:	e6 e5       	ldi	r30, 0x56	; 86
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	88 23       	and	r24, r24
     caa:	dc f7       	brge	.-10     	; 0xca2 <TWI_SendSlaveAddressWithWrite+0x42>

	/* Check for the operation  */
	if ((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK)
     cac:	e1 e2       	ldi	r30, 0x21	; 33
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	88 2f       	mov	r24, r24
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	88 7f       	andi	r24, 0xF8	; 248
     cb8:	90 70       	andi	r25, 0x00	; 0
     cba:	88 31       	cpi	r24, 0x18	; 24
     cbc:	91 05       	cpc	r25, r1
     cbe:	11 f0       	breq	.+4      	; 0xcc4 <TWI_SendSlaveAddressWithWrite+0x64>
	{
		Local_ErrStatus = SlaveAddressWithWriteErr;
     cc0:	83 e0       	ldi	r24, 0x03	; 3
     cc2:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do nothing */
	}

	return Local_ErrStatus;
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <TWI_SendSlaveAddressWithRead>:

/* A function to send slave address with read */
TWI_ErrStatus TWI_SendSlaveAddressWithRead (u8 Copy_u8SlaveAddress)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <TWI_SendSlaveAddressWithRead+0x6>
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	8a 83       	std	Y+2, r24	; 0x02
	/* Variable for Error Status */
	TWI_ErrStatus Local_ErrStatus = NoError;
     cdc:	19 82       	std	Y+1, r1	; 0x01

	/* Set the slave address in the 7 MSB in the data register */
	TWDR = Copy_u8SlaveAddress << 1;
     cde:	e3 e2       	ldi	r30, 0x23	; 35
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	88 0f       	add	r24, r24
     ce6:	80 83       	st	Z, r24

	/* Select Read */
	SET_BIT(TWDR, TWDR_TWD0);
     ce8:	a3 e2       	ldi	r26, 0x23	; 35
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	e3 e2       	ldi	r30, 0x23	; 35
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	81 60       	ori	r24, 0x01	; 1
     cf4:	8c 93       	st	X, r24

	/* Clear Start Condition bit */
	CLR_BIT(TWCR, TWCR_TWSTA);
     cf6:	a6 e5       	ldi	r26, 0x56	; 86
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e6 e5       	ldi	r30, 0x56	; 86
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	8f 7d       	andi	r24, 0xDF	; 223
     d02:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start previous operation */
	SET_BIT(TWCR, TWCR_TWINT);
     d04:	a6 e5       	ldi	r26, 0x56	; 86
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e6 e5       	ldi	r30, 0x56	; 86
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	80 68       	ori	r24, 0x80	; 128
     d10:	8c 93       	st	X, r24

	/* Wait until the interrupt flag is raised again and previous operation is complete */
	while ((GET_BIT(TWCR, TWCR_TWINT)) == 0);
     d12:	e6 e5       	ldi	r30, 0x56	; 86
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	88 23       	and	r24, r24
     d1a:	dc f7       	brge	.-10     	; 0xd12 <TWI_SendSlaveAddressWithRead+0x42>

	/* Check for the operation  */
	if ((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK)
     d1c:	e1 e2       	ldi	r30, 0x21	; 33
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	88 2f       	mov	r24, r24
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	88 7f       	andi	r24, 0xF8	; 248
     d28:	90 70       	andi	r25, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	11 f0       	breq	.+4      	; 0xd34 <TWI_SendSlaveAddressWithRead+0x64>
	{
		Local_ErrStatus = SlaveAddressWithReadErr;
     d30:	84 e0       	ldi	r24, 0x04	; 4
     d32:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do nothing */
	}

	return Local_ErrStatus;
     d34:	89 81       	ldd	r24, Y+1	; 0x01
}
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	08 95       	ret

00000d40 <TWI_MasterWriteDataByte>:

/* A function to write data byte */
TWI_ErrStatus TWI_MasterWriteDataByte (u8 Copy_u8DataByte)
{
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	00 d0       	rcall	.+0      	; 0xd46 <TWI_MasterWriteDataByte+0x6>
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	8a 83       	std	Y+2, r24	; 0x02
	/* Variable for Error Status */
	TWI_ErrStatus Local_ErrStatus = NoError;
     d4c:	19 82       	std	Y+1, r1	; 0x01

	/* Write the data Byte */
	TWDR = Copy_u8DataByte;
     d4e:	e3 e2       	ldi	r30, 0x23	; 35
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	80 83       	st	Z, r24

	/* Clear the interrupt flag to start previous operation */
	SET_BIT(TWCR, TWCR_TWINT);
     d56:	a6 e5       	ldi	r26, 0x56	; 86
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e6 e5       	ldi	r30, 0x56	; 86
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	80 68       	ori	r24, 0x80	; 128
     d62:	8c 93       	st	X, r24

	/* Wait until the interrupt flag is raised again and previous operation is complete */
	while ((GET_BIT(TWCR, TWCR_TWINT)) == 0);
     d64:	e6 e5       	ldi	r30, 0x56	; 86
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	88 23       	and	r24, r24
     d6c:	dc f7       	brge	.-10     	; 0xd64 <TWI_MasterWriteDataByte+0x24>

	/* Check for the operation  */
	if ((TWSR & 0xF8) != MSTR_WR_BYTE_ACK)
     d6e:	e1 e2       	ldi	r30, 0x21	; 33
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	88 2f       	mov	r24, r24
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	88 7f       	andi	r24, 0xF8	; 248
     d7a:	90 70       	andi	r25, 0x00	; 0
     d7c:	88 32       	cpi	r24, 0x28	; 40
     d7e:	91 05       	cpc	r25, r1
     d80:	11 f0       	breq	.+4      	; 0xd86 <TWI_MasterWriteDataByte+0x46>
	{
		Local_ErrStatus = MasterWriteByteErr;
     d82:	85 e0       	ldi	r24, 0x05	; 5
     d84:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do nothing */
	}

	return Local_ErrStatus;
     d86:	89 81       	ldd	r24, Y+1	; 0x01
}
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <TWI_MasterReadDataByte>:

/* A function to read data byte */
TWI_ErrStatus TWI_MasterReadDataByte (u8 *Copy_pu8DataByte)
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	00 d0       	rcall	.+0      	; 0xd98 <TWI_MasterReadDataByte+0x6>
     d98:	0f 92       	push	r0
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	9b 83       	std	Y+3, r25	; 0x03
     da0:	8a 83       	std	Y+2, r24	; 0x02
	/* Variable for Error Status */
	TWI_ErrStatus Local_ErrStatus = NoError;
     da2:	19 82       	std	Y+1, r1	; 0x01

	/* Enable Master generating acknowledge bit after receiving the data */
	CLR_BIT(TWCR, TWCR_TWEA);
     da4:	a6 e5       	ldi	r26, 0x56	; 86
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e6 e5       	ldi	r30, 0x56	; 86
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	8f 7b       	andi	r24, 0xBF	; 191
     db0:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start Slave Send data */
	SET_BIT(TWCR, TWCR_TWINT);
     db2:	a6 e5       	ldi	r26, 0x56	; 86
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e6 e5       	ldi	r30, 0x56	; 86
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	80 68       	ori	r24, 0x80	; 128
     dbe:	8c 93       	st	X, r24

	/* Wait until the interrupt flag is raised again and previous operation is complete */
	while ((GET_BIT(TWCR, TWCR_TWINT)) == 0);
     dc0:	e6 e5       	ldi	r30, 0x56	; 86
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	88 23       	and	r24, r24
     dc8:	dc f7       	brge	.-10     	; 0xdc0 <TWI_MasterReadDataByte+0x2e>

	/* Check for the operation  */
	if ((TWSR & 0xF8) != MSTR_RD_BYTE_WITH_NACK)
     dca:	e1 e2       	ldi	r30, 0x21	; 33
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	88 2f       	mov	r24, r24
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	88 7f       	andi	r24, 0xF8	; 248
     dd6:	90 70       	andi	r25, 0x00	; 0
     dd8:	88 35       	cpi	r24, 0x58	; 88
     dda:	91 05       	cpc	r25, r1
     ddc:	19 f0       	breq	.+6      	; 0xde4 <TWI_MasterReadDataByte+0x52>
	{
		Local_ErrStatus = MasterReadByteErr;
     dde:	86 e0       	ldi	r24, 0x06	; 6
     de0:	89 83       	std	Y+1, r24	; 0x01
     de2:	06 c0       	rjmp	.+12     	; 0xdf0 <TWI_MasterReadDataByte+0x5e>
	}
	else
	{
		/* Read the received data */
		*Copy_pu8DataByte = TWDR;
     de4:	e3 e2       	ldi	r30, 0x23	; 35
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	ea 81       	ldd	r30, Y+2	; 0x02
     dec:	fb 81       	ldd	r31, Y+3	; 0x03
     dee:	80 83       	st	Z, r24
	}

	return Local_ErrStatus;
     df0:	89 81       	ldd	r24, Y+1	; 0x01
}
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	08 95       	ret

00000dfe <TWI_SendStopCondition>:

/* A function to send stop condition */
void TWI_SendStopCondition (void)
{
     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
	/* Generate stop condition on the bus */
	SET_BIT(TWCR, TWCR_TWSTO);
     e06:	a6 e5       	ldi	r26, 0x56	; 86
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e6 e5       	ldi	r30, 0x56	; 86
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	80 61       	ori	r24, 0x10	; 16
     e12:	8c 93       	st	X, r24

	/* Clear the interrupt flag to start Slave Send data */
	SET_BIT(TWCR, TWCR_TWINT);
     e14:	a6 e5       	ldi	r26, 0x56	; 86
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e6 e5       	ldi	r30, 0x56	; 86
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	80 68       	ori	r24, 0x80	; 128
     e20:	8c 93       	st	X, r24
}
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidSetPinDirection(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8Direction)
{
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <DIO_voidSetPinDirection+0x6>
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <DIO_voidSetPinDirection+0x8>
     e30:	0f 92       	push	r0
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	6a 83       	std	Y+2, r22	; 0x02
     e3a:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortName)
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	3d 83       	std	Y+5, r19	; 0x05
     e44:	2c 83       	std	Y+4, r18	; 0x04
     e46:	8c 81       	ldd	r24, Y+4	; 0x04
     e48:	9d 81       	ldd	r25, Y+5	; 0x05
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	91 05       	cpc	r25, r1
     e4e:	09 f4       	brne	.+2      	; 0xe52 <DIO_voidSetPinDirection+0x2a>
     e50:	47 c0       	rjmp	.+142    	; 0xee0 <DIO_voidSetPinDirection+0xb8>
     e52:	2c 81       	ldd	r18, Y+4	; 0x04
     e54:	3d 81       	ldd	r19, Y+5	; 0x05
     e56:	22 30       	cpi	r18, 0x02	; 2
     e58:	31 05       	cpc	r19, r1
     e5a:	2c f4       	brge	.+10     	; 0xe66 <DIO_voidSetPinDirection+0x3e>
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	9d 81       	ldd	r25, Y+5	; 0x05
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	71 f0       	breq	.+28     	; 0xe80 <DIO_voidSetPinDirection+0x58>
     e64:	cb c0       	rjmp	.+406    	; 0xffc <DIO_voidSetPinDirection+0x1d4>
     e66:	2c 81       	ldd	r18, Y+4	; 0x04
     e68:	3d 81       	ldd	r19, Y+5	; 0x05
     e6a:	22 30       	cpi	r18, 0x02	; 2
     e6c:	31 05       	cpc	r19, r1
     e6e:	09 f4       	brne	.+2      	; 0xe72 <DIO_voidSetPinDirection+0x4a>
     e70:	67 c0       	rjmp	.+206    	; 0xf40 <DIO_voidSetPinDirection+0x118>
     e72:	8c 81       	ldd	r24, Y+4	; 0x04
     e74:	9d 81       	ldd	r25, Y+5	; 0x05
     e76:	83 30       	cpi	r24, 0x03	; 3
     e78:	91 05       	cpc	r25, r1
     e7a:	09 f4       	brne	.+2      	; 0xe7e <DIO_voidSetPinDirection+0x56>
     e7c:	91 c0       	rjmp	.+290    	; 0xfa0 <DIO_voidSetPinDirection+0x178>
     e7e:	be c0       	rjmp	.+380    	; 0xffc <DIO_voidSetPinDirection+0x1d4>
	{
		case DIO_PORTA:
			if(Copy_u8Direction == OUTPUT)
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	a1 f4       	brne	.+40     	; 0xeae <DIO_voidSetPinDirection+0x86>
			{
				SET_BIT(DDRA, Copy_u8PinNumber);
     e86:	aa e3       	ldi	r26, 0x3A	; 58
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	ea e3       	ldi	r30, 0x3A	; 58
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <DIO_voidSetPinDirection+0x7c>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <DIO_voidSetPinDirection+0x78>
     ea8:	84 2b       	or	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	a7 c0       	rjmp	.+334    	; 0xffc <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	88 23       	and	r24, r24
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <DIO_voidSetPinDirection+0x8e>
     eb4:	a3 c0       	rjmp	.+326    	; 0xffc <DIO_voidSetPinDirection+0x1d4>
			{
				CLR_BIT(DDRA, Copy_u8PinNumber);
     eb6:	aa e3       	ldi	r26, 0x3A	; 58
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	ea e3       	ldi	r30, 0x3A	; 58
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <DIO_voidSetPinDirection+0xac>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <DIO_voidSetPinDirection+0xa8>
     ed8:	80 95       	com	r24
     eda:	84 23       	and	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	8e c0       	rjmp	.+284    	; 0xffc <DIO_voidSetPinDirection+0x1d4>
			{
				// Do Nothing
			}
		break;
		case DIO_PORTB:
			if(Copy_u8Direction == OUTPUT)
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	a1 f4       	brne	.+40     	; 0xf0e <DIO_voidSetPinDirection+0xe6>
			{
				SET_BIT(DDRB, Copy_u8PinNumber);
     ee6:	a7 e3       	ldi	r26, 0x37	; 55
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e7 e3       	ldi	r30, 0x37	; 55
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 2e       	mov	r0, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <DIO_voidSetPinDirection+0xdc>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <DIO_voidSetPinDirection+0xd8>
     f08:	84 2b       	or	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	77 c0       	rjmp	.+238    	; 0xffc <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	88 23       	and	r24, r24
     f12:	09 f0       	breq	.+2      	; 0xf16 <DIO_voidSetPinDirection+0xee>
     f14:	73 c0       	rjmp	.+230    	; 0xffc <DIO_voidSetPinDirection+0x1d4>
			{
				CLR_BIT(DDRB, Copy_u8PinNumber);
     f16:	a7 e3       	ldi	r26, 0x37	; 55
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e7 e3       	ldi	r30, 0x37	; 55
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_voidSetPinDirection+0x10c>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_voidSetPinDirection+0x108>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	5e c0       	rjmp	.+188    	; 0xffc <DIO_voidSetPinDirection+0x1d4>
			{
				// Do Nothing
			}
		break;
		case DIO_PORTC:
			if(Copy_u8Direction == OUTPUT)
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	a1 f4       	brne	.+40     	; 0xf6e <DIO_voidSetPinDirection+0x146>
			{
				SET_BIT(DDRC, Copy_u8PinNumber);
     f46:	a4 e3       	ldi	r26, 0x34	; 52
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e4 e3       	ldi	r30, 0x34	; 52
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_voidSetPinDirection+0x13c>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_voidSetPinDirection+0x138>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	47 c0       	rjmp	.+142    	; 0xffc <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	88 23       	and	r24, r24
     f72:	09 f0       	breq	.+2      	; 0xf76 <DIO_voidSetPinDirection+0x14e>
     f74:	43 c0       	rjmp	.+134    	; 0xffc <DIO_voidSetPinDirection+0x1d4>
			{
				CLR_BIT(DDRC, Copy_u8PinNumber);
     f76:	a4 e3       	ldi	r26, 0x34	; 52
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e4 e3       	ldi	r30, 0x34	; 52
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_voidSetPinDirection+0x16c>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_voidSetPinDirection+0x168>
     f98:	80 95       	com	r24
     f9a:	84 23       	and	r24, r20
     f9c:	8c 93       	st	X, r24
     f9e:	2e c0       	rjmp	.+92     	; 0xffc <DIO_voidSetPinDirection+0x1d4>
			{
				// Do Nothing
			}
		break;
		case DIO_PORTD:
			if(Copy_u8Direction == OUTPUT)
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	a1 f4       	brne	.+40     	; 0xfce <DIO_voidSetPinDirection+0x1a6>
			{
				SET_BIT(DDRD, Copy_u8PinNumber);
     fa6:	a1 e3       	ldi	r26, 0x31	; 49
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e1 e3       	ldi	r30, 0x31	; 49
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	48 2f       	mov	r20, r24
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 2e       	mov	r0, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO_voidSetPinDirection+0x19c>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO_voidSetPinDirection+0x198>
     fc8:	84 2b       	or	r24, r20
     fca:	8c 93       	st	X, r24
     fcc:	17 c0       	rjmp	.+46     	; 0xffc <DIO_voidSetPinDirection+0x1d4>
			}
			else if (Copy_u8Direction == INPUT)
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	88 23       	and	r24, r24
     fd2:	a1 f4       	brne	.+40     	; 0xffc <DIO_voidSetPinDirection+0x1d4>
			{
				CLR_BIT(DDRD, Copy_u8PinNumber);
     fd4:	a1 e3       	ldi	r26, 0x31	; 49
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e1 e3       	ldi	r30, 0x31	; 49
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 2e       	mov	r0, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <DIO_voidSetPinDirection+0x1ca>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <DIO_voidSetPinDirection+0x1c6>
     ff6:	80 95       	com	r24
     ff8:	84 23       	and	r24, r20
     ffa:	8c 93       	st	X, r24
		break;
		default:
			// Do Nothing
		break;
	}
}
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <DIO_voidSetPinValue>:


void DIO_voidSetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinState)
{
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	2d 97       	sbiw	r28, 0x0d	; 13
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	6a 83       	std	Y+2, r22	; 0x02
    1024:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortName)
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	3d 87       	std	Y+13, r19	; 0x0d
    102e:	2c 87       	std	Y+12, r18	; 0x0c
    1030:	8c 85       	ldd	r24, Y+12	; 0x0c
    1032:	9d 85       	ldd	r25, Y+13	; 0x0d
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	91 05       	cpc	r25, r1
    1038:	09 f4       	brne	.+2      	; 0x103c <DIO_voidSetPinValue+0x30>
    103a:	4f c0       	rjmp	.+158    	; 0x10da <DIO_voidSetPinValue+0xce>
    103c:	2c 85       	ldd	r18, Y+12	; 0x0c
    103e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1040:	22 30       	cpi	r18, 0x02	; 2
    1042:	31 05       	cpc	r19, r1
    1044:	2c f4       	brge	.+10     	; 0x1050 <DIO_voidSetPinValue+0x44>
    1046:	8c 85       	ldd	r24, Y+12	; 0x0c
    1048:	9d 85       	ldd	r25, Y+13	; 0x0d
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	71 f0       	breq	.+28     	; 0x106a <DIO_voidSetPinValue+0x5e>
    104e:	ec c0       	rjmp	.+472    	; 0x1228 <DIO_voidSetPinValue+0x21c>
    1050:	2c 85       	ldd	r18, Y+12	; 0x0c
    1052:	3d 85       	ldd	r19, Y+13	; 0x0d
    1054:	22 30       	cpi	r18, 0x02	; 2
    1056:	31 05       	cpc	r19, r1
    1058:	09 f4       	brne	.+2      	; 0x105c <DIO_voidSetPinValue+0x50>
    105a:	77 c0       	rjmp	.+238    	; 0x114a <DIO_voidSetPinValue+0x13e>
    105c:	8c 85       	ldd	r24, Y+12	; 0x0c
    105e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1060:	83 30       	cpi	r24, 0x03	; 3
    1062:	91 05       	cpc	r25, r1
    1064:	09 f4       	brne	.+2      	; 0x1068 <DIO_voidSetPinValue+0x5c>
    1066:	a9 c0       	rjmp	.+338    	; 0x11ba <DIO_voidSetPinValue+0x1ae>
    1068:	df c0       	rjmp	.+446    	; 0x1228 <DIO_voidSetPinValue+0x21c>
	{
		case DIO_PORTA:
			switch(Copy_u8PinState)
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	3b 87       	std	Y+11, r19	; 0x0b
    1072:	2a 87       	std	Y+10, r18	; 0x0a
    1074:	8a 85       	ldd	r24, Y+10	; 0x0a
    1076:	9b 85       	ldd	r25, Y+11	; 0x0b
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	31 f0       	breq	.+12     	; 0x1088 <DIO_voidSetPinValue+0x7c>
    107c:	2a 85       	ldd	r18, Y+10	; 0x0a
    107e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1080:	21 30       	cpi	r18, 0x01	; 1
    1082:	31 05       	cpc	r19, r1
    1084:	b1 f0       	breq	.+44     	; 0x10b2 <DIO_voidSetPinValue+0xa6>
    1086:	d0 c0       	rjmp	.+416    	; 0x1228 <DIO_voidSetPinValue+0x21c>
			{
				case LOW:
					CLR_BIT(PORTA, Copy_u8PinNumber);
    1088:	ab e3       	ldi	r26, 0x3B	; 59
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	eb e3       	ldi	r30, 0x3B	; 59
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_voidSetPinValue+0x9a>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <DIO_voidSetPinValue+0x96>
    10aa:	80 95       	com	r24
    10ac:	84 23       	and	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	bb c0       	rjmp	.+374    	; 0x1228 <DIO_voidSetPinValue+0x21c>
				break;

				case HIGH:
					SET_BIT(PORTA, Copy_u8PinNumber);
    10b2:	ab e3       	ldi	r26, 0x3B	; 59
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	eb e3       	ldi	r30, 0x3B	; 59
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	48 2f       	mov	r20, r24
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 2e       	mov	r0, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_voidSetPinValue+0xc4>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	0a 94       	dec	r0
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <DIO_voidSetPinValue+0xc0>
    10d4:	84 2b       	or	r24, r20
    10d6:	8c 93       	st	X, r24
    10d8:	a7 c0       	rjmp	.+334    	; 0x1228 <DIO_voidSetPinValue+0x21c>
				break;
			}
		break;
		
		case DIO_PORTB:
			switch(Copy_u8PinState)
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	39 87       	std	Y+9, r19	; 0x09
    10e2:	28 87       	std	Y+8, r18	; 0x08
    10e4:	88 85       	ldd	r24, Y+8	; 0x08
    10e6:	99 85       	ldd	r25, Y+9	; 0x09
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	31 f0       	breq	.+12     	; 0x10f8 <DIO_voidSetPinValue+0xec>
    10ec:	28 85       	ldd	r18, Y+8	; 0x08
    10ee:	39 85       	ldd	r19, Y+9	; 0x09
    10f0:	21 30       	cpi	r18, 0x01	; 1
    10f2:	31 05       	cpc	r19, r1
    10f4:	b1 f0       	breq	.+44     	; 0x1122 <DIO_voidSetPinValue+0x116>
    10f6:	98 c0       	rjmp	.+304    	; 0x1228 <DIO_voidSetPinValue+0x21c>
			{
				case LOW:
					CLR_BIT(PORTB, Copy_u8PinNumber);
    10f8:	a8 e3       	ldi	r26, 0x38	; 56
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e8 e3       	ldi	r30, 0x38	; 56
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	48 2f       	mov	r20, r24
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 2e       	mov	r0, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <DIO_voidSetPinValue+0x10a>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	0a 94       	dec	r0
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <DIO_voidSetPinValue+0x106>
    111a:	80 95       	com	r24
    111c:	84 23       	and	r24, r20
    111e:	8c 93       	st	X, r24
    1120:	83 c0       	rjmp	.+262    	; 0x1228 <DIO_voidSetPinValue+0x21c>
				break;

				case HIGH:
					SET_BIT(PORTB, Copy_u8PinNumber);
    1122:	a8 e3       	ldi	r26, 0x38	; 56
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e8 e3       	ldi	r30, 0x38	; 56
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <DIO_voidSetPinValue+0x134>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <DIO_voidSetPinValue+0x130>
    1144:	84 2b       	or	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	6f c0       	rjmp	.+222    	; 0x1228 <DIO_voidSetPinValue+0x21c>
				break;
			}
		break;

		case DIO_PORTC:
			switch(Copy_u8PinState)
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	3f 83       	std	Y+7, r19	; 0x07
    1152:	2e 83       	std	Y+6, r18	; 0x06
    1154:	8e 81       	ldd	r24, Y+6	; 0x06
    1156:	9f 81       	ldd	r25, Y+7	; 0x07
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	31 f0       	breq	.+12     	; 0x1168 <DIO_voidSetPinValue+0x15c>
    115c:	2e 81       	ldd	r18, Y+6	; 0x06
    115e:	3f 81       	ldd	r19, Y+7	; 0x07
    1160:	21 30       	cpi	r18, 0x01	; 1
    1162:	31 05       	cpc	r19, r1
    1164:	b1 f0       	breq	.+44     	; 0x1192 <DIO_voidSetPinValue+0x186>
    1166:	60 c0       	rjmp	.+192    	; 0x1228 <DIO_voidSetPinValue+0x21c>
			{
				case LOW:
					CLR_BIT(PORTC, Copy_u8PinNumber);
    1168:	a5 e3       	ldi	r26, 0x35	; 53
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e5 e3       	ldi	r30, 0x35	; 53
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO_voidSetPinValue+0x17a>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO_voidSetPinValue+0x176>
    118a:	80 95       	com	r24
    118c:	84 23       	and	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	4b c0       	rjmp	.+150    	; 0x1228 <DIO_voidSetPinValue+0x21c>
				break;

				case HIGH:
					SET_BIT(PORTC, Copy_u8PinNumber);
    1192:	a5 e3       	ldi	r26, 0x35	; 53
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e5 e3       	ldi	r30, 0x35	; 53
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_voidSetPinValue+0x1a4>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_voidSetPinValue+0x1a0>
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	37 c0       	rjmp	.+110    	; 0x1228 <DIO_voidSetPinValue+0x21c>
				break;
			}
		break;

		case DIO_PORTD:
			switch(Copy_u8PinState)
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	3d 83       	std	Y+5, r19	; 0x05
    11c2:	2c 83       	std	Y+4, r18	; 0x04
    11c4:	8c 81       	ldd	r24, Y+4	; 0x04
    11c6:	9d 81       	ldd	r25, Y+5	; 0x05
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	31 f0       	breq	.+12     	; 0x11d8 <DIO_voidSetPinValue+0x1cc>
    11cc:	2c 81       	ldd	r18, Y+4	; 0x04
    11ce:	3d 81       	ldd	r19, Y+5	; 0x05
    11d0:	21 30       	cpi	r18, 0x01	; 1
    11d2:	31 05       	cpc	r19, r1
    11d4:	b1 f0       	breq	.+44     	; 0x1202 <DIO_voidSetPinValue+0x1f6>
    11d6:	28 c0       	rjmp	.+80     	; 0x1228 <DIO_voidSetPinValue+0x21c>
			{
				case LOW:
					CLR_BIT(PORTD, Copy_u8PinNumber);
    11d8:	a2 e3       	ldi	r26, 0x32	; 50
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e2 e3       	ldi	r30, 0x32	; 50
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_voidSetPinValue+0x1ea>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_voidSetPinValue+0x1e6>
    11fa:	80 95       	com	r24
    11fc:	84 23       	and	r24, r20
    11fe:	8c 93       	st	X, r24
    1200:	13 c0       	rjmp	.+38     	; 0x1228 <DIO_voidSetPinValue+0x21c>
				break;

				case HIGH:
					SET_BIT(PORTD, Copy_u8PinNumber);
    1202:	a2 e3       	ldi	r26, 0x32	; 50
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e2 e3       	ldi	r30, 0x32	; 50
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_voidSetPinValue+0x214>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_voidSetPinValue+0x210>
    1224:	84 2b       	or	r24, r20
    1226:	8c 93       	st	X, r24
		break;
		default:
			// Do Nothing
		break;
	}
}
    1228:	2d 96       	adiw	r28, 0x0d	; 13
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	00 d0       	rcall	.+0      	; 0x1240 <DIO_u8GetPinValue+0x6>
    1240:	00 d0       	rcall	.+0      	; 0x1242 <DIO_u8GetPinValue+0x8>
    1242:	0f 92       	push	r0
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	8a 83       	std	Y+2, r24	; 0x02
    124a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinValue = 0;
    124c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortName)
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	3d 83       	std	Y+5, r19	; 0x05
    1256:	2c 83       	std	Y+4, r18	; 0x04
    1258:	4c 81       	ldd	r20, Y+4	; 0x04
    125a:	5d 81       	ldd	r21, Y+5	; 0x05
    125c:	41 30       	cpi	r20, 0x01	; 1
    125e:	51 05       	cpc	r21, r1
    1260:	41 f1       	breq	.+80     	; 0x12b2 <DIO_u8GetPinValue+0x78>
    1262:	8c 81       	ldd	r24, Y+4	; 0x04
    1264:	9d 81       	ldd	r25, Y+5	; 0x05
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	91 05       	cpc	r25, r1
    126a:	34 f4       	brge	.+12     	; 0x1278 <DIO_u8GetPinValue+0x3e>
    126c:	2c 81       	ldd	r18, Y+4	; 0x04
    126e:	3d 81       	ldd	r19, Y+5	; 0x05
    1270:	21 15       	cp	r18, r1
    1272:	31 05       	cpc	r19, r1
    1274:	61 f0       	breq	.+24     	; 0x128e <DIO_u8GetPinValue+0x54>
    1276:	52 c0       	rjmp	.+164    	; 0x131c <DIO_u8GetPinValue+0xe2>
    1278:	4c 81       	ldd	r20, Y+4	; 0x04
    127a:	5d 81       	ldd	r21, Y+5	; 0x05
    127c:	42 30       	cpi	r20, 0x02	; 2
    127e:	51 05       	cpc	r21, r1
    1280:	51 f1       	breq	.+84     	; 0x12d6 <DIO_u8GetPinValue+0x9c>
    1282:	8c 81       	ldd	r24, Y+4	; 0x04
    1284:	9d 81       	ldd	r25, Y+5	; 0x05
    1286:	83 30       	cpi	r24, 0x03	; 3
    1288:	91 05       	cpc	r25, r1
    128a:	b9 f1       	breq	.+110    	; 0x12fa <DIO_u8GetPinValue+0xc0>
    128c:	47 c0       	rjmp	.+142    	; 0x131c <DIO_u8GetPinValue+0xe2>
	{
		case DIO_PORTA:
			Local_u8PinValue = GET_BIT(PINA, Copy_u8PinNumber);
    128e:	e9 e3       	ldi	r30, 0x39	; 57
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	88 2f       	mov	r24, r24
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	a9 01       	movw	r20, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_u8GetPinValue+0x6c>
    12a2:	55 95       	asr	r21
    12a4:	47 95       	ror	r20
    12a6:	8a 95       	dec	r24
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_u8GetPinValue+0x68>
    12aa:	ca 01       	movw	r24, r20
    12ac:	81 70       	andi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	35 c0       	rjmp	.+106    	; 0x131c <DIO_u8GetPinValue+0xe2>
		break;
		
		case DIO_PORTB:
			Local_u8PinValue = GET_BIT(PINB, Copy_u8PinNumber);
    12b2:	e6 e3       	ldi	r30, 0x36	; 54
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	88 2f       	mov	r24, r24
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	a9 01       	movw	r20, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_u8GetPinValue+0x90>
    12c6:	55 95       	asr	r21
    12c8:	47 95       	ror	r20
    12ca:	8a 95       	dec	r24
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <DIO_u8GetPinValue+0x8c>
    12ce:	ca 01       	movw	r24, r20
    12d0:	81 70       	andi	r24, 0x01	; 1
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	23 c0       	rjmp	.+70     	; 0x131c <DIO_u8GetPinValue+0xe2>
		break;
		
		case DIO_PORTC:
			Local_u8PinValue = GET_BIT(PINC, Copy_u8PinNumber);
    12d6:	e3 e3       	ldi	r30, 0x33	; 51
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	88 2f       	mov	r24, r24
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	a9 01       	movw	r20, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <DIO_u8GetPinValue+0xb4>
    12ea:	55 95       	asr	r21
    12ec:	47 95       	ror	r20
    12ee:	8a 95       	dec	r24
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <DIO_u8GetPinValue+0xb0>
    12f2:	ca 01       	movw	r24, r20
    12f4:	81 70       	andi	r24, 0x01	; 1
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	11 c0       	rjmp	.+34     	; 0x131c <DIO_u8GetPinValue+0xe2>
		break;

		case DIO_PORTD:
			Local_u8PinValue = GET_BIT(PIND, Copy_u8PinNumber);
    12fa:	e0 e3       	ldi	r30, 0x30	; 48
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a9 01       	movw	r20, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_u8GetPinValue+0xd8>
    130e:	55 95       	asr	r21
    1310:	47 95       	ror	r20
    1312:	8a 95       	dec	r24
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DIO_u8GetPinValue+0xd4>
    1316:	ca 01       	movw	r24, r20
    1318:	81 70       	andi	r24, 0x01	; 1
    131a:	89 83       	std	Y+1, r24	; 0x01
		break;
		default:
			/* Do Nothing*/
		break;
	}
	return Local_u8PinValue;
    131c:	89 81       	ldd	r24, Y+1	; 0x01
}
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <DIO_voidSetPortSpecificDirection>:

void DIO_voidSetPortSpecificDirection(u8 Copy_u8PortName, u8 Copy_u8SpecificDirection)
{
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	00 d0       	rcall	.+0      	; 0x1334 <DIO_voidSetPortSpecificDirection+0x6>
    1334:	00 d0       	rcall	.+0      	; 0x1336 <DIO_voidSetPortSpecificDirection+0x8>
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	3c 83       	std	Y+4, r19	; 0x04
    1346:	2b 83       	std	Y+3, r18	; 0x03
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	91 05       	cpc	r25, r1
    1350:	d1 f0       	breq	.+52     	; 0x1386 <DIO_voidSetPortSpecificDirection+0x58>
    1352:	2b 81       	ldd	r18, Y+3	; 0x03
    1354:	3c 81       	ldd	r19, Y+4	; 0x04
    1356:	22 30       	cpi	r18, 0x02	; 2
    1358:	31 05       	cpc	r19, r1
    135a:	2c f4       	brge	.+10     	; 0x1366 <DIO_voidSetPortSpecificDirection+0x38>
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	9c 81       	ldd	r25, Y+4	; 0x04
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	61 f0       	breq	.+24     	; 0x137c <DIO_voidSetPortSpecificDirection+0x4e>
    1364:	1e c0       	rjmp	.+60     	; 0x13a2 <DIO_voidSetPortSpecificDirection+0x74>
    1366:	2b 81       	ldd	r18, Y+3	; 0x03
    1368:	3c 81       	ldd	r19, Y+4	; 0x04
    136a:	22 30       	cpi	r18, 0x02	; 2
    136c:	31 05       	cpc	r19, r1
    136e:	81 f0       	breq	.+32     	; 0x1390 <DIO_voidSetPortSpecificDirection+0x62>
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	91 05       	cpc	r25, r1
    1378:	81 f0       	breq	.+32     	; 0x139a <DIO_voidSetPortSpecificDirection+0x6c>
    137a:	13 c0       	rjmp	.+38     	; 0x13a2 <DIO_voidSetPortSpecificDirection+0x74>
	{
		case DIO_PORTA:
			// DDRA = Copy_u8SpecificDirection;
			SET_REG(DDRA, Copy_u8SpecificDirection);
    137c:	ea e3       	ldi	r30, 0x3A	; 58
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	80 83       	st	Z, r24
    1384:	0e c0       	rjmp	.+28     	; 0x13a2 <DIO_voidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTB:
			SET_REG(DDRB, Copy_u8SpecificDirection);
    1386:	e7 e3       	ldi	r30, 0x37	; 55
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	80 83       	st	Z, r24
    138e:	09 c0       	rjmp	.+18     	; 0x13a2 <DIO_voidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTC:
			SET_REG(DDRC, Copy_u8SpecificDirection);
    1390:	e4 e3       	ldi	r30, 0x34	; 52
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	80 83       	st	Z, r24
    1398:	04 c0       	rjmp	.+8      	; 0x13a2 <DIO_voidSetPortSpecificDirection+0x74>
		break;
		case DIO_PORTD:
			SET_REG(DDRD, Copy_u8SpecificDirection);
    139a:	e1 e3       	ldi	r30, 0x31	; 49
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	80 83       	st	Z, r24
		break;
		default:
			/* Do Nothing*/
		break;
	}
}
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <DIO_voidSetPortSpecificValue>:
void DIO_voidSetPortSpecificValue(u8 Copy_u8PortName, u8 Copy_u8PortValue)
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <DIO_voidSetPortSpecificValue+0x6>
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <DIO_voidSetPortSpecificValue+0x8>
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	89 83       	std	Y+1, r24	; 0x01
    13be:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	3c 83       	std	Y+4, r19	; 0x04
    13c8:	2b 83       	std	Y+3, r18	; 0x03
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	9c 81       	ldd	r25, Y+4	; 0x04
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	91 05       	cpc	r25, r1
    13d2:	d1 f0       	breq	.+52     	; 0x1408 <DIO_voidSetPortSpecificValue+0x58>
    13d4:	2b 81       	ldd	r18, Y+3	; 0x03
    13d6:	3c 81       	ldd	r19, Y+4	; 0x04
    13d8:	22 30       	cpi	r18, 0x02	; 2
    13da:	31 05       	cpc	r19, r1
    13dc:	2c f4       	brge	.+10     	; 0x13e8 <DIO_voidSetPortSpecificValue+0x38>
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	61 f0       	breq	.+24     	; 0x13fe <DIO_voidSetPortSpecificValue+0x4e>
    13e6:	1e c0       	rjmp	.+60     	; 0x1424 <DIO_voidSetPortSpecificValue+0x74>
    13e8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ea:	3c 81       	ldd	r19, Y+4	; 0x04
    13ec:	22 30       	cpi	r18, 0x02	; 2
    13ee:	31 05       	cpc	r19, r1
    13f0:	81 f0       	breq	.+32     	; 0x1412 <DIO_voidSetPortSpecificValue+0x62>
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	83 30       	cpi	r24, 0x03	; 3
    13f8:	91 05       	cpc	r25, r1
    13fa:	81 f0       	breq	.+32     	; 0x141c <DIO_voidSetPortSpecificValue+0x6c>
    13fc:	13 c0       	rjmp	.+38     	; 0x1424 <DIO_voidSetPortSpecificValue+0x74>
	{
		case DIO_PORTA:
			// PORTA = Copy_u8PortValue;
			SET_REG(PORTA, Copy_u8PortValue);
    13fe:	eb e3       	ldi	r30, 0x3B	; 59
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	80 83       	st	Z, r24
    1406:	0e c0       	rjmp	.+28     	; 0x1424 <DIO_voidSetPortSpecificValue+0x74>
		break;
		case DIO_PORTB:
			SET_REG(PORTB, Copy_u8PortValue);		
    1408:	e8 e3       	ldi	r30, 0x38	; 56
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	80 83       	st	Z, r24
    1410:	09 c0       	rjmp	.+18     	; 0x1424 <DIO_voidSetPortSpecificValue+0x74>
		break;
		case DIO_PORTC:
			SET_REG(PORTC, Copy_u8PortValue);
    1412:	e5 e3       	ldi	r30, 0x35	; 53
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	80 83       	st	Z, r24
    141a:	04 c0       	rjmp	.+8      	; 0x1424 <DIO_voidSetPortSpecificValue+0x74>
		break;
		case DIO_PORTD:
			SET_REG(PORTD, Copy_u8PortValue);
    141c:	e2 e3       	ldi	r30, 0x32	; 50
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	80 83       	st	Z, r24
		break;
	}
}
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <LED_voidInit>:
#include "LED_private.h"
#include "LED_config.h"


void LED_voidInit(LED_t* Ledobj)
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	00 d0       	rcall	.+0      	; 0x1438 <LED_voidInit+0x6>
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	9a 83       	std	Y+2, r25	; 0x02
    143e:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinDirection(Ledobj->LED_PORT , Ledobj->LED_PIN , OUTPUT);
    1440:	e9 81       	ldd	r30, Y+1	; 0x01
    1442:	fa 81       	ldd	r31, Y+2	; 0x02
    1444:	80 81       	ld	r24, Z
    1446:	e9 81       	ldd	r30, Y+1	; 0x01
    1448:	fa 81       	ldd	r31, Y+2	; 0x02
    144a:	91 81       	ldd	r25, Z+1	; 0x01
    144c:	69 2f       	mov	r22, r25
    144e:	41 e0       	ldi	r20, 0x01	; 1
    1450:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_voidSetPinDirection>
}
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <LED_voidTurnOn>:
void LED_voidTurnOn(LED_t* Ledobj)
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	00 d0       	rcall	.+0      	; 0x1464 <LED_voidTurnOn+0x6>
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	9a 83       	std	Y+2, r25	; 0x02
    146a:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(Ledobj->LED_PORT , Ledobj->LED_PIN , HIGH);
    146c:	e9 81       	ldd	r30, Y+1	; 0x01
    146e:	fa 81       	ldd	r31, Y+2	; 0x02
    1470:	80 81       	ld	r24, Z
    1472:	e9 81       	ldd	r30, Y+1	; 0x01
    1474:	fa 81       	ldd	r31, Y+2	; 0x02
    1476:	91 81       	ldd	r25, Z+1	; 0x01
    1478:	69 2f       	mov	r22, r25
    147a:	41 e0       	ldi	r20, 0x01	; 1
    147c:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
}
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <LED_voidTurnOff>:
void LED_voidTurnOff(LED_t* Ledobj)
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	00 d0       	rcall	.+0      	; 0x1490 <LED_voidTurnOff+0x6>
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	9a 83       	std	Y+2, r25	; 0x02
    1496:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(Ledobj->LED_PORT , Ledobj->LED_PIN , LOW);
    1498:	e9 81       	ldd	r30, Y+1	; 0x01
    149a:	fa 81       	ldd	r31, Y+2	; 0x02
    149c:	80 81       	ld	r24, Z
    149e:	e9 81       	ldd	r30, Y+1	; 0x01
    14a0:	fa 81       	ldd	r31, Y+2	; 0x02
    14a2:	91 81       	ldd	r25, Z+1	; 0x01
    14a4:	69 2f       	mov	r22, r25
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
}
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <LCD_voidInit>:




void LCD_voidInit(void)
{
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	2e 97       	sbiw	r28, 0x0e	; 14
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	f8 94       	cli
    14c4:	de bf       	out	0x3e, r29	; 62
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	cd bf       	out	0x3d, r28	; 61
    #if LCD_INIT_MODE == EIGHT_BIT_MODE
    /*Initialize Data Port*/
    DIO_voidSetPortSpecificDirection(LCD_DATA_PORT, LCD_ALL_OUTPUT);
    14ca:	83 e0       	ldi	r24, 0x03	; 3
    14cc:	6f ef       	ldi	r22, 0xFF	; 255
    14ce:	0e 94 97 09 	call	0x132e	; 0x132e <DIO_voidSetPortSpecificDirection>
    /*Initialize Control Pins*/
    DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_RW_PIN, OUTPUT);
    14d2:	82 e0       	ldi	r24, 0x02	; 2
    14d4:	66 e0       	ldi	r22, 0x06	; 6
    14d6:	41 e0       	ldi	r20, 0x01	; 1
    14d8:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_RS_PIN, OUTPUT);
    14dc:	82 e0       	ldi	r24, 0x02	; 2
    14de:	65 e0       	ldi	r22, 0x05	; 5
    14e0:	41 e0       	ldi	r20, 0x01	; 1
    14e2:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_EN_PIN, OUTPUT);
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	67 e0       	ldi	r22, 0x07	; 7
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_voidSetPinDirection>
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	a0 e2       	ldi	r26, 0x20	; 32
    14f6:	b2 e4       	ldi	r27, 0x42	; 66
    14f8:	8b 87       	std	Y+11, r24	; 0x0b
    14fa:	9c 87       	std	Y+12, r25	; 0x0c
    14fc:	ad 87       	std	Y+13, r26	; 0x0d
    14fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1500:	6b 85       	ldd	r22, Y+11	; 0x0b
    1502:	7c 85       	ldd	r23, Y+12	; 0x0c
    1504:	8d 85       	ldd	r24, Y+13	; 0x0d
    1506:	9e 85       	ldd	r25, Y+14	; 0x0e
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	4a ef       	ldi	r20, 0xFA	; 250
    150e:	54 e4       	ldi	r21, 0x44	; 68
    1510:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	8f 83       	std	Y+7, r24	; 0x07
    151a:	98 87       	std	Y+8, r25	; 0x08
    151c:	a9 87       	std	Y+9, r26	; 0x09
    151e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1520:	6f 81       	ldd	r22, Y+7	; 0x07
    1522:	78 85       	ldd	r23, Y+8	; 0x08
    1524:	89 85       	ldd	r24, Y+9	; 0x09
    1526:	9a 85       	ldd	r25, Y+10	; 0x0a
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e8       	ldi	r20, 0x80	; 128
    152e:	5f e3       	ldi	r21, 0x3F	; 63
    1530:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1534:	88 23       	and	r24, r24
    1536:	2c f4       	brge	.+10     	; 0x1542 <LCD_voidInit+0x8c>
		__ticks = 1;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	9e 83       	std	Y+6, r25	; 0x06
    153e:	8d 83       	std	Y+5, r24	; 0x05
    1540:	3f c0       	rjmp	.+126    	; 0x15c0 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    1542:	6f 81       	ldd	r22, Y+7	; 0x07
    1544:	78 85       	ldd	r23, Y+8	; 0x08
    1546:	89 85       	ldd	r24, Y+9	; 0x09
    1548:	9a 85       	ldd	r25, Y+10	; 0x0a
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	3f ef       	ldi	r19, 0xFF	; 255
    154e:	4f e7       	ldi	r20, 0x7F	; 127
    1550:	57 e4       	ldi	r21, 0x47	; 71
    1552:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1556:	18 16       	cp	r1, r24
    1558:	4c f5       	brge	.+82     	; 0x15ac <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    155a:	6b 85       	ldd	r22, Y+11	; 0x0b
    155c:	7c 85       	ldd	r23, Y+12	; 0x0c
    155e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1560:	9e 85       	ldd	r25, Y+14	; 0x0e
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	40 e2       	ldi	r20, 0x20	; 32
    1568:	51 e4       	ldi	r21, 0x41	; 65
    156a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	bc 01       	movw	r22, r24
    1574:	cd 01       	movw	r24, r26
    1576:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	9e 83       	std	Y+6, r25	; 0x06
    1580:	8d 83       	std	Y+5, r24	; 0x05
    1582:	0f c0       	rjmp	.+30     	; 0x15a2 <LCD_voidInit+0xec>
    1584:	88 ec       	ldi	r24, 0xC8	; 200
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	9c 83       	std	Y+4, r25	; 0x04
    158a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	f1 f7       	brne	.-4      	; 0x1590 <LCD_voidInit+0xda>
    1594:	9c 83       	std	Y+4, r25	; 0x04
    1596:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	9e 81       	ldd	r25, Y+6	; 0x06
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	9e 83       	std	Y+6, r25	; 0x06
    15a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a2:	8d 81       	ldd	r24, Y+5	; 0x05
    15a4:	9e 81       	ldd	r25, Y+6	; 0x06
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	69 f7       	brne	.-38     	; 0x1584 <LCD_voidInit+0xce>
    15aa:	14 c0       	rjmp	.+40     	; 0x15d4 <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ac:	6f 81       	ldd	r22, Y+7	; 0x07
    15ae:	78 85       	ldd	r23, Y+8	; 0x08
    15b0:	89 85       	ldd	r24, Y+9	; 0x09
    15b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	9e 83       	std	Y+6, r25	; 0x06
    15be:	8d 83       	std	Y+5, r24	; 0x05
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	9a 83       	std	Y+2, r25	; 0x02
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	9a 81       	ldd	r25, Y+2	; 0x02
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	f1 f7       	brne	.-4      	; 0x15cc <LCD_voidInit+0x116>
    15d0:	9a 83       	std	Y+2, r25	; 0x02
    15d2:	89 83       	std	Y+1, r24	; 0x01

    // Wait For More Than 30 ms
    _delay_ms(40);

    /*Send Function Set Command*/
    LCD_voidSendCommand(FUNCTION_SET_CMD);
    15d4:	88 e3       	ldi	r24, 0x38	; 56
    15d6:	0e 94 9f 0b 	call	0x173e	; 0x173e <LCD_voidSendCommand>
    /*Send Display On/Off Control Command*/
    LCD_voidSendCommand(DISPLAY_ON_OFF_CMD);
    15da:	8f e0       	ldi	r24, 0x0F	; 15
    15dc:	0e 94 9f 0b 	call	0x173e	; 0x173e <LCD_voidSendCommand>
    /*Send Display Clear Command*/
    LCD_voidSendCommand(DISPLAY_CLEAR_CMD);
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	0e 94 9f 0b 	call	0x173e	; 0x173e <LCD_voidSendCommand>
    #elif LCD_INIT_MODE == FOUR_BIT_MODE

    #else
        #error("LCD_INIT_MODE Configuration Error")
    #endif
}
    15e6:	2e 96       	adiw	r28, 0x0e	; 14
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	08 95       	ret

000015f8 <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	2f 97       	sbiw	r28, 0x0f	; 15
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	8f 87       	std	Y+15, r24	; 0x0f
    // Set The RS Pin To Send The Command ( RS -> 0: Command, 1: Data)
    DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, HIGH);
    160e:	82 e0       	ldi	r24, 0x02	; 2
    1610:	65 e0       	ldi	r22, 0x05	; 5
    1612:	41 e0       	ldi	r20, 0x01	; 1
    1614:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
    // Clear The RW Pin To Write The Command (R/W -> 0: Write, 1: Read)
    DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
    1618:	82 e0       	ldi	r24, 0x02	; 2
    161a:	66 e0       	ldi	r22, 0x06	; 6
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
    // Set The Command On The Data/Command Port
    DIO_voidSetPortSpecificValue(LCD_DATA_PORT, Copy_u8Data);
    1622:	83 e0       	ldi	r24, 0x03	; 3
    1624:	6f 85       	ldd	r22, Y+15	; 0x0f
    1626:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_voidSetPortSpecificValue>

    /*Send Enable Pulse*/
    /*Low*/
    DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	67 e0       	ldi	r22, 0x07	; 7
    162e:	40 e0       	ldi	r20, 0x00	; 0
    1630:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
    /*High For 2msec*/
    DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
    1634:	82 e0       	ldi	r24, 0x02	; 2
    1636:	67 e0       	ldi	r22, 0x07	; 7
    1638:	41 e0       	ldi	r20, 0x01	; 1
    163a:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	a0 e0       	ldi	r26, 0x00	; 0
    1644:	b0 e4       	ldi	r27, 0x40	; 64
    1646:	8b 87       	std	Y+11, r24	; 0x0b
    1648:	9c 87       	std	Y+12, r25	; 0x0c
    164a:	ad 87       	std	Y+13, r26	; 0x0d
    164c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1650:	7c 85       	ldd	r23, Y+12	; 0x0c
    1652:	8d 85       	ldd	r24, Y+13	; 0x0d
    1654:	9e 85       	ldd	r25, Y+14	; 0x0e
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	4a ef       	ldi	r20, 0xFA	; 250
    165c:	54 e4       	ldi	r21, 0x44	; 68
    165e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	8f 83       	std	Y+7, r24	; 0x07
    1668:	98 87       	std	Y+8, r25	; 0x08
    166a:	a9 87       	std	Y+9, r26	; 0x09
    166c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    166e:	6f 81       	ldd	r22, Y+7	; 0x07
    1670:	78 85       	ldd	r23, Y+8	; 0x08
    1672:	89 85       	ldd	r24, Y+9	; 0x09
    1674:	9a 85       	ldd	r25, Y+10	; 0x0a
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e8       	ldi	r20, 0x80	; 128
    167c:	5f e3       	ldi	r21, 0x3F	; 63
    167e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1682:	88 23       	and	r24, r24
    1684:	2c f4       	brge	.+10     	; 0x1690 <LCD_voidSendData+0x98>
		__ticks = 1;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	9e 83       	std	Y+6, r25	; 0x06
    168c:	8d 83       	std	Y+5, r24	; 0x05
    168e:	3f c0       	rjmp	.+126    	; 0x170e <LCD_voidSendData+0x116>
	else if (__tmp > 65535)
    1690:	6f 81       	ldd	r22, Y+7	; 0x07
    1692:	78 85       	ldd	r23, Y+8	; 0x08
    1694:	89 85       	ldd	r24, Y+9	; 0x09
    1696:	9a 85       	ldd	r25, Y+10	; 0x0a
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	3f ef       	ldi	r19, 0xFF	; 255
    169c:	4f e7       	ldi	r20, 0x7F	; 127
    169e:	57 e4       	ldi	r21, 0x47	; 71
    16a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16a4:	18 16       	cp	r1, r24
    16a6:	4c f5       	brge	.+82     	; 0x16fa <LCD_voidSendData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e2       	ldi	r20, 0x20	; 32
    16b6:	51 e4       	ldi	r21, 0x41	; 65
    16b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	bc 01       	movw	r22, r24
    16c2:	cd 01       	movw	r24, r26
    16c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	9e 83       	std	Y+6, r25	; 0x06
    16ce:	8d 83       	std	Y+5, r24	; 0x05
    16d0:	0f c0       	rjmp	.+30     	; 0x16f0 <LCD_voidSendData+0xf8>
    16d2:	88 ec       	ldi	r24, 0xC8	; 200
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	9c 83       	std	Y+4, r25	; 0x04
    16d8:	8b 83       	std	Y+3, r24	; 0x03
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	f1 f7       	brne	.-4      	; 0x16de <LCD_voidSendData+0xe6>
    16e2:	9c 83       	std	Y+4, r25	; 0x04
    16e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	9e 83       	std	Y+6, r25	; 0x06
    16ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f0:	8d 81       	ldd	r24, Y+5	; 0x05
    16f2:	9e 81       	ldd	r25, Y+6	; 0x06
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	69 f7       	brne	.-38     	; 0x16d2 <LCD_voidSendData+0xda>
    16f8:	14 c0       	rjmp	.+40     	; 0x1722 <LCD_voidSendData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fa:	6f 81       	ldd	r22, Y+7	; 0x07
    16fc:	78 85       	ldd	r23, Y+8	; 0x08
    16fe:	89 85       	ldd	r24, Y+9	; 0x09
    1700:	9a 85       	ldd	r25, Y+10	; 0x0a
    1702:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	9e 83       	std	Y+6, r25	; 0x06
    170c:	8d 83       	std	Y+5, r24	; 0x05
    170e:	8d 81       	ldd	r24, Y+5	; 0x05
    1710:	9e 81       	ldd	r25, Y+6	; 0x06
    1712:	9a 83       	std	Y+2, r25	; 0x02
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	9a 81       	ldd	r25, Y+2	; 0x02
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	f1 f7       	brne	.-4      	; 0x171a <LCD_voidSendData+0x122>
    171e:	9a 83       	std	Y+2, r25	; 0x02
    1720:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    /*Low*/
    DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
    1722:	82 e0       	ldi	r24, 0x02	; 2
    1724:	67 e0       	ldi	r22, 0x07	; 7
    1726:	40 e0       	ldi	r20, 0x00	; 0
    1728:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
}
    172c:	2f 96       	adiw	r28, 0x0f	; 15
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	de bf       	out	0x3e, r29	; 62
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	cd bf       	out	0x3d, r28	; 61
    1738:	cf 91       	pop	r28
    173a:	df 91       	pop	r29
    173c:	08 95       	ret

0000173e <LCD_voidSendCommand>:

static void LCD_voidSendCommand(u8 Copy_u8Command)
{
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	2f 97       	sbiw	r28, 0x0f	; 15
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
    1752:	8f 87       	std	Y+15, r24	; 0x0f
    // Clear The RS Pin To Send The Command ( RS -> 0: Command, 1: Data)
    DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, LOW);
    1754:	82 e0       	ldi	r24, 0x02	; 2
    1756:	65 e0       	ldi	r22, 0x05	; 5
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
    // Clear The RW Pin To Write The Command (R/W -> 0: Write, 1: Read)
    DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
    175e:	82 e0       	ldi	r24, 0x02	; 2
    1760:	66 e0       	ldi	r22, 0x06	; 6
    1762:	40 e0       	ldi	r20, 0x00	; 0
    1764:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
    // Set The Command On The Data/Command Port
    DIO_voidSetPortSpecificValue(LCD_DATA_PORT, Copy_u8Command);
    1768:	83 e0       	ldi	r24, 0x03	; 3
    176a:	6f 85       	ldd	r22, Y+15	; 0x0f
    176c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_voidSetPortSpecificValue>

    /*Send Enable Pulse*/
    /*Low*/
    DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
    1770:	82 e0       	ldi	r24, 0x02	; 2
    1772:	67 e0       	ldi	r22, 0x07	; 7
    1774:	40 e0       	ldi	r20, 0x00	; 0
    1776:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
    /*High For 2msec*/
    DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
    177a:	82 e0       	ldi	r24, 0x02	; 2
    177c:	67 e0       	ldi	r22, 0x07	; 7
    177e:	41 e0       	ldi	r20, 0x01	; 1
    1780:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	a0 e0       	ldi	r26, 0x00	; 0
    178a:	b0 e4       	ldi	r27, 0x40	; 64
    178c:	8b 87       	std	Y+11, r24	; 0x0b
    178e:	9c 87       	std	Y+12, r25	; 0x0c
    1790:	ad 87       	std	Y+13, r26	; 0x0d
    1792:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1794:	6b 85       	ldd	r22, Y+11	; 0x0b
    1796:	7c 85       	ldd	r23, Y+12	; 0x0c
    1798:	8d 85       	ldd	r24, Y+13	; 0x0d
    179a:	9e 85       	ldd	r25, Y+14	; 0x0e
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	4a ef       	ldi	r20, 0xFA	; 250
    17a2:	54 e4       	ldi	r21, 0x44	; 68
    17a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	8f 83       	std	Y+7, r24	; 0x07
    17ae:	98 87       	std	Y+8, r25	; 0x08
    17b0:	a9 87       	std	Y+9, r26	; 0x09
    17b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17b4:	6f 81       	ldd	r22, Y+7	; 0x07
    17b6:	78 85       	ldd	r23, Y+8	; 0x08
    17b8:	89 85       	ldd	r24, Y+9	; 0x09
    17ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e8       	ldi	r20, 0x80	; 128
    17c2:	5f e3       	ldi	r21, 0x3F	; 63
    17c4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17c8:	88 23       	and	r24, r24
    17ca:	2c f4       	brge	.+10     	; 0x17d6 <LCD_voidSendCommand+0x98>
		__ticks = 1;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	9e 83       	std	Y+6, r25	; 0x06
    17d2:	8d 83       	std	Y+5, r24	; 0x05
    17d4:	3f c0       	rjmp	.+126    	; 0x1854 <LCD_voidSendCommand+0x116>
	else if (__tmp > 65535)
    17d6:	6f 81       	ldd	r22, Y+7	; 0x07
    17d8:	78 85       	ldd	r23, Y+8	; 0x08
    17da:	89 85       	ldd	r24, Y+9	; 0x09
    17dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	3f ef       	ldi	r19, 0xFF	; 255
    17e2:	4f e7       	ldi	r20, 0x7F	; 127
    17e4:	57 e4       	ldi	r21, 0x47	; 71
    17e6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17ea:	18 16       	cp	r1, r24
    17ec:	4c f5       	brge	.+82     	; 0x1840 <LCD_voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e2       	ldi	r20, 0x20	; 32
    17fc:	51 e4       	ldi	r21, 0x41	; 65
    17fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	bc 01       	movw	r22, r24
    1808:	cd 01       	movw	r24, r26
    180a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	9e 83       	std	Y+6, r25	; 0x06
    1814:	8d 83       	std	Y+5, r24	; 0x05
    1816:	0f c0       	rjmp	.+30     	; 0x1836 <LCD_voidSendCommand+0xf8>
    1818:	88 ec       	ldi	r24, 0xC8	; 200
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	9c 83       	std	Y+4, r25	; 0x04
    181e:	8b 83       	std	Y+3, r24	; 0x03
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	9c 81       	ldd	r25, Y+4	; 0x04
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	f1 f7       	brne	.-4      	; 0x1824 <LCD_voidSendCommand+0xe6>
    1828:	9c 83       	std	Y+4, r25	; 0x04
    182a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	9e 81       	ldd	r25, Y+6	; 0x06
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	9e 83       	std	Y+6, r25	; 0x06
    1834:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	9e 81       	ldd	r25, Y+6	; 0x06
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	69 f7       	brne	.-38     	; 0x1818 <LCD_voidSendCommand+0xda>
    183e:	14 c0       	rjmp	.+40     	; 0x1868 <LCD_voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1840:	6f 81       	ldd	r22, Y+7	; 0x07
    1842:	78 85       	ldd	r23, Y+8	; 0x08
    1844:	89 85       	ldd	r24, Y+9	; 0x09
    1846:	9a 85       	ldd	r25, Y+10	; 0x0a
    1848:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	9e 83       	std	Y+6, r25	; 0x06
    1852:	8d 83       	std	Y+5, r24	; 0x05
    1854:	8d 81       	ldd	r24, Y+5	; 0x05
    1856:	9e 81       	ldd	r25, Y+6	; 0x06
    1858:	9a 83       	std	Y+2, r25	; 0x02
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	9a 81       	ldd	r25, Y+2	; 0x02
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	f1 f7       	brne	.-4      	; 0x1860 <LCD_voidSendCommand+0x122>
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    /*Low*/
    DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
    1868:	82 e0       	ldi	r24, 0x02	; 2
    186a:	67 e0       	ldi	r22, 0x07	; 7
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>

}
    1872:	2f 96       	adiw	r28, 0x0f	; 15
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(void)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    LCD_voidSendCommand(DISPLAY_CLEAR_CMD);
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	0e 94 9f 0b 	call	0x173e	; 0x173e <LCD_voidSendCommand>
}
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	00 d0       	rcall	.+0      	; 0x189e <LCD_voidGoToXY+0x6>
    189e:	0f 92       	push	r0
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	8a 83       	std	Y+2, r24	; 0x02
    18a6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8CharacterAddress = 0;
    18a8:	19 82       	std	Y+1, r1	; 0x01
    /*Calculate The Address Of The Character On LCD*/
    if(Copy_u8XPos == 0)
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	88 23       	and	r24, r24
    18ae:	19 f4       	brne	.+6      	; 0x18b6 <LCD_voidGoToXY+0x1e>
    {
        // @ x = 0 -> Address = Y-Position
        Local_u8CharacterAddress = Copy_u8YPos;
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	06 c0       	rjmp	.+12     	; 0x18c2 <LCD_voidGoToXY+0x2a>
    }
    else if (Copy_u8XPos == 1)
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	81 30       	cpi	r24, 0x01	; 1
    18ba:	19 f4       	brne	.+6      	; 0x18c2 <LCD_voidGoToXY+0x2a>
    {
        // @ x = 1 -> Address = Y-Position + 0x40
        Local_u8CharacterAddress = Copy_u8YPos + 0x40;
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	80 5c       	subi	r24, 0xC0	; 192
    18c0:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        // Raise an error 
    }
    /*Set The 7th bit in the address variable*/
    SET_BIT(Local_u8CharacterAddress, 7);
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	80 68       	ori	r24, 0x80	; 128
    18c6:	89 83       	std	Y+1, r24	; 0x01
    /*Send the address variable as a command*/
    LCD_voidSendCommand(Local_u8CharacterAddress);  
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	0e 94 9f 0b 	call	0x173e	; 0x173e <LCD_voidSendCommand>
}
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <LCD_voidSendString>:

void LCD_voidSendString(u8 * Copy_pu8StringArray)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <LCD_voidSendString+0x6>
    18e0:	0f 92       	push	r0
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	9b 83       	std	Y+3, r25	; 0x03
    18e8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8LoopCounter = 0 ;
    18ea:	19 82       	std	Y+1, r1	; 0x01
    18ec:	0e c0       	rjmp	.+28     	; 0x190a <LCD_voidSendString+0x30>
    /*Loop On The String till the null terminator*/
    while(Copy_pu8StringArray[Local_u8LoopCounter] != '\0')
    {
        /*Send The Array Element*/
        LCD_voidSendData(Copy_pu8StringArray[Local_u8LoopCounter]);
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	9b 81       	ldd	r25, Y+3	; 0x03
    18f8:	fc 01       	movw	r30, r24
    18fa:	e2 0f       	add	r30, r18
    18fc:	f3 1f       	adc	r31, r19
    18fe:	80 81       	ld	r24, Z
    1900:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_voidSendData>
        Local_u8LoopCounter++;
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	8f 5f       	subi	r24, 0xFF	; 255
    1908:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidSendString(u8 * Copy_pu8StringArray)
{
    u8 Local_u8LoopCounter = 0 ;
    /*Loop On The String till the null terminator*/
    while(Copy_pu8StringArray[Local_u8LoopCounter] != '\0')
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	9b 81       	ldd	r25, Y+3	; 0x03
    1914:	fc 01       	movw	r30, r24
    1916:	e2 0f       	add	r30, r18
    1918:	f3 1f       	adc	r31, r19
    191a:	80 81       	ld	r24, Z
    191c:	88 23       	and	r24, r24
    191e:	39 f7       	brne	.-50     	; 0x18ee <LCD_voidSendString+0x14>
    {
        /*Send The Array Element*/
        LCD_voidSendData(Copy_pu8StringArray[Local_u8LoopCounter]);
        Local_u8LoopCounter++;
    }
}
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	2d 97       	sbiw	r28, 0x0d	; 13
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
    1940:	9d 87       	std	Y+13, r25	; 0x0d
    1942:	8c 87       	std	Y+12, r24	; 0x0c
    u8 Local_u8ArrayNumber[10];
    s8 Local_s8LoopCounter = 0;
    1944:	19 82       	std	Y+1, r1	; 0x01
    1946:	1f c0       	rjmp	.+62     	; 0x1986 <LCD_voidSendNumber+0x5a>
    while(Copy_u32Number != 0)
    {
        Local_u8ArrayNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	e8 2f       	mov	r30, r24
    194c:	ff 27       	eor	r31, r31
    194e:	e7 fd       	sbrc	r30, 7
    1950:	f0 95       	com	r31
    1952:	8c 85       	ldd	r24, Y+12	; 0x0c
    1954:	9d 85       	ldd	r25, Y+13	; 0x0d
    1956:	2a e0       	ldi	r18, 0x0A	; 10
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	b9 01       	movw	r22, r18
    195c:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__udivmodhi4>
    1960:	28 2f       	mov	r18, r24
    1962:	ce 01       	movw	r24, r28
    1964:	02 96       	adiw	r24, 0x02	; 2
    1966:	e8 0f       	add	r30, r24
    1968:	f9 1f       	adc	r31, r25
    196a:	20 83       	st	Z, r18
        Copy_u32Number /= 10;
    196c:	8c 85       	ldd	r24, Y+12	; 0x0c
    196e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1970:	2a e0       	ldi	r18, 0x0A	; 10
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	b9 01       	movw	r22, r18
    1976:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__udivmodhi4>
    197a:	cb 01       	movw	r24, r22
    197c:	9d 87       	std	Y+13, r25	; 0x0d
    197e:	8c 87       	std	Y+12, r24	; 0x0c
        Local_s8LoopCounter++;
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	8f 5f       	subi	r24, 0xFF	; 255
    1984:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidSendNumber(u32 Copy_u32Number)
{
    u8 Local_u8ArrayNumber[10];
    s8 Local_s8LoopCounter = 0;
    while(Copy_u32Number != 0)
    1986:	8c 85       	ldd	r24, Y+12	; 0x0c
    1988:	9d 85       	ldd	r25, Y+13	; 0x0d
    198a:	00 97       	sbiw	r24, 0x00	; 0
    198c:	e9 f6       	brne	.-70     	; 0x1948 <LCD_voidSendNumber+0x1c>
    {
        Local_u8ArrayNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
        Copy_u32Number /= 10;
        Local_s8LoopCounter++;
    }
    Local_s8LoopCounter--;
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	81 50       	subi	r24, 0x01	; 1
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	11 c0       	rjmp	.+34     	; 0x19b8 <LCD_voidSendNumber+0x8c>
    while(Local_s8LoopCounter >= 0)
    {
        LCD_voidSendData(Local_u8ArrayNumber[Local_s8LoopCounter] + '0');
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	28 2f       	mov	r18, r24
    199a:	33 27       	eor	r19, r19
    199c:	27 fd       	sbrc	r18, 7
    199e:	30 95       	com	r19
    19a0:	ce 01       	movw	r24, r28
    19a2:	02 96       	adiw	r24, 0x02	; 2
    19a4:	fc 01       	movw	r30, r24
    19a6:	e2 0f       	add	r30, r18
    19a8:	f3 1f       	adc	r31, r19
    19aa:	80 81       	ld	r24, Z
    19ac:	80 5d       	subi	r24, 0xD0	; 208
    19ae:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_voidSendData>
        Local_s8LoopCounter--;
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	81 50       	subi	r24, 0x01	; 1
    19b6:	89 83       	std	Y+1, r24	; 0x01
        Local_u8ArrayNumber[Local_s8LoopCounter] = Copy_u32Number % 10;
        Copy_u32Number /= 10;
        Local_s8LoopCounter++;
    }
    Local_s8LoopCounter--;
    while(Local_s8LoopCounter >= 0)
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	88 23       	and	r24, r24
    19bc:	64 f7       	brge	.-40     	; 0x1996 <LCD_voidSendNumber+0x6a>
    {
        LCD_voidSendData(Local_u8ArrayNumber[Local_s8LoopCounter] + '0');
        Local_s8LoopCounter--;
    }
}
    19be:	2d 96       	adiw	r28, 0x0d	; 13
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <LCD_voidSendCustomCharacter>:

void LCD_voidSendCustomCharacter(u8 * Copy_pu8CharacterArray,
                                 u8 Copy_u8PatternNumber,
                                 u8 Copy_u8XPosition,
                                 u8 Copy_u8YPosition)
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	27 97       	sbiw	r28, 0x07	; 7
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	9c 83       	std	Y+4, r25	; 0x04
    19e6:	8b 83       	std	Y+3, r24	; 0x03
    19e8:	6d 83       	std	Y+5, r22	; 0x05
    19ea:	4e 83       	std	Y+6, r20	; 0x06
    19ec:	2f 83       	std	Y+7, r18	; 0x07
    u8 Local_u8LoopCounter;
    u8 Local_u8CGRAMAddress = 0;
    19ee:	19 82       	std	Y+1, r1	; 0x01
    /*Calculate the CGRAM Address = Pattern Number * 8*/
    Local_u8CGRAMAddress = Copy_u8PatternNumber * 8;
    19f0:	8d 81       	ldd	r24, Y+5	; 0x05
    19f2:	88 2f       	mov	r24, r24
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	89 83       	std	Y+1, r24	; 0x01
    /*Set The 6th bit in the CGRAM Address Command*/
    SET_BIT(Local_u8CGRAMAddress, 6);
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	80 64       	ori	r24, 0x40	; 64
    1a08:	89 83       	std	Y+1, r24	; 0x01
    /*Send The CGRAM Address Command To The LCD*/
    LCD_voidSendCommand(Local_u8CGRAMAddress);
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	0e 94 9f 0b 	call	0x173e	; 0x173e <LCD_voidSendCommand>
    for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    1a10:	1a 82       	std	Y+2, r1	; 0x02
    1a12:	0e c0       	rjmp	.+28     	; 0x1a30 <LCD_voidSendCustomCharacter+0x60>
    {
        /*Send Byte From The Character Array*/
        LCD_voidSendData(Copy_pu8CharacterArray[Local_u8LoopCounter]);
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	fc 01       	movw	r30, r24
    1a20:	e2 0f       	add	r30, r18
    1a22:	f3 1f       	adc	r31, r19
    1a24:	80 81       	ld	r24, Z
    1a26:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_voidSendData>
    Local_u8CGRAMAddress = Copy_u8PatternNumber * 8;
    /*Set The 6th bit in the CGRAM Address Command*/
    SET_BIT(Local_u8CGRAMAddress, 6);
    /*Send The CGRAM Address Command To The LCD*/
    LCD_voidSendCommand(Local_u8CGRAMAddress);
    for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	8f 5f       	subi	r24, 0xFF	; 255
    1a2e:	8a 83       	std	Y+2, r24	; 0x02
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	88 30       	cpi	r24, 0x08	; 8
    1a34:	78 f3       	brcs	.-34     	; 0x1a14 <LCD_voidSendCustomCharacter+0x44>
    {
        /*Send Byte From The Character Array*/
        LCD_voidSendData(Copy_pu8CharacterArray[Local_u8LoopCounter]);
    }
    /*Send The Command to Set The DDRAM Address*/
    LCD_voidGoToXY(Copy_u8XPosition, Copy_u8YPosition);
    1a36:	8e 81       	ldd	r24, Y+6	; 0x06
    1a38:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_voidGoToXY>
    /*Display The Pattern From CGRAM*/
    LCD_voidSendData(Copy_u8PatternNumber);
    1a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a40:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_voidSendData>
}
    1a44:	27 96       	adiw	r28, 0x07	; 7
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <KPD_voidInit>:




void KPD_voidInit(void)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    /* Set Rows Pins To Be Input PulledUp*/
    DIO_voidSetPinDirection(KPD_ROWS_PORT, KPD_ROW0_PIN, INPUT);
    1a5e:	83 e0       	ldi	r24, 0x03	; 3
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	40 e0       	ldi	r20, 0x00	; 0
    1a64:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT, KPD_ROW1_PIN, INPUT);
    1a68:	83 e0       	ldi	r24, 0x03	; 3
    1a6a:	61 e0       	ldi	r22, 0x01	; 1
    1a6c:	40 e0       	ldi	r20, 0x00	; 0
    1a6e:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT, KPD_ROW2_PIN, INPUT);
    1a72:	83 e0       	ldi	r24, 0x03	; 3
    1a74:	62 e0       	ldi	r22, 0x02	; 2
    1a76:	40 e0       	ldi	r20, 0x00	; 0
    1a78:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_ROWS_PORT, KPD_ROW3_PIN, INPUT);
    1a7c:	83 e0       	ldi	r24, 0x03	; 3
    1a7e:	63 e0       	ldi	r22, 0x03	; 3
    1a80:	40 e0       	ldi	r20, 0x00	; 0
    1a82:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_voidSetPinDirection>
    
    DIO_voidSetPinValue(KPD_ROWS_PORT, KPD_ROW0_PIN, PULLUP);
    1a86:	83 e0       	ldi	r24, 0x03	; 3
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KPD_ROWS_PORT, KPD_ROW1_PIN, PULLUP);
    1a90:	83 e0       	ldi	r24, 0x03	; 3
    1a92:	61 e0       	ldi	r22, 0x01	; 1
    1a94:	41 e0       	ldi	r20, 0x01	; 1
    1a96:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KPD_ROWS_PORT, KPD_ROW2_PIN, PULLUP);
    1a9a:	83 e0       	ldi	r24, 0x03	; 3
    1a9c:	62 e0       	ldi	r22, 0x02	; 2
    1a9e:	41 e0       	ldi	r20, 0x01	; 1
    1aa0:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KPD_ROWS_PORT, KPD_ROW3_PIN, PULLUP);
    1aa4:	83 e0       	ldi	r24, 0x03	; 3
    1aa6:	63 e0       	ldi	r22, 0x03	; 3
    1aa8:	41 e0       	ldi	r20, 0x01	; 1
    1aaa:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>

    /* Set Columns Pins To Be Output High*/
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN0_PIN, OUTPUT);
    1aae:	83 e0       	ldi	r24, 0x03	; 3
    1ab0:	64 e0       	ldi	r22, 0x04	; 4
    1ab2:	41 e0       	ldi	r20, 0x01	; 1
    1ab4:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN1_PIN, OUTPUT);
    1ab8:	83 e0       	ldi	r24, 0x03	; 3
    1aba:	65 e0       	ldi	r22, 0x05	; 5
    1abc:	41 e0       	ldi	r20, 0x01	; 1
    1abe:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN2_PIN, OUTPUT);
    1ac2:	83 e0       	ldi	r24, 0x03	; 3
    1ac4:	66 e0       	ldi	r22, 0x06	; 6
    1ac6:	41 e0       	ldi	r20, 0x01	; 1
    1ac8:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN3_PIN, OUTPUT);
    1acc:	83 e0       	ldi	r24, 0x03	; 3
    1ace:	67 e0       	ldi	r22, 0x07	; 7
    1ad0:	41 e0       	ldi	r20, 0x01	; 1
    1ad2:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_voidSetPinDirection>

    DIO_voidSetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN0_PIN, HIGH);
    1ad6:	83 e0       	ldi	r24, 0x03	; 3
    1ad8:	64 e0       	ldi	r22, 0x04	; 4
    1ada:	41 e0       	ldi	r20, 0x01	; 1
    1adc:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN1_PIN, HIGH);
    1ae0:	83 e0       	ldi	r24, 0x03	; 3
    1ae2:	65 e0       	ldi	r22, 0x05	; 5
    1ae4:	41 e0       	ldi	r20, 0x01	; 1
    1ae6:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN2_PIN, HIGH);
    1aea:	83 e0       	ldi	r24, 0x03	; 3
    1aec:	66 e0       	ldi	r22, 0x06	; 6
    1aee:	41 e0       	ldi	r20, 0x01	; 1
    1af0:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN3_PIN, HIGH);
    1af4:	83 e0       	ldi	r24, 0x03	; 3
    1af6:	67 e0       	ldi	r22, 0x07	; 7
    1af8:	41 e0       	ldi	r20, 0x01	; 1
    1afa:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
}
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <KPD_u8GetPressedKey>:


u8 KPD_u8GetPressedKey(void)
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	00 d0       	rcall	.+0      	; 0x1b0a <KPD_u8GetPressedKey+0x6>
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <KPD_u8GetPressedKey+0x8>
    1b0c:	0f 92       	push	r0
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    static u8 Local_u8KPDColumnsArray[KPD_COULMNS_NUM] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN};
    static u8 Local_u8KPDRowsArray[KPD_ROWS_NUM] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    u8 Local_u8RowValue;
    u8 Local_u8ColumnsIterator;
    u8 Local_u8RowsIterator;
    u8 Local_u8PressedKey = KPD_NOT_PRESSED_VAL;
    1b12:	8f ef       	ldi	r24, 0xFF	; 255
    1b14:	89 83       	std	Y+1, r24	; 0x01
    for(Local_u8ColumnsIterator = 0; Local_u8ColumnsIterator < KPD_COULMNS_NUM; Local_u8ColumnsIterator++)
    1b16:	1b 82       	std	Y+3, r1	; 0x03
    1b18:	57 c0       	rjmp	.+174    	; 0x1bc8 <KPD_u8GetPressedKey+0xc4>
    {
        /*Activate A Column , Activate (Ground)*/
        DIO_voidSetPinValue(KPD_COLUMNS_PORT, Local_u8KPDColumnsArray[Local_u8ColumnsIterator], LOW);
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	88 2f       	mov	r24, r24
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	fc 01       	movw	r30, r24
    1b22:	e4 59       	subi	r30, 0x94	; 148
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	90 81       	ld	r25, Z
    1b28:	83 e0       	ldi	r24, 0x03	; 3
    1b2a:	69 2f       	mov	r22, r25
    1b2c:	40 e0       	ldi	r20, 0x00	; 0
    1b2e:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
        /*Iterate On The KPD Rows */
        for(Local_u8RowsIterator = 0; Local_u8RowsIterator < KPD_ROWS_NUM; Local_u8RowsIterator++)
    1b32:	1a 82       	std	Y+2, r1	; 0x02
    1b34:	37 c0       	rjmp	.+110    	; 0x1ba4 <KPD_u8GetPressedKey+0xa0>
        {
            /*Get The Row Value*/
            Local_u8RowValue = DIO_u8GetPinValue(KPD_ROWS_PORT, Local_u8KPDRowsArray[Local_u8RowsIterator]);
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	88 2f       	mov	r24, r24
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	e8 59       	subi	r30, 0x98	; 152
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	90 81       	ld	r25, Z
    1b44:	83 e0       	ldi	r24, 0x03	; 3
    1b46:	69 2f       	mov	r22, r25
    1b48:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_u8GetPinValue>
    1b4c:	8c 83       	std	Y+4, r24	; 0x04
            if(Local_u8RowValue == LOW)
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	88 23       	and	r24, r24
    1b52:	29 f5       	brne	.+74     	; 0x1b9e <KPD_u8GetPressedKey+0x9a>
            {
                /*Get The Pressed Key*/
                Local_u8PressedKey = Local_u8KPDArray[Local_u8RowsIterator][Local_u8ColumnsIterator];
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	48 2f       	mov	r20, r24
    1b58:	50 e0       	ldi	r21, 0x00	; 0
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	ca 01       	movw	r24, r20
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	82 0f       	add	r24, r18
    1b6c:	93 1f       	adc	r25, r19
    1b6e:	fc 01       	movw	r30, r24
    1b70:	e0 59       	subi	r30, 0x90	; 144
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	80 81       	ld	r24, Z
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	0c c0       	rjmp	.+24     	; 0x1b92 <KPD_u8GetPressedKey+0x8e>
                /*Polling (busy wait) till the key is released*/
                while(Local_u8RowValue == LOW)
                {
                    Local_u8RowValue = DIO_u8GetPinValue(KPD_ROWS_PORT, Local_u8KPDRowsArray[Local_u8RowsIterator]);
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	88 2f       	mov	r24, r24
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	fc 01       	movw	r30, r24
    1b82:	e8 59       	subi	r30, 0x98	; 152
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	90 81       	ld	r25, Z
    1b88:	83 e0       	ldi	r24, 0x03	; 3
    1b8a:	69 2f       	mov	r22, r25
    1b8c:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_u8GetPinValue>
    1b90:	8c 83       	std	Y+4, r24	; 0x04
            if(Local_u8RowValue == LOW)
            {
                /*Get The Pressed Key*/
                Local_u8PressedKey = Local_u8KPDArray[Local_u8RowsIterator][Local_u8ColumnsIterator];
                /*Polling (busy wait) till the key is released*/
                while(Local_u8RowValue == LOW)
    1b92:	8c 81       	ldd	r24, Y+4	; 0x04
    1b94:	88 23       	and	r24, r24
    1b96:	89 f3       	breq	.-30     	; 0x1b7a <KPD_u8GetPressedKey+0x76>
                {
                    Local_u8RowValue = DIO_u8GetPinValue(KPD_ROWS_PORT, Local_u8KPDRowsArray[Local_u8RowsIterator]);
                }
                /*Return The Pressed Key*/
                return Local_u8PressedKey;
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	8d 83       	std	Y+5, r24	; 0x05
    1b9c:	1b c0       	rjmp	.+54     	; 0x1bd4 <KPD_u8GetPressedKey+0xd0>
    for(Local_u8ColumnsIterator = 0; Local_u8ColumnsIterator < KPD_COULMNS_NUM; Local_u8ColumnsIterator++)
    {
        /*Activate A Column , Activate (Ground)*/
        DIO_voidSetPinValue(KPD_COLUMNS_PORT, Local_u8KPDColumnsArray[Local_u8ColumnsIterator], LOW);
        /*Iterate On The KPD Rows */
        for(Local_u8RowsIterator = 0; Local_u8RowsIterator < KPD_ROWS_NUM; Local_u8RowsIterator++)
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	8f 5f       	subi	r24, 0xFF	; 255
    1ba2:	8a 83       	std	Y+2, r24	; 0x02
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	84 30       	cpi	r24, 0x04	; 4
    1ba8:	30 f2       	brcs	.-116    	; 0x1b36 <KPD_u8GetPressedKey+0x32>
                /*Return The Pressed Key*/
                return Local_u8PressedKey;
            }
        }
        /*Deactivate A Column , Deactivate (VCC)*/
        DIO_voidSetPinValue(KPD_COLUMNS_PORT, Local_u8KPDColumnsArray[Local_u8ColumnsIterator], HIGH);
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	88 2f       	mov	r24, r24
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	e4 59       	subi	r30, 0x94	; 148
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	90 81       	ld	r25, Z
    1bb8:	83 e0       	ldi	r24, 0x03	; 3
    1bba:	69 2f       	mov	r22, r25
    1bbc:	41 e0       	ldi	r20, 0x01	; 1
    1bbe:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
    static u8 Local_u8KPDRowsArray[KPD_ROWS_NUM] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    u8 Local_u8RowValue;
    u8 Local_u8ColumnsIterator;
    u8 Local_u8RowsIterator;
    u8 Local_u8PressedKey = KPD_NOT_PRESSED_VAL;
    for(Local_u8ColumnsIterator = 0; Local_u8ColumnsIterator < KPD_COULMNS_NUM; Local_u8ColumnsIterator++)
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	8f 5f       	subi	r24, 0xFF	; 255
    1bc6:	8b 83       	std	Y+3, r24	; 0x03
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	84 30       	cpi	r24, 0x04	; 4
    1bcc:	08 f4       	brcc	.+2      	; 0x1bd0 <KPD_u8GetPressedKey+0xcc>
    1bce:	a5 cf       	rjmp	.-182    	; 0x1b1a <KPD_u8GetPressedKey+0x16>
        }
        /*Deactivate A Column , Deactivate (VCC)*/
        DIO_voidSetPinValue(KPD_COLUMNS_PORT, Local_u8KPDColumnsArray[Local_u8ColumnsIterator], HIGH);
    }
    /*Return The Default Value*/
    return Local_u8PressedKey;
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	8d 83       	std	Y+5, r24	; 0x05
    1bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <EEPROM_voidSendDataByte>:
#include "EEPROM_Interface.h"


/* A function to write a byte on the EEPROM */
void EEPROM_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	62 97       	sbiw	r28, 0x12	; 18
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
    1bfa:	99 8b       	std	Y+17, r25	; 0x11
    1bfc:	88 8b       	std	Y+16, r24	; 0x10
    1bfe:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_u8AddressPacket;

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
    1c00:	88 89       	ldd	r24, Y+16	; 0x10
    1c02:	99 89       	ldd	r25, Y+17	; 0x11
    1c04:	89 2f       	mov	r24, r25
    1c06:	99 27       	eor	r25, r25
    1c08:	80 65       	ori	r24, 0x50	; 80
    1c0a:	8f 87       	std	Y+15, r24	; 0x0f

	/*Send start condition*/
	TWI_SendStartCondition();
    1c0c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <TWI_SendStartCondition>

	/*Send the address packet*/
	TWI_SendSlaveAddressWithWrite(Local_u8AddressPacket);
    1c10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c12:	0e 94 30 06 	call	0xc60	; 0xc60 <TWI_SendSlaveAddressWithWrite>

	/*Send the rest 8bits of the location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
    1c16:	88 89       	ldd	r24, Y+16	; 0x10
    1c18:	0e 94 a0 06 	call	0xd40	; 0xd40 <TWI_MasterWriteDataByte>

	/*Send the data byte to the memory location*/
	TWI_MasterWriteDataByte(Copy_u8DataByte);
    1c1c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c1e:	0e 94 a0 06 	call	0xd40	; 0xd40 <TWI_MasterWriteDataByte>

	/*Send stop condition*/
	TWI_SendStopCondition();
    1c22:	0e 94 ff 06 	call	0xdfe	; 0xdfe <TWI_SendStopCondition>
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	a0 e2       	ldi	r26, 0x20	; 32
    1c2c:	b1 e4       	ldi	r27, 0x41	; 65
    1c2e:	8b 87       	std	Y+11, r24	; 0x0b
    1c30:	9c 87       	std	Y+12, r25	; 0x0c
    1c32:	ad 87       	std	Y+13, r26	; 0x0d
    1c34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	4a ef       	ldi	r20, 0xFA	; 250
    1c44:	54 e4       	ldi	r21, 0x44	; 68
    1c46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	8f 83       	std	Y+7, r24	; 0x07
    1c50:	98 87       	std	Y+8, r25	; 0x08
    1c52:	a9 87       	std	Y+9, r26	; 0x09
    1c54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c56:	6f 81       	ldd	r22, Y+7	; 0x07
    1c58:	78 85       	ldd	r23, Y+8	; 0x08
    1c5a:	89 85       	ldd	r24, Y+9	; 0x09
    1c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e8       	ldi	r20, 0x80	; 128
    1c64:	5f e3       	ldi	r21, 0x3F	; 63
    1c66:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c6a:	88 23       	and	r24, r24
    1c6c:	2c f4       	brge	.+10     	; 0x1c78 <EEPROM_voidSendDataByte+0x92>
		__ticks = 1;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	9e 83       	std	Y+6, r25	; 0x06
    1c74:	8d 83       	std	Y+5, r24	; 0x05
    1c76:	3f c0       	rjmp	.+126    	; 0x1cf6 <EEPROM_voidSendDataByte+0x110>
	else if (__tmp > 65535)
    1c78:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7a:	78 85       	ldd	r23, Y+8	; 0x08
    1c7c:	89 85       	ldd	r24, Y+9	; 0x09
    1c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	3f ef       	ldi	r19, 0xFF	; 255
    1c84:	4f e7       	ldi	r20, 0x7F	; 127
    1c86:	57 e4       	ldi	r21, 0x47	; 71
    1c88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c8c:	18 16       	cp	r1, r24
    1c8e:	4c f5       	brge	.+82     	; 0x1ce2 <EEPROM_voidSendDataByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e2       	ldi	r20, 0x20	; 32
    1c9e:	51 e4       	ldi	r21, 0x41	; 65
    1ca0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	bc 01       	movw	r22, r24
    1caa:	cd 01       	movw	r24, r26
    1cac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	9e 83       	std	Y+6, r25	; 0x06
    1cb6:	8d 83       	std	Y+5, r24	; 0x05
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <EEPROM_voidSendDataByte+0xf2>
    1cba:	88 ec       	ldi	r24, 0xC8	; 200
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	9c 83       	std	Y+4, r25	; 0x04
    1cc0:	8b 83       	std	Y+3, r24	; 0x03
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <EEPROM_voidSendDataByte+0xe0>
    1cca:	9c 83       	std	Y+4, r25	; 0x04
    1ccc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cce:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	9e 83       	std	Y+6, r25	; 0x06
    1cd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cda:	9e 81       	ldd	r25, Y+6	; 0x06
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	69 f7       	brne	.-38     	; 0x1cba <EEPROM_voidSendDataByte+0xd4>
    1ce0:	14 c0       	rjmp	.+40     	; 0x1d0a <EEPROM_voidSendDataByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce4:	78 85       	ldd	r23, Y+8	; 0x08
    1ce6:	89 85       	ldd	r24, Y+9	; 0x09
    1ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9e 83       	std	Y+6, r25	; 0x06
    1cf4:	8d 83       	std	Y+5, r24	; 0x05
    1cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfa:	9a 83       	std	Y+2, r25	; 0x02
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	9a 81       	ldd	r25, Y+2	; 0x02
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <EEPROM_voidSendDataByte+0x11c>
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	89 83       	std	Y+1, r24	; 0x01

	/*Delay until the write cycle is finished*/
	_delay_ms(10);
}
    1d0a:	62 96       	adiw	r28, 0x12	; 18
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <EEPROM_u8ReadDataByte>:

/* A function to read a byte on the EEPROM */
u8 EEPROM_u8ReadDataByte(u16 Copy_u16LocationAddress)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	62 97       	sbiw	r28, 0x12	; 18
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	f8 94       	cli
    1d2a:	de bf       	out	0x3e, r29	; 62
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	cd bf       	out	0x3d, r28	; 61
    1d30:	9a 8b       	std	Y+18, r25	; 0x12
    1d32:	89 8b       	std	Y+17, r24	; 0x11
	u8 Local_u8AddressPacket;
	u8 Local_u8Data = 0;
    1d34:	18 8a       	std	Y+16, r1	; 0x10

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
    1d36:	89 89       	ldd	r24, Y+17	; 0x11
    1d38:	9a 89       	ldd	r25, Y+18	; 0x12
    1d3a:	89 2f       	mov	r24, r25
    1d3c:	99 27       	eor	r25, r25
    1d3e:	80 65       	ori	r24, 0x50	; 80
    1d40:	8f 87       	std	Y+15, r24	; 0x0f

	/*Send start condition*/
	TWI_SendStartCondition();
    1d42:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <TWI_SendStartCondition>

	/*Send the address packet with write request*/
	TWI_SendSlaveAddressWithWrite(Local_u8AddressPacket);
    1d46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d48:	0e 94 30 06 	call	0xc60	; 0xc60 <TWI_SendSlaveAddressWithWrite>

	/*Send the rest 8bits of the location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
    1d4c:	89 89       	ldd	r24, Y+17	; 0x11
    1d4e:	0e 94 a0 06 	call	0xd40	; 0xd40 <TWI_MasterWriteDataByte>

	/*Send repeated start to change write request into read request*/
	TWI_SendRepeatedStart();
    1d52:	0e 94 06 06 	call	0xc0c	; 0xc0c <TWI_SendRepeatedStart>

	/*Send the address packet with read request*/
	TWI_SendSlaveAddressWithRead(Local_u8AddressPacket);
    1d56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d58:	0e 94 68 06 	call	0xcd0	; 0xcd0 <TWI_SendSlaveAddressWithRead>

	/*Get the data from memory*/
	TWI_MasterReadDataByte(&Local_u8Data);
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	40 96       	adiw	r24, 0x10	; 16
    1d60:	0e 94 c9 06 	call	0xd92	; 0xd92 <TWI_MasterReadDataByte>

	/*send the stop condition*/
	TWI_SendStopCondition();
    1d64:	0e 94 ff 06 	call	0xdfe	; 0xdfe <TWI_SendStopCondition>
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a0 e2       	ldi	r26, 0x20	; 32
    1d6e:	b1 e4       	ldi	r27, 0x41	; 65
    1d70:	8b 87       	std	Y+11, r24	; 0x0b
    1d72:	9c 87       	std	Y+12, r25	; 0x0c
    1d74:	ad 87       	std	Y+13, r26	; 0x0d
    1d76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4a ef       	ldi	r20, 0xFA	; 250
    1d86:	54 e4       	ldi	r21, 0x44	; 68
    1d88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	8f 83       	std	Y+7, r24	; 0x07
    1d92:	98 87       	std	Y+8, r25	; 0x08
    1d94:	a9 87       	std	Y+9, r26	; 0x09
    1d96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d98:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9a:	78 85       	ldd	r23, Y+8	; 0x08
    1d9c:	89 85       	ldd	r24, Y+9	; 0x09
    1d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e8       	ldi	r20, 0x80	; 128
    1da6:	5f e3       	ldi	r21, 0x3F	; 63
    1da8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dac:	88 23       	and	r24, r24
    1dae:	2c f4       	brge	.+10     	; 0x1dba <EEPROM_u8ReadDataByte+0x9e>
		__ticks = 1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	8d 83       	std	Y+5, r24	; 0x05
    1db8:	3f c0       	rjmp	.+126    	; 0x1e38 <EEPROM_u8ReadDataByte+0x11c>
	else if (__tmp > 65535)
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	4f e7       	ldi	r20, 0x7F	; 127
    1dc8:	57 e4       	ldi	r21, 0x47	; 71
    1dca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dce:	18 16       	cp	r1, r24
    1dd0:	4c f5       	brge	.+82     	; 0x1e24 <EEPROM_u8ReadDataByte+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e2       	ldi	r20, 0x20	; 32
    1de0:	51 e4       	ldi	r21, 0x41	; 65
    1de2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	9e 83       	std	Y+6, r25	; 0x06
    1df8:	8d 83       	std	Y+5, r24	; 0x05
    1dfa:	0f c0       	rjmp	.+30     	; 0x1e1a <EEPROM_u8ReadDataByte+0xfe>
    1dfc:	88 ec       	ldi	r24, 0xC8	; 200
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9c 83       	std	Y+4, r25	; 0x04
    1e02:	8b 83       	std	Y+3, r24	; 0x03
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <EEPROM_u8ReadDataByte+0xec>
    1e0c:	9c 83       	std	Y+4, r25	; 0x04
    1e0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	9e 81       	ldd	r25, Y+6	; 0x06
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	69 f7       	brne	.-38     	; 0x1dfc <EEPROM_u8ReadDataByte+0xe0>
    1e22:	14 c0       	rjmp	.+40     	; 0x1e4c <EEPROM_u8ReadDataByte+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	9e 83       	std	Y+6, r25	; 0x06
    1e36:	8d 83       	std	Y+5, r24	; 0x05
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	9a 81       	ldd	r25, Y+2	; 0x02
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <EEPROM_u8ReadDataByte+0x128>
    1e48:	9a 83       	std	Y+2, r25	; 0x02
    1e4a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10);

	return Local_u8Data;
    1e4c:	88 89       	ldd	r24, Y+16	; 0x10
}
    1e4e:	62 96       	adiw	r28, 0x12	; 18
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	08 95       	ret

00001e60 <main>:

#include <util/delay.h>


int main(void)
{
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	0f 92       	push	r0
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
	/* Declare a variable for EEPROM value */
	u8 Local_u8EEPROMData = 0;
    1e6a:	19 82       	std	Y+1, r1	; 0x01
	/* Initialize TWI as master */
	TWI_voidMasterInit(0);
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	0e 94 9b 05 	call	0xb36	; 0xb36 <TWI_voidMasterInit>
	/* Send byte */
	EEPROM_voidSendDataByte(0,'b');
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	62 e6       	ldi	r22, 0x62	; 98
    1e78:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <EEPROM_voidSendDataByte>
	/* Read byte */
	Local_u8EEPROMData = EEPROM_u8ReadDataByte(0);
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <EEPROM_u8ReadDataByte>
    1e84:	89 83       	std	Y+1, r24	; 0x01

	/*config dio pin0 */
DIO_voidSetPinDirection(DIO_PORTA,PIN0,OUTPUT);
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	60 e0       	ldi	r22, 0x00	; 0
    1e8a:	41 e0       	ldi	r20, 0x01	; 1
    1e8c:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_voidSetPinDirection>


	while(1)
	{
		if (Local_u8EEPROMData == 'b') {
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	82 36       	cpi	r24, 0x62	; 98
    1e94:	e9 f7       	brne	.-6      	; 0x1e90 <main+0x30>
					DIO_voidSetPinValue(DIO_PORTA,PIN0,HIGH);
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	60 e0       	ldi	r22, 0x00	; 0
    1e9a:	41 e0       	ldi	r20, 0x01	; 1
    1e9c:	0e 94 06 08 	call	0x100c	; 0x100c <DIO_voidSetPinValue>
    1ea0:	f7 cf       	rjmp	.-18     	; 0x1e90 <main+0x30>

00001ea2 <__udivmodhi4>:
    1ea2:	aa 1b       	sub	r26, r26
    1ea4:	bb 1b       	sub	r27, r27
    1ea6:	51 e1       	ldi	r21, 0x11	; 17
    1ea8:	07 c0       	rjmp	.+14     	; 0x1eb8 <__udivmodhi4_ep>

00001eaa <__udivmodhi4_loop>:
    1eaa:	aa 1f       	adc	r26, r26
    1eac:	bb 1f       	adc	r27, r27
    1eae:	a6 17       	cp	r26, r22
    1eb0:	b7 07       	cpc	r27, r23
    1eb2:	10 f0       	brcs	.+4      	; 0x1eb8 <__udivmodhi4_ep>
    1eb4:	a6 1b       	sub	r26, r22
    1eb6:	b7 0b       	sbc	r27, r23

00001eb8 <__udivmodhi4_ep>:
    1eb8:	88 1f       	adc	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	5a 95       	dec	r21
    1ebe:	a9 f7       	brne	.-22     	; 0x1eaa <__udivmodhi4_loop>
    1ec0:	80 95       	com	r24
    1ec2:	90 95       	com	r25
    1ec4:	bc 01       	movw	r22, r24
    1ec6:	cd 01       	movw	r24, r26
    1ec8:	08 95       	ret

00001eca <__prologue_saves__>:
    1eca:	2f 92       	push	r2
    1ecc:	3f 92       	push	r3
    1ece:	4f 92       	push	r4
    1ed0:	5f 92       	push	r5
    1ed2:	6f 92       	push	r6
    1ed4:	7f 92       	push	r7
    1ed6:	8f 92       	push	r8
    1ed8:	9f 92       	push	r9
    1eda:	af 92       	push	r10
    1edc:	bf 92       	push	r11
    1ede:	cf 92       	push	r12
    1ee0:	df 92       	push	r13
    1ee2:	ef 92       	push	r14
    1ee4:	ff 92       	push	r15
    1ee6:	0f 93       	push	r16
    1ee8:	1f 93       	push	r17
    1eea:	cf 93       	push	r28
    1eec:	df 93       	push	r29
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	ca 1b       	sub	r28, r26
    1ef4:	db 0b       	sbc	r29, r27
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	09 94       	ijmp

00001f02 <__epilogue_restores__>:
    1f02:	2a 88       	ldd	r2, Y+18	; 0x12
    1f04:	39 88       	ldd	r3, Y+17	; 0x11
    1f06:	48 88       	ldd	r4, Y+16	; 0x10
    1f08:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f10:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f12:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f14:	b9 84       	ldd	r11, Y+9	; 0x09
    1f16:	c8 84       	ldd	r12, Y+8	; 0x08
    1f18:	df 80       	ldd	r13, Y+7	; 0x07
    1f1a:	ee 80       	ldd	r14, Y+6	; 0x06
    1f1c:	fd 80       	ldd	r15, Y+5	; 0x05
    1f1e:	0c 81       	ldd	r16, Y+4	; 0x04
    1f20:	1b 81       	ldd	r17, Y+3	; 0x03
    1f22:	aa 81       	ldd	r26, Y+2	; 0x02
    1f24:	b9 81       	ldd	r27, Y+1	; 0x01
    1f26:	ce 0f       	add	r28, r30
    1f28:	d1 1d       	adc	r29, r1
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
    1f34:	ed 01       	movw	r28, r26
    1f36:	08 95       	ret

00001f38 <_exit>:
    1f38:	f8 94       	cli

00001f3a <__stop_program>:
    1f3a:	ff cf       	rjmp	.-2      	; 0x1f3a <__stop_program>
