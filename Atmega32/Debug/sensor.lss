
sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e3e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  00003e3e  00003eb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000354c  00000000  00000000  00003ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001342  00000000  00000000  00007548  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  0000888a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000214  00000000  00000000  00008a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002612  00000000  00000000  00008c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ce  00000000  00000000  0000b270  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000130b  00000000  00000000  0000c73e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000da4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000307  00000000  00000000  0000dc2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000df33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000e94d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <main>
      7a:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 f2 1e 	jmp	0x3de4	; 0x3de4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 0e 1f 	jmp	0x3e1c	; 0x3e1c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 f2 1e 	jmp	0x3de4	; 0x3de4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 0e 1f 	jmp	0x3e1c	; 0x3e1c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ee 1e 	jmp	0x3ddc	; 0x3ddc <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 0a 1f 	jmp	0x3e14	; 0x3e14 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 f2 1e 	jmp	0x3de4	; 0x3de4 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 0e 1f 	jmp	0x3e1c	; 0x3e1c <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 f2 1e 	jmp	0x3de4	; 0x3de4 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 0e 1f 	jmp	0x3e1c	; 0x3e1c <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 f2 1e 	jmp	0x3de4	; 0x3de4 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 0e 1f 	jmp	0x3e1c	; 0x3e1c <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 ef 1e 	jmp	0x3dde	; 0x3dde <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 0b 1f 	jmp	0x3e16	; 0x3e16 <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 f6 1e 	jmp	0x3dec	; 0x3dec <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 12 1f 	jmp	0x3e24	; 0x3e24 <__epilogue_restores__+0x20>

000009fe <__floatunsisf>:
     9fe:	a8 e0       	ldi	r26, 0x08	; 8
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	e5 e0       	ldi	r30, 0x05	; 5
     a04:	f5 e0       	ldi	r31, 0x05	; 5
     a06:	0c 94 ee 1e 	jmp	0x3ddc	; 0x3ddc <__prologue_saves__+0x10>
     a0a:	7b 01       	movw	r14, r22
     a0c:	8c 01       	movw	r16, r24
     a0e:	61 15       	cp	r22, r1
     a10:	71 05       	cpc	r23, r1
     a12:	81 05       	cpc	r24, r1
     a14:	91 05       	cpc	r25, r1
     a16:	19 f4       	brne	.+6      	; 0xa1e <__floatunsisf+0x20>
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	60 c0       	rjmp	.+192    	; 0xade <__floatunsisf+0xe0>
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	8e e1       	ldi	r24, 0x1E	; 30
     a24:	c8 2e       	mov	r12, r24
     a26:	d1 2c       	mov	r13, r1
     a28:	dc 82       	std	Y+4, r13	; 0x04
     a2a:	cb 82       	std	Y+3, r12	; 0x03
     a2c:	ed 82       	std	Y+5, r14	; 0x05
     a2e:	fe 82       	std	Y+6, r15	; 0x06
     a30:	0f 83       	std	Y+7, r16	; 0x07
     a32:	18 87       	std	Y+8, r17	; 0x08
     a34:	c8 01       	movw	r24, r16
     a36:	b7 01       	movw	r22, r14
     a38:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     a3c:	fc 01       	movw	r30, r24
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	f7 ff       	sbrs	r31, 7
     a42:	3b c0       	rjmp	.+118    	; 0xaba <__floatunsisf+0xbc>
     a44:	22 27       	eor	r18, r18
     a46:	33 27       	eor	r19, r19
     a48:	2e 1b       	sub	r18, r30
     a4a:	3f 0b       	sbc	r19, r31
     a4c:	57 01       	movw	r10, r14
     a4e:	68 01       	movw	r12, r16
     a50:	02 2e       	mov	r0, r18
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__floatunsisf+0x5e>
     a54:	d6 94       	lsr	r13
     a56:	c7 94       	ror	r12
     a58:	b7 94       	ror	r11
     a5a:	a7 94       	ror	r10
     a5c:	0a 94       	dec	r0
     a5e:	d2 f7       	brpl	.-12     	; 0xa54 <__floatunsisf+0x56>
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0x7c>
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	aa 1f       	adc	r26, r26
     a78:	bb 1f       	adc	r27, r27
     a7a:	2a 95       	dec	r18
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0x74>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	a1 09       	sbc	r26, r1
     a82:	b1 09       	sbc	r27, r1
     a84:	8e 21       	and	r24, r14
     a86:	9f 21       	and	r25, r15
     a88:	a0 23       	and	r26, r16
     a8a:	b1 23       	and	r27, r17
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	a1 05       	cpc	r26, r1
     a90:	b1 05       	cpc	r27, r1
     a92:	21 f0       	breq	.+8      	; 0xa9c <__floatunsisf+0x9e>
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	4a 29       	or	r20, r10
     a9e:	5b 29       	or	r21, r11
     aa0:	6c 29       	or	r22, r12
     aa2:	7d 29       	or	r23, r13
     aa4:	4d 83       	std	Y+5, r20	; 0x05
     aa6:	5e 83       	std	Y+6, r21	; 0x06
     aa8:	6f 83       	std	Y+7, r22	; 0x07
     aaa:	78 87       	std	Y+8, r23	; 0x08
     aac:	8e e1       	ldi	r24, 0x1E	; 30
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	8e 1b       	sub	r24, r30
     ab2:	9f 0b       	sbc	r25, r31
     ab4:	9c 83       	std	Y+4, r25	; 0x04
     ab6:	8b 83       	std	Y+3, r24	; 0x03
     ab8:	12 c0       	rjmp	.+36     	; 0xade <__floatunsisf+0xe0>
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	81 f0       	breq	.+32     	; 0xade <__floatunsisf+0xe0>
     abe:	0e 2e       	mov	r0, r30
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <__floatunsisf+0xcc>
     ac2:	ee 0c       	add	r14, r14
     ac4:	ff 1c       	adc	r15, r15
     ac6:	00 1f       	adc	r16, r16
     ac8:	11 1f       	adc	r17, r17
     aca:	0a 94       	dec	r0
     acc:	d2 f7       	brpl	.-12     	; 0xac2 <__floatunsisf+0xc4>
     ace:	ed 82       	std	Y+5, r14	; 0x05
     ad0:	fe 82       	std	Y+6, r15	; 0x06
     ad2:	0f 83       	std	Y+7, r16	; 0x07
     ad4:	18 87       	std	Y+8, r17	; 0x08
     ad6:	ce 1a       	sub	r12, r30
     ad8:	df 0a       	sbc	r13, r31
     ada:	dc 82       	std	Y+4, r13	; 0x04
     adc:	cb 82       	std	Y+3, r12	; 0x03
     ade:	1a 82       	std	Y+2, r1	; 0x02
     ae0:	ce 01       	movw	r24, r28
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     ae8:	28 96       	adiw	r28, 0x08	; 8
     aea:	ea e0       	ldi	r30, 0x0A	; 10
     aec:	0c 94 0a 1f 	jmp	0x3e14	; 0x3e14 <__epilogue_restores__+0x10>

00000af0 <__clzsi2>:
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	7b 01       	movw	r14, r22
     afa:	8c 01       	movw	r16, r24
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	e8 16       	cp	r14, r24
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	f8 06       	cpc	r15, r24
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	08 07       	cpc	r16, r24
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	18 07       	cpc	r17, r24
     b0c:	88 f4       	brcc	.+34     	; 0xb30 <__clzsi2+0x40>
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	e8 16       	cp	r14, r24
     b12:	f1 04       	cpc	r15, r1
     b14:	01 05       	cpc	r16, r1
     b16:	11 05       	cpc	r17, r1
     b18:	31 f0       	breq	.+12     	; 0xb26 <__clzsi2+0x36>
     b1a:	28 f0       	brcs	.+10     	; 0xb26 <__clzsi2+0x36>
     b1c:	88 e0       	ldi	r24, 0x08	; 8
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	17 c0       	rjmp	.+46     	; 0xb54 <__clzsi2+0x64>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	12 c0       	rjmp	.+36     	; 0xb54 <__clzsi2+0x64>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	e8 16       	cp	r14, r24
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	f8 06       	cpc	r15, r24
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 07       	cpc	r16, r24
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	18 07       	cpc	r17, r24
     b40:	28 f0       	brcs	.+10     	; 0xb4c <__clzsi2+0x5c>
     b42:	88 e1       	ldi	r24, 0x18	; 24
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__clzsi2+0x64>
     b4c:	80 e1       	ldi	r24, 0x10	; 16
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	20 e2       	ldi	r18, 0x20	; 32
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	28 1b       	sub	r18, r24
     b5e:	39 0b       	sbc	r19, r25
     b60:	4a 0b       	sbc	r20, r26
     b62:	5b 0b       	sbc	r21, r27
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__clzsi2+0x7e>
     b66:	16 95       	lsr	r17
     b68:	07 95       	ror	r16
     b6a:	f7 94       	ror	r15
     b6c:	e7 94       	ror	r14
     b6e:	8a 95       	dec	r24
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__clzsi2+0x76>
     b72:	f7 01       	movw	r30, r14
     b74:	e8 59       	subi	r30, 0x98	; 152
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	80 81       	ld	r24, Z
     b7a:	28 1b       	sub	r18, r24
     b7c:	31 09       	sbc	r19, r1
     b7e:	41 09       	sbc	r20, r1
     b80:	51 09       	sbc	r21, r1
     b82:	c9 01       	movw	r24, r18
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <__pack_f>:
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	fc 01       	movw	r30, r24
     b9a:	e4 80       	ldd	r14, Z+4	; 0x04
     b9c:	f5 80       	ldd	r15, Z+5	; 0x05
     b9e:	06 81       	ldd	r16, Z+6	; 0x06
     ba0:	17 81       	ldd	r17, Z+7	; 0x07
     ba2:	d1 80       	ldd	r13, Z+1	; 0x01
     ba4:	80 81       	ld	r24, Z
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	48 f4       	brcc	.+18     	; 0xbbc <__pack_f+0x2e>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a0 e1       	ldi	r26, 0x10	; 16
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e8 2a       	or	r14, r24
     bb4:	f9 2a       	or	r15, r25
     bb6:	0a 2b       	or	r16, r26
     bb8:	1b 2b       	or	r17, r27
     bba:	a5 c0       	rjmp	.+330    	; 0xd06 <__pack_f+0x178>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <__pack_f+0x34>
     bc0:	9f c0       	rjmp	.+318    	; 0xd00 <__pack_f+0x172>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	21 f4       	brne	.+8      	; 0xbce <__pack_f+0x40>
     bc6:	ee 24       	eor	r14, r14
     bc8:	ff 24       	eor	r15, r15
     bca:	87 01       	movw	r16, r14
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <__pack_f+0x4a>
     bce:	e1 14       	cp	r14, r1
     bd0:	f1 04       	cpc	r15, r1
     bd2:	01 05       	cpc	r16, r1
     bd4:	11 05       	cpc	r17, r1
     bd6:	19 f4       	brne	.+6      	; 0xbde <__pack_f+0x50>
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	96 c0       	rjmp	.+300    	; 0xd0a <__pack_f+0x17c>
     bde:	62 81       	ldd	r22, Z+2	; 0x02
     be0:	73 81       	ldd	r23, Z+3	; 0x03
     be2:	9f ef       	ldi	r25, 0xFF	; 255
     be4:	62 38       	cpi	r22, 0x82	; 130
     be6:	79 07       	cpc	r23, r25
     be8:	0c f0       	brlt	.+2      	; 0xbec <__pack_f+0x5e>
     bea:	5b c0       	rjmp	.+182    	; 0xca2 <__pack_f+0x114>
     bec:	22 e8       	ldi	r18, 0x82	; 130
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	26 1b       	sub	r18, r22
     bf2:	37 0b       	sbc	r19, r23
     bf4:	2a 31       	cpi	r18, 0x1A	; 26
     bf6:	31 05       	cpc	r19, r1
     bf8:	2c f0       	brlt	.+10     	; 0xc04 <__pack_f+0x76>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	2a c0       	rjmp	.+84     	; 0xc58 <__pack_f+0xca>
     c04:	b8 01       	movw	r22, r16
     c06:	a7 01       	movw	r20, r14
     c08:	02 2e       	mov	r0, r18
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__pack_f+0x86>
     c0c:	76 95       	lsr	r23
     c0e:	67 95       	ror	r22
     c10:	57 95       	ror	r21
     c12:	47 95       	ror	r20
     c14:	0a 94       	dec	r0
     c16:	d2 f7       	brpl	.-12     	; 0xc0c <__pack_f+0x7e>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x9c>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	aa 1f       	adc	r26, r26
     c28:	bb 1f       	adc	r27, r27
     c2a:	2a 95       	dec	r18
     c2c:	d2 f7       	brpl	.-12     	; 0xc22 <__pack_f+0x94>
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	a1 09       	sbc	r26, r1
     c32:	b1 09       	sbc	r27, r1
     c34:	8e 21       	and	r24, r14
     c36:	9f 21       	and	r25, r15
     c38:	a0 23       	and	r26, r16
     c3a:	b1 23       	and	r27, r17
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	a1 05       	cpc	r26, r1
     c40:	b1 05       	cpc	r27, r1
     c42:	21 f0       	breq	.+8      	; 0xc4c <__pack_f+0xbe>
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a0 e0       	ldi	r26, 0x00	; 0
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	9a 01       	movw	r18, r20
     c4e:	ab 01       	movw	r20, r22
     c50:	28 2b       	or	r18, r24
     c52:	39 2b       	or	r19, r25
     c54:	4a 2b       	or	r20, r26
     c56:	5b 2b       	or	r21, r27
     c58:	da 01       	movw	r26, r20
     c5a:	c9 01       	movw	r24, r18
     c5c:	8f 77       	andi	r24, 0x7F	; 127
     c5e:	90 70       	andi	r25, 0x00	; 0
     c60:	a0 70       	andi	r26, 0x00	; 0
     c62:	b0 70       	andi	r27, 0x00	; 0
     c64:	80 34       	cpi	r24, 0x40	; 64
     c66:	91 05       	cpc	r25, r1
     c68:	a1 05       	cpc	r26, r1
     c6a:	b1 05       	cpc	r27, r1
     c6c:	39 f4       	brne	.+14     	; 0xc7c <__pack_f+0xee>
     c6e:	27 ff       	sbrs	r18, 7
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <__pack_f+0xf6>
     c72:	20 5c       	subi	r18, 0xC0	; 192
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	4f 4f       	sbci	r20, 0xFF	; 255
     c78:	5f 4f       	sbci	r21, 0xFF	; 255
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0xf6>
     c7c:	21 5c       	subi	r18, 0xC1	; 193
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	4f 4f       	sbci	r20, 0xFF	; 255
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	e0 e0       	ldi	r30, 0x00	; 0
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	20 30       	cpi	r18, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	3a 07       	cpc	r19, r26
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	4a 07       	cpc	r20, r26
     c92:	a0 e4       	ldi	r26, 0x40	; 64
     c94:	5a 07       	cpc	r21, r26
     c96:	10 f0       	brcs	.+4      	; 0xc9c <__pack_f+0x10e>
     c98:	e1 e0       	ldi	r30, 0x01	; 1
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	79 01       	movw	r14, r18
     c9e:	8a 01       	movw	r16, r20
     ca0:	27 c0       	rjmp	.+78     	; 0xcf0 <__pack_f+0x162>
     ca2:	60 38       	cpi	r22, 0x80	; 128
     ca4:	71 05       	cpc	r23, r1
     ca6:	64 f5       	brge	.+88     	; 0xd00 <__pack_f+0x172>
     ca8:	fb 01       	movw	r30, r22
     caa:	e1 58       	subi	r30, 0x81	; 129
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	d8 01       	movw	r26, r16
     cb0:	c7 01       	movw	r24, r14
     cb2:	8f 77       	andi	r24, 0x7F	; 127
     cb4:	90 70       	andi	r25, 0x00	; 0
     cb6:	a0 70       	andi	r26, 0x00	; 0
     cb8:	b0 70       	andi	r27, 0x00	; 0
     cba:	80 34       	cpi	r24, 0x40	; 64
     cbc:	91 05       	cpc	r25, r1
     cbe:	a1 05       	cpc	r26, r1
     cc0:	b1 05       	cpc	r27, r1
     cc2:	39 f4       	brne	.+14     	; 0xcd2 <__pack_f+0x144>
     cc4:	e7 fe       	sbrs	r14, 7
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <__pack_f+0x154>
     cc8:	80 e4       	ldi	r24, 0x40	; 64
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <__pack_f+0x14c>
     cd2:	8f e3       	ldi	r24, 0x3F	; 63
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	a0 e0       	ldi	r26, 0x00	; 0
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e8 0e       	add	r14, r24
     cdc:	f9 1e       	adc	r15, r25
     cde:	0a 1f       	adc	r16, r26
     ce0:	1b 1f       	adc	r17, r27
     ce2:	17 ff       	sbrs	r17, 7
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <__pack_f+0x162>
     ce6:	16 95       	lsr	r17
     ce8:	07 95       	ror	r16
     cea:	f7 94       	ror	r15
     cec:	e7 94       	ror	r14
     cee:	31 96       	adiw	r30, 0x01	; 1
     cf0:	87 e0       	ldi	r24, 0x07	; 7
     cf2:	16 95       	lsr	r17
     cf4:	07 95       	ror	r16
     cf6:	f7 94       	ror	r15
     cf8:	e7 94       	ror	r14
     cfa:	8a 95       	dec	r24
     cfc:	d1 f7       	brne	.-12     	; 0xcf2 <__pack_f+0x164>
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__pack_f+0x17c>
     d00:	ee 24       	eor	r14, r14
     d02:	ff 24       	eor	r15, r15
     d04:	87 01       	movw	r16, r14
     d06:	ef ef       	ldi	r30, 0xFF	; 255
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	6e 2f       	mov	r22, r30
     d0c:	67 95       	ror	r22
     d0e:	66 27       	eor	r22, r22
     d10:	67 95       	ror	r22
     d12:	90 2f       	mov	r25, r16
     d14:	9f 77       	andi	r25, 0x7F	; 127
     d16:	d7 94       	ror	r13
     d18:	dd 24       	eor	r13, r13
     d1a:	d7 94       	ror	r13
     d1c:	8e 2f       	mov	r24, r30
     d1e:	86 95       	lsr	r24
     d20:	49 2f       	mov	r20, r25
     d22:	46 2b       	or	r20, r22
     d24:	58 2f       	mov	r21, r24
     d26:	5d 29       	or	r21, r13
     d28:	b7 01       	movw	r22, r14
     d2a:	ca 01       	movw	r24, r20
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	08 95       	ret

00000d38 <__unpack_f>:
     d38:	fc 01       	movw	r30, r24
     d3a:	db 01       	movw	r26, r22
     d3c:	40 81       	ld	r20, Z
     d3e:	51 81       	ldd	r21, Z+1	; 0x01
     d40:	22 81       	ldd	r18, Z+2	; 0x02
     d42:	62 2f       	mov	r22, r18
     d44:	6f 77       	andi	r22, 0x7F	; 127
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	22 1f       	adc	r18, r18
     d4a:	22 27       	eor	r18, r18
     d4c:	22 1f       	adc	r18, r18
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	89 2f       	mov	r24, r25
     d52:	88 0f       	add	r24, r24
     d54:	82 2b       	or	r24, r18
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	99 1f       	adc	r25, r25
     d5c:	99 27       	eor	r25, r25
     d5e:	99 1f       	adc	r25, r25
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	9c 93       	st	X, r25
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	21 15       	cp	r18, r1
     d68:	31 05       	cpc	r19, r1
     d6a:	a9 f5       	brne	.+106    	; 0xdd6 <__unpack_f+0x9e>
     d6c:	41 15       	cp	r20, r1
     d6e:	51 05       	cpc	r21, r1
     d70:	61 05       	cpc	r22, r1
     d72:	71 05       	cpc	r23, r1
     d74:	11 f4       	brne	.+4      	; 0xd7a <__unpack_f+0x42>
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	37 c0       	rjmp	.+110    	; 0xde8 <__unpack_f+0xb0>
     d7a:	82 e8       	ldi	r24, 0x82	; 130
     d7c:	9f ef       	ldi	r25, 0xFF	; 255
     d7e:	13 96       	adiw	r26, 0x03	; 3
     d80:	9c 93       	st	X, r25
     d82:	8e 93       	st	-X, r24
     d84:	12 97       	sbiw	r26, 0x02	; 2
     d86:	9a 01       	movw	r18, r20
     d88:	ab 01       	movw	r20, r22
     d8a:	67 e0       	ldi	r22, 0x07	; 7
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	44 1f       	adc	r20, r20
     d92:	55 1f       	adc	r21, r21
     d94:	6a 95       	dec	r22
     d96:	d1 f7       	brne	.-12     	; 0xd8c <__unpack_f+0x54>
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	8c 93       	st	X, r24
     d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <__unpack_f+0x80>
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	44 1f       	adc	r20, r20
     da4:	55 1f       	adc	r21, r21
     da6:	12 96       	adiw	r26, 0x02	; 2
     da8:	8d 91       	ld	r24, X+
     daa:	9c 91       	ld	r25, X
     dac:	13 97       	sbiw	r26, 0x03	; 3
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	13 96       	adiw	r26, 0x03	; 3
     db2:	9c 93       	st	X, r25
     db4:	8e 93       	st	-X, r24
     db6:	12 97       	sbiw	r26, 0x02	; 2
     db8:	20 30       	cpi	r18, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	38 07       	cpc	r19, r24
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	48 07       	cpc	r20, r24
     dc2:	80 e4       	ldi	r24, 0x40	; 64
     dc4:	58 07       	cpc	r21, r24
     dc6:	58 f3       	brcs	.-42     	; 0xd9e <__unpack_f+0x66>
     dc8:	14 96       	adiw	r26, 0x04	; 4
     dca:	2d 93       	st	X+, r18
     dcc:	3d 93       	st	X+, r19
     dce:	4d 93       	st	X+, r20
     dd0:	5c 93       	st	X, r21
     dd2:	17 97       	sbiw	r26, 0x07	; 7
     dd4:	08 95       	ret
     dd6:	2f 3f       	cpi	r18, 0xFF	; 255
     dd8:	31 05       	cpc	r19, r1
     dda:	79 f4       	brne	.+30     	; 0xdfa <__unpack_f+0xc2>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	19 f4       	brne	.+6      	; 0xdec <__unpack_f+0xb4>
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	8c 93       	st	X, r24
     dea:	08 95       	ret
     dec:	64 ff       	sbrs	r22, 4
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <__unpack_f+0xbe>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <__unpack_f+0xe2>
     df6:	1c 92       	st	X, r1
     df8:	10 c0       	rjmp	.+32     	; 0xe1a <__unpack_f+0xe2>
     dfa:	2f 57       	subi	r18, 0x7F	; 127
     dfc:	30 40       	sbci	r19, 0x00	; 0
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	3c 93       	st	X, r19
     e02:	2e 93       	st	-X, r18
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	8c 93       	st	X, r24
     e0a:	87 e0       	ldi	r24, 0x07	; 7
     e0c:	44 0f       	add	r20, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	66 1f       	adc	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	8a 95       	dec	r24
     e16:	d1 f7       	brne	.-12     	; 0xe0c <__unpack_f+0xd4>
     e18:	70 64       	ori	r23, 0x40	; 64
     e1a:	14 96       	adiw	r26, 0x04	; 4
     e1c:	4d 93       	st	X+, r20
     e1e:	5d 93       	st	X+, r21
     e20:	6d 93       	st	X+, r22
     e22:	7c 93       	st	X, r23
     e24:	17 97       	sbiw	r26, 0x07	; 7
     e26:	08 95       	ret

00000e28 <__fpcmp_parts_f>:
     e28:	1f 93       	push	r17
     e2a:	dc 01       	movw	r26, r24
     e2c:	fb 01       	movw	r30, r22
     e2e:	9c 91       	ld	r25, X
     e30:	92 30       	cpi	r25, 0x02	; 2
     e32:	08 f4       	brcc	.+2      	; 0xe36 <__fpcmp_parts_f+0xe>
     e34:	47 c0       	rjmp	.+142    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e36:	80 81       	ld	r24, Z
     e38:	82 30       	cpi	r24, 0x02	; 2
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <__fpcmp_parts_f+0x16>
     e3c:	43 c0       	rjmp	.+134    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e3e:	94 30       	cpi	r25, 0x04	; 4
     e40:	51 f4       	brne	.+20     	; 0xe56 <__fpcmp_parts_f+0x2e>
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	1c 91       	ld	r17, X
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	99 f5       	brne	.+102    	; 0xeb0 <__fpcmp_parts_f+0x88>
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
     e4c:	68 2f       	mov	r22, r24
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	61 1b       	sub	r22, r17
     e52:	71 09       	sbc	r23, r1
     e54:	3f c0       	rjmp	.+126    	; 0xed4 <__fpcmp_parts_f+0xac>
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	21 f0       	breq	.+8      	; 0xe62 <__fpcmp_parts_f+0x3a>
     e5a:	92 30       	cpi	r25, 0x02	; 2
     e5c:	31 f4       	brne	.+12     	; 0xe6a <__fpcmp_parts_f+0x42>
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	b9 f1       	breq	.+110    	; 0xed0 <__fpcmp_parts_f+0xa8>
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	88 23       	and	r24, r24
     e66:	89 f1       	breq	.+98     	; 0xeca <__fpcmp_parts_f+0xa2>
     e68:	2d c0       	rjmp	.+90     	; 0xec4 <__fpcmp_parts_f+0x9c>
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	1c 91       	ld	r17, X
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	f1 f0       	breq	.+60     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e74:	81 81       	ldd	r24, Z+1	; 0x01
     e76:	18 17       	cp	r17, r24
     e78:	d9 f4       	brne	.+54     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e7a:	12 96       	adiw	r26, 0x02	; 2
     e7c:	2d 91       	ld	r18, X+
     e7e:	3c 91       	ld	r19, X
     e80:	13 97       	sbiw	r26, 0x03	; 3
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	82 17       	cp	r24, r18
     e88:	93 07       	cpc	r25, r19
     e8a:	94 f0       	brlt	.+36     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	bc f0       	brlt	.+46     	; 0xec0 <__fpcmp_parts_f+0x98>
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	8d 91       	ld	r24, X+
     e96:	9d 91       	ld	r25, X+
     e98:	0d 90       	ld	r0, X+
     e9a:	bc 91       	ld	r27, X
     e9c:	a0 2d       	mov	r26, r0
     e9e:	24 81       	ldd	r18, Z+4	; 0x04
     ea0:	35 81       	ldd	r19, Z+5	; 0x05
     ea2:	46 81       	ldd	r20, Z+6	; 0x06
     ea4:	57 81       	ldd	r21, Z+7	; 0x07
     ea6:	28 17       	cp	r18, r24
     ea8:	39 07       	cpc	r19, r25
     eaa:	4a 07       	cpc	r20, r26
     eac:	5b 07       	cpc	r21, r27
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <__fpcmp_parts_f+0x8e>
     eb0:	11 23       	and	r17, r17
     eb2:	41 f0       	breq	.+16     	; 0xec4 <__fpcmp_parts_f+0x9c>
     eb4:	0a c0       	rjmp	.+20     	; 0xeca <__fpcmp_parts_f+0xa2>
     eb6:	82 17       	cp	r24, r18
     eb8:	93 07       	cpc	r25, r19
     eba:	a4 07       	cpc	r26, r20
     ebc:	b5 07       	cpc	r27, r21
     ebe:	40 f4       	brcc	.+16     	; 0xed0 <__fpcmp_parts_f+0xa8>
     ec0:	11 23       	and	r17, r17
     ec2:	19 f0       	breq	.+6      	; 0xeca <__fpcmp_parts_f+0xa2>
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <__fpcmp_parts_f+0xac>
     eca:	6f ef       	ldi	r22, 0xFF	; 255
     ecc:	7f ef       	ldi	r23, 0xFF	; 255
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <__fpcmp_parts_f+0xac>
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	cb 01       	movw	r24, r22
     ed6:	1f 91       	pop	r17
     ed8:	08 95       	ret

00000eda <vTIMER0_Init>:
#include "Timer_Private.h"
#include "Timers_Config.h"
#include "Timer_Interface.h"

void vTIMER0_Init(void)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
    /*1. Select Mode*/
    vTimer0_SetMode(TIMER0_MODE);
     ee2:	83 e0       	ldi	r24, 0x03	; 3
     ee4:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vTimer0_SetMode>

    /*2- Select OC0 Pin Mode*/
    vTimer0_OC0_SetMode(TIMER0_OC0_MODE);
     ee8:	82 e0       	ldi	r24, 0x02	; 2
     eea:	0e 94 3f 08 	call	0x107e	; 0x107e <vTimer0_OC0_SetMode>

    /*3- Set Pre-load "Initial Counting Value" Value*/
    vTimer0_SetPreLoad(TIMER0_INITIAL_VALUE);
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	0e 94 bc 07 	call	0xf78	; 0xf78 <vTimer0_SetPreLoad>

    /*4- Set Compare Match Value*/
    vTimer0_SetOCRValue(TIMER0_OCR0_VALUE);
     ef4:	8f e7       	ldi	r24, 0x7F	; 127
     ef6:	0e 94 ca 07 	call	0xf94	; 0xf94 <vTimer0_SetOCRValue>

    /*5- Enable/ Disable OV Interrupt*/
    vTimer0_OVF_InterruptDisable();
     efa:	0e 94 92 07 	call	0xf24	; 0xf24 <vTimer0_OVF_InterruptDisable>

    /*6- Enable/ Disable OC Interrupt*/
    vTimer0_OCM_InterruptDisable();
     efe:	0e 94 ae 07 	call	0xf5c	; 0xf5c <vTimer0_OCM_InterruptDisable>
}
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <vTimer0_OVF_InterruptEnable>:

void vTimer0_OVF_InterruptEnable(void)
{
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
    set_bit(TIMSK, TOIE0);
     f10:	a9 e5       	ldi	r26, 0x59	; 89
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e9 e5       	ldi	r30, 0x59	; 89
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	81 60       	ori	r24, 0x01	; 1
     f1c:	8c 93       	st	X, r24
}
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <vTimer0_OVF_InterruptDisable>:

void vTimer0_OVF_InterruptDisable(void)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
    clr_bit(TIMSK, TOIE0);
     f2c:	a9 e5       	ldi	r26, 0x59	; 89
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e9 e5       	ldi	r30, 0x59	; 89
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	8e 7f       	andi	r24, 0xFE	; 254
     f38:	8c 93       	st	X, r24
}
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <vTimer0_OCM_InterruptEnable>:

void vTimer0_OCM_InterruptEnable(void)
{
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
    set_bit(TIMSK, OCIE0);
     f48:	a9 e5       	ldi	r26, 0x59	; 89
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e9 e5       	ldi	r30, 0x59	; 89
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	82 60       	ori	r24, 0x02	; 2
     f54:	8c 93       	st	X, r24
}
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	08 95       	ret

00000f5c <vTimer0_OCM_InterruptDisable>:

void vTimer0_OCM_InterruptDisable(void)
{
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
    clr_bit(TIMSK, OCIE0);
     f64:	a9 e5       	ldi	r26, 0x59	; 89
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e9 e5       	ldi	r30, 0x59	; 89
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	8d 7f       	andi	r24, 0xFD	; 253
     f70:	8c 93       	st	X, r24
}
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <vTimer0_SetPreLoad>:

void vTimer0_SetPreLoad(u8 value)
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	0f 92       	push	r0
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = value;
     f84:	e2 e5       	ldi	r30, 0x52	; 82
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	80 83       	st	Z, r24
}
     f8c:	0f 90       	pop	r0
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <vTimer0_SetOCRValue>:

void vTimer0_SetOCRValue(u8 value)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	0f 92       	push	r0
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = value;
     fa0:	ec e5       	ldi	r30, 0x5C	; 92
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	80 83       	st	Z, r24
}
     fa8:	0f 90       	pop	r0
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <vTimer0_SetMode>:

void vTimer0_SetMode(u8 mode)
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <vTimer0_SetMode+0x6>
     fb6:	0f 92       	push	r0
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	89 83       	std	Y+1, r24	; 0x01
    switch (mode)
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	3b 83       	std	Y+3, r19	; 0x03
     fc6:	2a 83       	std	Y+2, r18	; 0x02
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	9b 81       	ldd	r25, Y+3	; 0x03
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	91 05       	cpc	r25, r1
     fd0:	21 f1       	breq	.+72     	; 0x101a <vTimer0_SetMode+0x6a>
     fd2:	2a 81       	ldd	r18, Y+2	; 0x02
     fd4:	3b 81       	ldd	r19, Y+3	; 0x03
     fd6:	22 30       	cpi	r18, 0x02	; 2
     fd8:	31 05       	cpc	r19, r1
     fda:	2c f4       	brge	.+10     	; 0xfe6 <vTimer0_SetMode+0x36>
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	9b 81       	ldd	r25, Y+3	; 0x03
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	61 f0       	breq	.+24     	; 0xffc <vTimer0_SetMode+0x4c>
     fe4:	46 c0       	rjmp	.+140    	; 0x1072 <vTimer0_SetMode+0xc2>
     fe6:	2a 81       	ldd	r18, Y+2	; 0x02
     fe8:	3b 81       	ldd	r19, Y+3	; 0x03
     fea:	22 30       	cpi	r18, 0x02	; 2
     fec:	31 05       	cpc	r19, r1
     fee:	21 f1       	breq	.+72     	; 0x1038 <vTimer0_SetMode+0x88>
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	9b 81       	ldd	r25, Y+3	; 0x03
     ff4:	83 30       	cpi	r24, 0x03	; 3
     ff6:	91 05       	cpc	r25, r1
     ff8:	71 f1       	breq	.+92     	; 0x1056 <vTimer0_SetMode+0xa6>
     ffa:	3b c0       	rjmp	.+118    	; 0x1072 <vTimer0_SetMode+0xc2>
    {
    case TIMER0_NORMAL_MODE:
        clr_bit(TCCR0, WGM01);
     ffc:	a3 e5       	ldi	r26, 0x53	; 83
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e3 e5       	ldi	r30, 0x53	; 83
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	87 7f       	andi	r24, 0xF7	; 247
    1008:	8c 93       	st	X, r24
        clr_bit(TCCR0, WGM00);
    100a:	a3 e5       	ldi	r26, 0x53	; 83
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e3 e5       	ldi	r30, 0x53	; 83
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	8f 7b       	andi	r24, 0xBF	; 191
    1016:	8c 93       	st	X, r24
    1018:	2c c0       	rjmp	.+88     	; 0x1072 <vTimer0_SetMode+0xc2>
        break;

    case TIMER0_PHASECORRECT_MODE:
        clr_bit(TCCR0, WGM01);
    101a:	a3 e5       	ldi	r26, 0x53	; 83
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e3 e5       	ldi	r30, 0x53	; 83
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	87 7f       	andi	r24, 0xF7	; 247
    1026:	8c 93       	st	X, r24
        set_bit(TCCR0, WGM00);
    1028:	a3 e5       	ldi	r26, 0x53	; 83
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e3 e5       	ldi	r30, 0x53	; 83
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	80 64       	ori	r24, 0x40	; 64
    1034:	8c 93       	st	X, r24
    1036:	1d c0       	rjmp	.+58     	; 0x1072 <vTimer0_SetMode+0xc2>
        break;

    case TIMER0_CTC_MODE:
        set_bit(TCCR0, WGM01);
    1038:	a3 e5       	ldi	r26, 0x53	; 83
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e3 e5       	ldi	r30, 0x53	; 83
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	88 60       	ori	r24, 0x08	; 8
    1044:	8c 93       	st	X, r24
        clr_bit(TCCR0, WGM00);
    1046:	a3 e5       	ldi	r26, 0x53	; 83
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e3 e5       	ldi	r30, 0x53	; 83
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	8f 7b       	andi	r24, 0xBF	; 191
    1052:	8c 93       	st	X, r24
    1054:	0e c0       	rjmp	.+28     	; 0x1072 <vTimer0_SetMode+0xc2>
        break;

    case TIMER0_FASTPWM_MODE:
        set_bit(TCCR0, WGM01);
    1056:	a3 e5       	ldi	r26, 0x53	; 83
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e3 e5       	ldi	r30, 0x53	; 83
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	88 60       	ori	r24, 0x08	; 8
    1062:	8c 93       	st	X, r24
        set_bit(TCCR0, WGM00);
    1064:	a3 e5       	ldi	r26, 0x53	; 83
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e3 e5       	ldi	r30, 0x53	; 83
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	80 64       	ori	r24, 0x40	; 64
    1070:	8c 93       	st	X, r24

    default:
        /*error handling*/
        break;
    }
}
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <vTimer0_OC0_SetMode>:

void vTimer0_OC0_SetMode(u8 mode)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <vTimer0_OC0_SetMode+0x6>
    1084:	0f 92       	push	r0
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	89 83       	std	Y+1, r24	; 0x01
    switch (mode)
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	3b 83       	std	Y+3, r19	; 0x03
    1094:	2a 83       	std	Y+2, r18	; 0x02
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	9b 81       	ldd	r25, Y+3	; 0x03
    109a:	81 30       	cpi	r24, 0x01	; 1
    109c:	91 05       	cpc	r25, r1
    109e:	21 f1       	breq	.+72     	; 0x10e8 <vTimer0_OC0_SetMode+0x6a>
    10a0:	2a 81       	ldd	r18, Y+2	; 0x02
    10a2:	3b 81       	ldd	r19, Y+3	; 0x03
    10a4:	22 30       	cpi	r18, 0x02	; 2
    10a6:	31 05       	cpc	r19, r1
    10a8:	2c f4       	brge	.+10     	; 0x10b4 <vTimer0_OC0_SetMode+0x36>
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	9b 81       	ldd	r25, Y+3	; 0x03
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	61 f0       	breq	.+24     	; 0x10ca <vTimer0_OC0_SetMode+0x4c>
    10b2:	46 c0       	rjmp	.+140    	; 0x1140 <vTimer0_OC0_SetMode+0xc2>
    10b4:	2a 81       	ldd	r18, Y+2	; 0x02
    10b6:	3b 81       	ldd	r19, Y+3	; 0x03
    10b8:	22 30       	cpi	r18, 0x02	; 2
    10ba:	31 05       	cpc	r19, r1
    10bc:	21 f1       	breq	.+72     	; 0x1106 <vTimer0_OC0_SetMode+0x88>
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	9b 81       	ldd	r25, Y+3	; 0x03
    10c2:	83 30       	cpi	r24, 0x03	; 3
    10c4:	91 05       	cpc	r25, r1
    10c6:	71 f1       	breq	.+92     	; 0x1124 <vTimer0_OC0_SetMode+0xa6>
    10c8:	3b c0       	rjmp	.+118    	; 0x1140 <vTimer0_OC0_SetMode+0xc2>
    {
    case TIMER_OC_DISCONNECTED:
        clr_bit(TCCR0, COM00);
    10ca:	a3 e5       	ldi	r26, 0x53	; 83
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e3 e5       	ldi	r30, 0x53	; 83
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	8f 7e       	andi	r24, 0xEF	; 239
    10d6:	8c 93       	st	X, r24
        clr_bit(TCCR0, COM01);
    10d8:	a3 e5       	ldi	r26, 0x53	; 83
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e3 e5       	ldi	r30, 0x53	; 83
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	8f 7d       	andi	r24, 0xDF	; 223
    10e4:	8c 93       	st	X, r24
    10e6:	2c c0       	rjmp	.+88     	; 0x1140 <vTimer0_OC0_SetMode+0xc2>
        break;

    case TIMER_OC_TOGGLE:
        set_bit(TCCR0, COM00);
    10e8:	a3 e5       	ldi	r26, 0x53	; 83
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e3 e5       	ldi	r30, 0x53	; 83
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	80 61       	ori	r24, 0x10	; 16
    10f4:	8c 93       	st	X, r24
        clr_bit(TCCR0, COM01);
    10f6:	a3 e5       	ldi	r26, 0x53	; 83
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e3 e5       	ldi	r30, 0x53	; 83
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	8f 7d       	andi	r24, 0xDF	; 223
    1102:	8c 93       	st	X, r24
    1104:	1d c0       	rjmp	.+58     	; 0x1140 <vTimer0_OC0_SetMode+0xc2>
        break;

    case TIMER_OC_NON_INVERTING:
        clr_bit(TCCR0, COM00);
    1106:	a3 e5       	ldi	r26, 0x53	; 83
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e3 e5       	ldi	r30, 0x53	; 83
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	8f 7e       	andi	r24, 0xEF	; 239
    1112:	8c 93       	st	X, r24
        set_bit(TCCR0, COM01);
    1114:	a3 e5       	ldi	r26, 0x53	; 83
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e3 e5       	ldi	r30, 0x53	; 83
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 62       	ori	r24, 0x20	; 32
    1120:	8c 93       	st	X, r24
    1122:	0e c0       	rjmp	.+28     	; 0x1140 <vTimer0_OC0_SetMode+0xc2>
        break;

    case TIMER_OC_INVERTING:
        set_bit(TCCR0, COM00);
    1124:	a3 e5       	ldi	r26, 0x53	; 83
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e3 e5       	ldi	r30, 0x53	; 83
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	80 61       	ori	r24, 0x10	; 16
    1130:	8c 93       	st	X, r24
        set_bit(TCCR0, COM01);
    1132:	a3 e5       	ldi	r26, 0x53	; 83
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e3 e5       	ldi	r30, 0x53	; 83
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	80 62       	ori	r24, 0x20	; 32
    113e:	8c 93       	st	X, r24

    default:
        /*error handling*/
        break;
    }
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <vTIMER0_Start>:

void vTIMER0_Start(void)
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    vTimer0_PrescalerSelect(TIMER0_PRESCALER);
    1154:	82 e0       	ldi	r24, 0x02	; 2
    1156:	0e 94 cc 08 	call	0x1198	; 0x1198 <vTimer0_PrescalerSelect>
}
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <vTIMER0_Stop>:

void vTIMER0_Stop(void)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    clr_bit(TCCR0, CS00);
    1168:	a3 e5       	ldi	r26, 0x53	; 83
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e3 e5       	ldi	r30, 0x53	; 83
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	8e 7f       	andi	r24, 0xFE	; 254
    1174:	8c 93       	st	X, r24
    clr_bit(TCCR0, CS01);
    1176:	a3 e5       	ldi	r26, 0x53	; 83
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e3 e5       	ldi	r30, 0x53	; 83
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	8d 7f       	andi	r24, 0xFD	; 253
    1182:	8c 93       	st	X, r24
    clr_bit(TCCR0, CS02);
    1184:	a3 e5       	ldi	r26, 0x53	; 83
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e3 e5       	ldi	r30, 0x53	; 83
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	8b 7f       	andi	r24, 0xFB	; 251
    1190:	8c 93       	st	X, r24
}
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <vTimer0_PrescalerSelect>:

void vTimer0_PrescalerSelect(u8 prescaler)
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	00 d0       	rcall	.+0      	; 0x119e <vTimer0_PrescalerSelect+0x6>
    119e:	0f 92       	push	r0
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	89 83       	std	Y+1, r24	; 0x01
    switch (prescaler)
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	3b 83       	std	Y+3, r19	; 0x03
    11ae:	2a 83       	std	Y+2, r18	; 0x02
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	9b 81       	ldd	r25, Y+3	; 0x03
    11b4:	84 30       	cpi	r24, 0x04	; 4
    11b6:	91 05       	cpc	r25, r1
    11b8:	09 f4       	brne	.+2      	; 0x11bc <vTimer0_PrescalerSelect+0x24>
    11ba:	6b c0       	rjmp	.+214    	; 0x1292 <vTimer0_PrescalerSelect+0xfa>
    11bc:	2a 81       	ldd	r18, Y+2	; 0x02
    11be:	3b 81       	ldd	r19, Y+3	; 0x03
    11c0:	25 30       	cpi	r18, 0x05	; 5
    11c2:	31 05       	cpc	r19, r1
    11c4:	8c f4       	brge	.+34     	; 0x11e8 <vTimer0_PrescalerSelect+0x50>
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ca:	82 30       	cpi	r24, 0x02	; 2
    11cc:	91 05       	cpc	r25, r1
    11ce:	a9 f1       	breq	.+106    	; 0x123a <vTimer0_PrescalerSelect+0xa2>
    11d0:	2a 81       	ldd	r18, Y+2	; 0x02
    11d2:	3b 81       	ldd	r19, Y+3	; 0x03
    11d4:	23 30       	cpi	r18, 0x03	; 3
    11d6:	31 05       	cpc	r19, r1
    11d8:	0c f0       	brlt	.+2      	; 0x11dc <vTimer0_PrescalerSelect+0x44>
    11da:	45 c0       	rjmp	.+138    	; 0x1266 <vTimer0_PrescalerSelect+0xce>
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	9b 81       	ldd	r25, Y+3	; 0x03
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	91 05       	cpc	r25, r1
    11e4:	a1 f0       	breq	.+40     	; 0x120e <vTimer0_PrescalerSelect+0x76>
    11e6:	ac c0       	rjmp	.+344    	; 0x1340 <vTimer0_PrescalerSelect+0x1a8>
    11e8:	2a 81       	ldd	r18, Y+2	; 0x02
    11ea:	3b 81       	ldd	r19, Y+3	; 0x03
    11ec:	26 30       	cpi	r18, 0x06	; 6
    11ee:	31 05       	cpc	r19, r1
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <vTimer0_PrescalerSelect+0x5c>
    11f2:	7b c0       	rjmp	.+246    	; 0x12ea <vTimer0_PrescalerSelect+0x152>
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	9b 81       	ldd	r25, Y+3	; 0x03
    11f8:	86 30       	cpi	r24, 0x06	; 6
    11fa:	91 05       	cpc	r25, r1
    11fc:	0c f4       	brge	.+2      	; 0x1200 <vTimer0_PrescalerSelect+0x68>
    11fe:	5f c0       	rjmp	.+190    	; 0x12be <vTimer0_PrescalerSelect+0x126>
    1200:	2a 81       	ldd	r18, Y+2	; 0x02
    1202:	3b 81       	ldd	r19, Y+3	; 0x03
    1204:	27 30       	cpi	r18, 0x07	; 7
    1206:	31 05       	cpc	r19, r1
    1208:	09 f4       	brne	.+2      	; 0x120c <vTimer0_PrescalerSelect+0x74>
    120a:	85 c0       	rjmp	.+266    	; 0x1316 <vTimer0_PrescalerSelect+0x17e>
    120c:	99 c0       	rjmp	.+306    	; 0x1340 <vTimer0_PrescalerSelect+0x1a8>
    {
    case TIMER_SCALER_1:
        set_bit(TCCR0, CS00);
    120e:	a3 e5       	ldi	r26, 0x53	; 83
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e3 e5       	ldi	r30, 0x53	; 83
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	81 60       	ori	r24, 0x01	; 1
    121a:	8c 93       	st	X, r24
        clr_bit(TCCR0, CS01);
    121c:	a3 e5       	ldi	r26, 0x53	; 83
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e3 e5       	ldi	r30, 0x53	; 83
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	8d 7f       	andi	r24, 0xFD	; 253
    1228:	8c 93       	st	X, r24
        clr_bit(TCCR0, CS02);
    122a:	a3 e5       	ldi	r26, 0x53	; 83
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e3 e5       	ldi	r30, 0x53	; 83
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	8b 7f       	andi	r24, 0xFB	; 251
    1236:	8c 93       	st	X, r24
    1238:	83 c0       	rjmp	.+262    	; 0x1340 <vTimer0_PrescalerSelect+0x1a8>
        break;
    case TIMER_SCALER_8:
        clr_bit(TCCR0, CS00);
    123a:	a3 e5       	ldi	r26, 0x53	; 83
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e3 e5       	ldi	r30, 0x53	; 83
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	8e 7f       	andi	r24, 0xFE	; 254
    1246:	8c 93       	st	X, r24
        set_bit(TCCR0, CS01);
    1248:	a3 e5       	ldi	r26, 0x53	; 83
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e3 e5       	ldi	r30, 0x53	; 83
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	82 60       	ori	r24, 0x02	; 2
    1254:	8c 93       	st	X, r24
        clr_bit(TCCR0, CS02);
    1256:	a3 e5       	ldi	r26, 0x53	; 83
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e3 e5       	ldi	r30, 0x53	; 83
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	8b 7f       	andi	r24, 0xFB	; 251
    1262:	8c 93       	st	X, r24
    1264:	6d c0       	rjmp	.+218    	; 0x1340 <vTimer0_PrescalerSelect+0x1a8>
        break;
    case TIMER_SCALER_64:
        set_bit(TCCR0, CS00);
    1266:	a3 e5       	ldi	r26, 0x53	; 83
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e3 e5       	ldi	r30, 0x53	; 83
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	81 60       	ori	r24, 0x01	; 1
    1272:	8c 93       	st	X, r24
        set_bit(TCCR0, CS01);
    1274:	a3 e5       	ldi	r26, 0x53	; 83
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e3 e5       	ldi	r30, 0x53	; 83
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	82 60       	ori	r24, 0x02	; 2
    1280:	8c 93       	st	X, r24
        clr_bit(TCCR0, CS02);
    1282:	a3 e5       	ldi	r26, 0x53	; 83
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e3 e5       	ldi	r30, 0x53	; 83
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	8b 7f       	andi	r24, 0xFB	; 251
    128e:	8c 93       	st	X, r24
    1290:	57 c0       	rjmp	.+174    	; 0x1340 <vTimer0_PrescalerSelect+0x1a8>
        break;
    case TIMER_SCALER_256:
        clr_bit(TCCR0, CS00);
    1292:	a3 e5       	ldi	r26, 0x53	; 83
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e3 e5       	ldi	r30, 0x53	; 83
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	8e 7f       	andi	r24, 0xFE	; 254
    129e:	8c 93       	st	X, r24
        clr_bit(TCCR0, CS01);
    12a0:	a3 e5       	ldi	r26, 0x53	; 83
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e3 e5       	ldi	r30, 0x53	; 83
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	8d 7f       	andi	r24, 0xFD	; 253
    12ac:	8c 93       	st	X, r24
        set_bit(TCCR0, CS02);
    12ae:	a3 e5       	ldi	r26, 0x53	; 83
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e3 e5       	ldi	r30, 0x53	; 83
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	84 60       	ori	r24, 0x04	; 4
    12ba:	8c 93       	st	X, r24
    12bc:	41 c0       	rjmp	.+130    	; 0x1340 <vTimer0_PrescalerSelect+0x1a8>
        break;
    case TIMER_SCALER_1024:
        set_bit(TCCR0, CS00);
    12be:	a3 e5       	ldi	r26, 0x53	; 83
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e3 e5       	ldi	r30, 0x53	; 83
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	81 60       	ori	r24, 0x01	; 1
    12ca:	8c 93       	st	X, r24
        clr_bit(TCCR0, CS01);
    12cc:	a3 e5       	ldi	r26, 0x53	; 83
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e3 e5       	ldi	r30, 0x53	; 83
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	8d 7f       	andi	r24, 0xFD	; 253
    12d8:	8c 93       	st	X, r24
        set_bit(TCCR0, CS02);
    12da:	a3 e5       	ldi	r26, 0x53	; 83
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e3 e5       	ldi	r30, 0x53	; 83
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	84 60       	ori	r24, 0x04	; 4
    12e6:	8c 93       	st	X, r24
    12e8:	2b c0       	rjmp	.+86     	; 0x1340 <vTimer0_PrescalerSelect+0x1a8>
        break;
    case EXTERNALl_FALLING:
        clr_bit(TCCR0, CS00);
    12ea:	a3 e5       	ldi	r26, 0x53	; 83
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e3 e5       	ldi	r30, 0x53	; 83
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	8e 7f       	andi	r24, 0xFE	; 254
    12f6:	8c 93       	st	X, r24
        set_bit(TCCR0, CS01);
    12f8:	a3 e5       	ldi	r26, 0x53	; 83
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e3 e5       	ldi	r30, 0x53	; 83
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	82 60       	ori	r24, 0x02	; 2
    1304:	8c 93       	st	X, r24
        set_bit(TCCR0, CS02);
    1306:	a3 e5       	ldi	r26, 0x53	; 83
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e3 e5       	ldi	r30, 0x53	; 83
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	84 60       	ori	r24, 0x04	; 4
    1312:	8c 93       	st	X, r24
    1314:	15 c0       	rjmp	.+42     	; 0x1340 <vTimer0_PrescalerSelect+0x1a8>
        break;
    case EXTERNAL_RISING:
        set_bit(TCCR0, CS00);
    1316:	a3 e5       	ldi	r26, 0x53	; 83
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e3 e5       	ldi	r30, 0x53	; 83
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	81 60       	ori	r24, 0x01	; 1
    1322:	8c 93       	st	X, r24
        set_bit(TCCR0, CS01);
    1324:	a3 e5       	ldi	r26, 0x53	; 83
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e3 e5       	ldi	r30, 0x53	; 83
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	82 60       	ori	r24, 0x02	; 2
    1330:	8c 93       	st	X, r24
        set_bit(TCCR0, CS02);
    1332:	a3 e5       	ldi	r26, 0x53	; 83
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e3 e5       	ldi	r30, 0x53	; 83
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	84 60       	ori	r24, 0x04	; 4
    133e:	8c 93       	st	X, r24
        break;
    default:
        /*error handling*/
        break;
    }
}
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	cf 91       	pop	r28
    1348:	df 91       	pop	r29
    134a:	08 95       	ret

0000134c <vTimer1_Init>:

/***************************Timer 1************************************/

void vTimer1_Init(void)
{
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    /*1. Select Mode*/
    vTimer1_SetMode(TIMER1_MODE);
    1354:	8e e0       	ldi	r24, 0x0E	; 14
    1356:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <vTimer1_SetMode>

    /*2- Select OC1A Pin Mode*/
    vTimer1_OC1A_SetMode(TIMER1_OC1A_MODE);
    135a:	82 e0       	ldi	r24, 0x02	; 2
    135c:	0e 94 15 0c 	call	0x182a	; 0x182a <vTimer1_OC1A_SetMode>
    /*3- Select OC1B Pin Mode*/
    vTimer1_OC1B_SetMode(TIMER1_OC1B_MODE);
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <vTimer1_OC1B_SetMode>

    /*3- Set Pre-load "Initial Counting Value" Value*/
    vTimer1_SetPreLoad(TIMER1_INITIAL_VALUE);
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <vTimer1_SetPreLoad>

    /*4- Set Compare Match Value*/
    vTimer1_SetOCR_A_Value(TIMER1_OCR1A_VALUE);
    136e:	8f ec       	ldi	r24, 0xCF	; 207
    1370:	97 e0       	ldi	r25, 0x07	; 7
    1372:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <vTimer1_SetOCR_A_Value>
    vTimer1_SetOCR_B_Value(TIMER1_OCR1B_VALUE);
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vTimer1_SetOCR_B_Value>

    /*6- Set ICR Value*/
    vTimer1_SetICR_Value(TIMER1_ICR_VALUE);
    137e:	8f e1       	ldi	r24, 0x1F	; 31
    1380:	9e e4       	ldi	r25, 0x4E	; 78
    1382:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <vTimer1_SetICR_Value>

    /*7- Disable Interrupts*/
    vTimer1_OVF_InterruptDisable();
    1386:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <vTimer1_OVF_InterruptDisable>
    vTimer1_OCM_A_InterruptDisable();
    138a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <vTimer1_OCM_A_InterruptDisable>
    vTimer1_OCM_B_InterruptDisable();
    138e:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <vTimer1_OCM_B_InterruptDisable>
}
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <vTimer1_Start>:

void vTimer1_Start(void)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    vTimer1_PrescalerSelect(TIMER1_PRESCALER);
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <vTimer1_PrescalerSelect>
}
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <vTimer1_Stop>:

void vTimer1_Stop(void)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    clr_bit(TCCR1B, CS10);
    13b4:	ae e4       	ldi	r26, 0x4E	; 78
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	ee e4       	ldi	r30, 0x4E	; 78
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	8e 7f       	andi	r24, 0xFE	; 254
    13c0:	8c 93       	st	X, r24
    clr_bit(TCCR1B, CS11);
    13c2:	ae e4       	ldi	r26, 0x4E	; 78
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	ee e4       	ldi	r30, 0x4E	; 78
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8d 7f       	andi	r24, 0xFD	; 253
    13ce:	8c 93       	st	X, r24
    clr_bit(TCCR1B, CS12);
    13d0:	ae e4       	ldi	r26, 0x4E	; 78
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	ee e4       	ldi	r30, 0x4E	; 78
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	8b 7f       	andi	r24, 0xFB	; 251
    13dc:	8c 93       	st	X, r24
}
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <vTimer1_SetMode>:
void vTimer1_SetMode(u8 mode)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <vTimer1_SetMode+0x6>
    13ea:	0f 92       	push	r0
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	89 83       	std	Y+1, r24	; 0x01
    switch (mode)
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	3b 83       	std	Y+3, r19	; 0x03
    13fa:	2a 83       	std	Y+2, r18	; 0x02
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1400:	87 30       	cpi	r24, 0x07	; 7
    1402:	91 05       	cpc	r25, r1
    1404:	09 f4       	brne	.+2      	; 0x1408 <vTimer1_SetMode+0x24>
    1406:	24 c1       	rjmp	.+584    	; 0x1650 <vTimer1_SetMode+0x26c>
    1408:	2a 81       	ldd	r18, Y+2	; 0x02
    140a:	3b 81       	ldd	r19, Y+3	; 0x03
    140c:	28 30       	cpi	r18, 0x08	; 8
    140e:	31 05       	cpc	r19, r1
    1410:	4c f5       	brge	.+82     	; 0x1464 <vTimer1_SetMode+0x80>
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	9b 81       	ldd	r25, Y+3	; 0x03
    1416:	83 30       	cpi	r24, 0x03	; 3
    1418:	91 05       	cpc	r25, r1
    141a:	09 f4       	brne	.+2      	; 0x141e <vTimer1_SetMode+0x3a>
    141c:	a5 c0       	rjmp	.+330    	; 0x1568 <vTimer1_SetMode+0x184>
    141e:	2a 81       	ldd	r18, Y+2	; 0x02
    1420:	3b 81       	ldd	r19, Y+3	; 0x03
    1422:	24 30       	cpi	r18, 0x04	; 4
    1424:	31 05       	cpc	r19, r1
    1426:	8c f4       	brge	.+34     	; 0x144a <vTimer1_SetMode+0x66>
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	9b 81       	ldd	r25, Y+3	; 0x03
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	91 05       	cpc	r25, r1
    1430:	09 f4       	brne	.+2      	; 0x1434 <vTimer1_SetMode+0x50>
    1432:	60 c0       	rjmp	.+192    	; 0x14f4 <vTimer1_SetMode+0x110>
    1434:	2a 81       	ldd	r18, Y+2	; 0x02
    1436:	3b 81       	ldd	r19, Y+3	; 0x03
    1438:	22 30       	cpi	r18, 0x02	; 2
    143a:	31 05       	cpc	r19, r1
    143c:	0c f0       	brlt	.+2      	; 0x1440 <vTimer1_SetMode+0x5c>
    143e:	77 c0       	rjmp	.+238    	; 0x152e <vTimer1_SetMode+0x14a>
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	9b 81       	ldd	r25, Y+3	; 0x03
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	c9 f1       	breq	.+114    	; 0x14ba <vTimer1_SetMode+0xd6>
    1448:	ea c1       	rjmp	.+980    	; 0x181e <vTimer1_SetMode+0x43a>
    144a:	2a 81       	ldd	r18, Y+2	; 0x02
    144c:	3b 81       	ldd	r19, Y+3	; 0x03
    144e:	25 30       	cpi	r18, 0x05	; 5
    1450:	31 05       	cpc	r19, r1
    1452:	09 f4       	brne	.+2      	; 0x1456 <vTimer1_SetMode+0x72>
    1454:	c3 c0       	rjmp	.+390    	; 0x15dc <vTimer1_SetMode+0x1f8>
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	9b 81       	ldd	r25, Y+3	; 0x03
    145a:	86 30       	cpi	r24, 0x06	; 6
    145c:	91 05       	cpc	r25, r1
    145e:	0c f0       	brlt	.+2      	; 0x1462 <vTimer1_SetMode+0x7e>
    1460:	da c0       	rjmp	.+436    	; 0x1616 <vTimer1_SetMode+0x232>
    1462:	9f c0       	rjmp	.+318    	; 0x15a2 <vTimer1_SetMode+0x1be>
    1464:	2a 81       	ldd	r18, Y+2	; 0x02
    1466:	3b 81       	ldd	r19, Y+3	; 0x03
    1468:	2b 30       	cpi	r18, 0x0B	; 11
    146a:	31 05       	cpc	r19, r1
    146c:	09 f4       	brne	.+2      	; 0x1470 <vTimer1_SetMode+0x8c>
    146e:	64 c1       	rjmp	.+712    	; 0x1738 <vTimer1_SetMode+0x354>
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	9b 81       	ldd	r25, Y+3	; 0x03
    1474:	8c 30       	cpi	r24, 0x0C	; 12
    1476:	91 05       	cpc	r25, r1
    1478:	6c f4       	brge	.+26     	; 0x1494 <vTimer1_SetMode+0xb0>
    147a:	2a 81       	ldd	r18, Y+2	; 0x02
    147c:	3b 81       	ldd	r19, Y+3	; 0x03
    147e:	29 30       	cpi	r18, 0x09	; 9
    1480:	31 05       	cpc	r19, r1
    1482:	09 f4       	brne	.+2      	; 0x1486 <vTimer1_SetMode+0xa2>
    1484:	1f c1       	rjmp	.+574    	; 0x16c4 <vTimer1_SetMode+0x2e0>
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	9b 81       	ldd	r25, Y+3	; 0x03
    148a:	8a 30       	cpi	r24, 0x0A	; 10
    148c:	91 05       	cpc	r25, r1
    148e:	0c f0       	brlt	.+2      	; 0x1492 <vTimer1_SetMode+0xae>
    1490:	36 c1       	rjmp	.+620    	; 0x16fe <vTimer1_SetMode+0x31a>
    1492:	fb c0       	rjmp	.+502    	; 0x168a <vTimer1_SetMode+0x2a6>
    1494:	2a 81       	ldd	r18, Y+2	; 0x02
    1496:	3b 81       	ldd	r19, Y+3	; 0x03
    1498:	2e 30       	cpi	r18, 0x0E	; 14
    149a:	31 05       	cpc	r19, r1
    149c:	09 f4       	brne	.+2      	; 0x14a0 <vTimer1_SetMode+0xbc>
    149e:	86 c1       	rjmp	.+780    	; 0x17ac <vTimer1_SetMode+0x3c8>
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	9b 81       	ldd	r25, Y+3	; 0x03
    14a4:	8f 30       	cpi	r24, 0x0F	; 15
    14a6:	91 05       	cpc	r25, r1
    14a8:	09 f4       	brne	.+2      	; 0x14ac <vTimer1_SetMode+0xc8>
    14aa:	9d c1       	rjmp	.+826    	; 0x17e6 <vTimer1_SetMode+0x402>
    14ac:	2a 81       	ldd	r18, Y+2	; 0x02
    14ae:	3b 81       	ldd	r19, Y+3	; 0x03
    14b0:	2c 30       	cpi	r18, 0x0C	; 12
    14b2:	31 05       	cpc	r19, r1
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <vTimer1_SetMode+0xd4>
    14b6:	5d c1       	rjmp	.+698    	; 0x1772 <vTimer1_SetMode+0x38e>
    14b8:	b2 c1       	rjmp	.+868    	; 0x181e <vTimer1_SetMode+0x43a>
    {
    case TIMER1_NORMAL_MODE:
        // Normal mode: WGM13 = 0, WGM12 = 0, WGM11 = 0, WGM10 = 0
        clr_bit(TCCR1A, WGM10);
    14ba:	af e4       	ldi	r26, 0x4F	; 79
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	ef e4       	ldi	r30, 0x4F	; 79
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	8e 7f       	andi	r24, 0xFE	; 254
    14c6:	8c 93       	st	X, r24
        clr_bit(TCCR1A, WGM11);
    14c8:	af e4       	ldi	r26, 0x4F	; 79
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	ef e4       	ldi	r30, 0x4F	; 79
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	8d 7f       	andi	r24, 0xFD	; 253
    14d4:	8c 93       	st	X, r24
        clr_bit(TCCR1B, WGM12);
    14d6:	ae e4       	ldi	r26, 0x4E	; 78
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	ee e4       	ldi	r30, 0x4E	; 78
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	87 7f       	andi	r24, 0xF7	; 247
    14e2:	8c 93       	st	X, r24
        clr_bit(TCCR1B, WGM13);
    14e4:	ae e4       	ldi	r26, 0x4E	; 78
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	ee e4       	ldi	r30, 0x4E	; 78
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8f 7e       	andi	r24, 0xEF	; 239
    14f0:	8c 93       	st	X, r24
    14f2:	95 c1       	rjmp	.+810    	; 0x181e <vTimer1_SetMode+0x43a>
        break;

    case TIMER1_PWM_PHASE_CORRECT_MODE_8:
        // Phase Correct PWM, 8-bit: WGM13 = 0, WGM12 = 0, WGM11 = 0, WGM10 = 1
        clr_bit(TCCR1A, WGM11);
    14f4:	af e4       	ldi	r26, 0x4F	; 79
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	ef e4       	ldi	r30, 0x4F	; 79
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	8d 7f       	andi	r24, 0xFD	; 253
    1500:	8c 93       	st	X, r24
        clr_bit(TCCR1B, WGM12);
    1502:	ae e4       	ldi	r26, 0x4E	; 78
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	ee e4       	ldi	r30, 0x4E	; 78
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	87 7f       	andi	r24, 0xF7	; 247
    150e:	8c 93       	st	X, r24
        clr_bit(TCCR1B, WGM13);
    1510:	ae e4       	ldi	r26, 0x4E	; 78
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	ee e4       	ldi	r30, 0x4E	; 78
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	8f 7e       	andi	r24, 0xEF	; 239
    151c:	8c 93       	st	X, r24
        set_bit(TCCR1A, WGM10);
    151e:	af e4       	ldi	r26, 0x4F	; 79
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	ef e4       	ldi	r30, 0x4F	; 79
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	81 60       	ori	r24, 0x01	; 1
    152a:	8c 93       	st	X, r24
    152c:	78 c1       	rjmp	.+752    	; 0x181e <vTimer1_SetMode+0x43a>
        break;

    case TIMER1_PWM_PHASE_CORRECT_MODE_9:
        // Phase Correct PWM, 9-bit: WGM13 = 0, WGM12 = 0, WGM11 = 1, WGM10 = 0
        clr_bit(TCCR1A, WGM10);
    152e:	af e4       	ldi	r26, 0x4F	; 79
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	ef e4       	ldi	r30, 0x4F	; 79
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	8e 7f       	andi	r24, 0xFE	; 254
    153a:	8c 93       	st	X, r24
        clr_bit(TCCR1B, WGM12);
    153c:	ae e4       	ldi	r26, 0x4E	; 78
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	ee e4       	ldi	r30, 0x4E	; 78
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	87 7f       	andi	r24, 0xF7	; 247
    1548:	8c 93       	st	X, r24
        clr_bit(TCCR1B, WGM13);
    154a:	ae e4       	ldi	r26, 0x4E	; 78
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	ee e4       	ldi	r30, 0x4E	; 78
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	8f 7e       	andi	r24, 0xEF	; 239
    1556:	8c 93       	st	X, r24
        set_bit(TCCR1A, WGM11);
    1558:	af e4       	ldi	r26, 0x4F	; 79
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	ef e4       	ldi	r30, 0x4F	; 79
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	82 60       	ori	r24, 0x02	; 2
    1564:	8c 93       	st	X, r24
    1566:	5b c1       	rjmp	.+694    	; 0x181e <vTimer1_SetMode+0x43a>
        break;

    case TIMER1_PWM_PHASE_CORRECT_MODE_10:
        // Phase Correct PWM, 10-bit: WGM13 = 0, WGM12 = 0, WGM11 = 1, WGM10 = 1
        set_bit(TCCR1A, WGM10);
    1568:	af e4       	ldi	r26, 0x4F	; 79
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	ef e4       	ldi	r30, 0x4F	; 79
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	81 60       	ori	r24, 0x01	; 1
    1574:	8c 93       	st	X, r24
        set_bit(TCCR1A, WGM11);
    1576:	af e4       	ldi	r26, 0x4F	; 79
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	ef e4       	ldi	r30, 0x4F	; 79
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	82 60       	ori	r24, 0x02	; 2
    1582:	8c 93       	st	X, r24
        clr_bit(TCCR1B, WGM12);
    1584:	ae e4       	ldi	r26, 0x4E	; 78
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	ee e4       	ldi	r30, 0x4E	; 78
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	87 7f       	andi	r24, 0xF7	; 247
    1590:	8c 93       	st	X, r24
        clr_bit(TCCR1B, WGM13);
    1592:	ae e4       	ldi	r26, 0x4E	; 78
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	ee e4       	ldi	r30, 0x4E	; 78
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	8f 7e       	andi	r24, 0xEF	; 239
    159e:	8c 93       	st	X, r24
    15a0:	3e c1       	rjmp	.+636    	; 0x181e <vTimer1_SetMode+0x43a>
        break;

    case TIMER1_CTC_MODE_OCRA_IS_TOP:
        // CTC with OCRA as top: WGM13 = 0, WGM12 = 1, WGM11 = 0, WGM10 = 0
        clr_bit(TCCR1A, WGM10);
    15a2:	af e4       	ldi	r26, 0x4F	; 79
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	ef e4       	ldi	r30, 0x4F	; 79
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8e 7f       	andi	r24, 0xFE	; 254
    15ae:	8c 93       	st	X, r24
        clr_bit(TCCR1A, WGM11);
    15b0:	af e4       	ldi	r26, 0x4F	; 79
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	ef e4       	ldi	r30, 0x4F	; 79
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	8d 7f       	andi	r24, 0xFD	; 253
    15bc:	8c 93       	st	X, r24
        set_bit(TCCR1B, WGM12);
    15be:	ae e4       	ldi	r26, 0x4E	; 78
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	ee e4       	ldi	r30, 0x4E	; 78
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	88 60       	ori	r24, 0x08	; 8
    15ca:	8c 93       	st	X, r24
        clr_bit(TCCR1B, WGM13);
    15cc:	ae e4       	ldi	r26, 0x4E	; 78
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	ee e4       	ldi	r30, 0x4E	; 78
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	8f 7e       	andi	r24, 0xEF	; 239
    15d8:	8c 93       	st	X, r24
    15da:	21 c1       	rjmp	.+578    	; 0x181e <vTimer1_SetMode+0x43a>
        break;

    case TIMER1_PWM_FAST_MODE_8:
        // Fast PWM, 8-bit: WGM13 = 0, WGM12 = 1, WGM11 = 0, WGM10 = 1
        set_bit(TCCR1A, WGM10);
    15dc:	af e4       	ldi	r26, 0x4F	; 79
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	ef e4       	ldi	r30, 0x4F	; 79
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	81 60       	ori	r24, 0x01	; 1
    15e8:	8c 93       	st	X, r24
        clr_bit(TCCR1A, WGM11);
    15ea:	af e4       	ldi	r26, 0x4F	; 79
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	ef e4       	ldi	r30, 0x4F	; 79
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	8d 7f       	andi	r24, 0xFD	; 253
    15f6:	8c 93       	st	X, r24
        set_bit(TCCR1B, WGM12);
    15f8:	ae e4       	ldi	r26, 0x4E	; 78
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	ee e4       	ldi	r30, 0x4E	; 78
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	88 60       	ori	r24, 0x08	; 8
    1604:	8c 93       	st	X, r24
        clr_bit(TCCR1B, WGM13);
    1606:	ae e4       	ldi	r26, 0x4E	; 78
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	ee e4       	ldi	r30, 0x4E	; 78
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	8f 7e       	andi	r24, 0xEF	; 239
    1612:	8c 93       	st	X, r24
    1614:	04 c1       	rjmp	.+520    	; 0x181e <vTimer1_SetMode+0x43a>
        break;

    case TIMER1_PWM_FAST_MODE_9:
        // Fast PWM, 9-bit: WGM13 = 0, WGM12 = 1, WGM11 = 1, WGM10 = 0
        clr_bit(TCCR1A, WGM10);
    1616:	af e4       	ldi	r26, 0x4F	; 79
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	ef e4       	ldi	r30, 0x4F	; 79
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8e 7f       	andi	r24, 0xFE	; 254
    1622:	8c 93       	st	X, r24
        set_bit(TCCR1A, WGM11);
    1624:	af e4       	ldi	r26, 0x4F	; 79
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	ef e4       	ldi	r30, 0x4F	; 79
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	82 60       	ori	r24, 0x02	; 2
    1630:	8c 93       	st	X, r24
        set_bit(TCCR1B, WGM12);
    1632:	ae e4       	ldi	r26, 0x4E	; 78
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ee e4       	ldi	r30, 0x4E	; 78
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	88 60       	ori	r24, 0x08	; 8
    163e:	8c 93       	st	X, r24
        clr_bit(TCCR1B, WGM13);
    1640:	ae e4       	ldi	r26, 0x4E	; 78
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	ee e4       	ldi	r30, 0x4E	; 78
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	8f 7e       	andi	r24, 0xEF	; 239
    164c:	8c 93       	st	X, r24
    164e:	e7 c0       	rjmp	.+462    	; 0x181e <vTimer1_SetMode+0x43a>
        break;

    case TIMER1_PWM_FAST_MODE_10:
        // Fast PWM, 10-bit: WGM13 = 0, WGM12 = 1, WGM11 = 1, WGM10 = 1
        set_bit(TCCR1A, WGM10);
    1650:	af e4       	ldi	r26, 0x4F	; 79
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	ef e4       	ldi	r30, 0x4F	; 79
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	81 60       	ori	r24, 0x01	; 1
    165c:	8c 93       	st	X, r24
        set_bit(TCCR1A, WGM11);
    165e:	af e4       	ldi	r26, 0x4F	; 79
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	ef e4       	ldi	r30, 0x4F	; 79
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	82 60       	ori	r24, 0x02	; 2
    166a:	8c 93       	st	X, r24
        set_bit(TCCR1B, WGM12);
    166c:	ae e4       	ldi	r26, 0x4E	; 78
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	ee e4       	ldi	r30, 0x4E	; 78
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	88 60       	ori	r24, 0x08	; 8
    1678:	8c 93       	st	X, r24
        clr_bit(TCCR1B, WGM13);
    167a:	ae e4       	ldi	r26, 0x4E	; 78
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	ee e4       	ldi	r30, 0x4E	; 78
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	8f 7e       	andi	r24, 0xEF	; 239
    1686:	8c 93       	st	X, r24
    1688:	ca c0       	rjmp	.+404    	; 0x181e <vTimer1_SetMode+0x43a>
        break;

    case TIMER1_PWM_PHASE_FREQ_CORRECT_ICR_IS_TOP:
        // Phase Frequency Correct PWM, ICR as top: WGM13 = 1, WGM12 = 0, WGM11 = 0, WGM10 = 0
        clr_bit(TCCR1A, WGM10);
    168a:	af e4       	ldi	r26, 0x4F	; 79
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	ef e4       	ldi	r30, 0x4F	; 79
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	8e 7f       	andi	r24, 0xFE	; 254
    1696:	8c 93       	st	X, r24
        clr_bit(TCCR1A, WGM11);
    1698:	af e4       	ldi	r26, 0x4F	; 79
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	ef e4       	ldi	r30, 0x4F	; 79
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	8d 7f       	andi	r24, 0xFD	; 253
    16a4:	8c 93       	st	X, r24
        clr_bit(TCCR1B, WGM12);
    16a6:	ae e4       	ldi	r26, 0x4E	; 78
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	ee e4       	ldi	r30, 0x4E	; 78
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	87 7f       	andi	r24, 0xF7	; 247
    16b2:	8c 93       	st	X, r24
        set_bit(TCCR1B, WGM13);
    16b4:	ae e4       	ldi	r26, 0x4E	; 78
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	ee e4       	ldi	r30, 0x4E	; 78
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	80 61       	ori	r24, 0x10	; 16
    16c0:	8c 93       	st	X, r24
    16c2:	ad c0       	rjmp	.+346    	; 0x181e <vTimer1_SetMode+0x43a>
        break;

    case TIMER1_PWM_PHASE_FREQ_CORRECT_OCRA_IS_TOP:
        // Phase Frequency Correct PWM, OCRA as top: WGM13 = 1, WGM12 = 0, WGM11 = 1, WGM10 = 0
        clr_bit(TCCR1A, WGM10);
    16c4:	af e4       	ldi	r26, 0x4F	; 79
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	ef e4       	ldi	r30, 0x4F	; 79
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	8e 7f       	andi	r24, 0xFE	; 254
    16d0:	8c 93       	st	X, r24
        set_bit(TCCR1A, WGM11);
    16d2:	af e4       	ldi	r26, 0x4F	; 79
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	ef e4       	ldi	r30, 0x4F	; 79
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	82 60       	ori	r24, 0x02	; 2
    16de:	8c 93       	st	X, r24
        clr_bit(TCCR1B, WGM12);
    16e0:	ae e4       	ldi	r26, 0x4E	; 78
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	ee e4       	ldi	r30, 0x4E	; 78
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	87 7f       	andi	r24, 0xF7	; 247
    16ec:	8c 93       	st	X, r24
        set_bit(TCCR1B, WGM13);
    16ee:	ae e4       	ldi	r26, 0x4E	; 78
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	ee e4       	ldi	r30, 0x4E	; 78
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	80 61       	ori	r24, 0x10	; 16
    16fa:	8c 93       	st	X, r24
    16fc:	90 c0       	rjmp	.+288    	; 0x181e <vTimer1_SetMode+0x43a>
        break;

    case TIMER1_PWM_PHASE_CORRECT_ICR_IS_TOP:
        // Phase Correct PWM, ICR as top: WGM13 = 1, WGM12 = 0, WGM11 = 1, WGM10 = 0
        clr_bit(TCCR1A, WGM10);
    16fe:	af e4       	ldi	r26, 0x4F	; 79
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	ef e4       	ldi	r30, 0x4F	; 79
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	8e 7f       	andi	r24, 0xFE	; 254
    170a:	8c 93       	st	X, r24
        set_bit(TCCR1A, WGM11);
    170c:	af e4       	ldi	r26, 0x4F	; 79
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	ef e4       	ldi	r30, 0x4F	; 79
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	82 60       	ori	r24, 0x02	; 2
    1718:	8c 93       	st	X, r24
        clr_bit(TCCR1B, WGM12);
    171a:	ae e4       	ldi	r26, 0x4E	; 78
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	ee e4       	ldi	r30, 0x4E	; 78
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	87 7f       	andi	r24, 0xF7	; 247
    1726:	8c 93       	st	X, r24
        set_bit(TCCR1B, WGM13);
    1728:	ae e4       	ldi	r26, 0x4E	; 78
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	ee e4       	ldi	r30, 0x4E	; 78
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	80 61       	ori	r24, 0x10	; 16
    1734:	8c 93       	st	X, r24
    1736:	73 c0       	rjmp	.+230    	; 0x181e <vTimer1_SetMode+0x43a>
        break;

    case TIMER1_PWM_PHASE_CORRECT_OCRA_IS_TOP:
        // Phase Correct PWM, OCRA as top: WGM13 = 1, WGM12 = 0, WGM11 = 1, WGM10 = 1
        set_bit(TCCR1A, WGM10);
    1738:	af e4       	ldi	r26, 0x4F	; 79
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	ef e4       	ldi	r30, 0x4F	; 79
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	81 60       	ori	r24, 0x01	; 1
    1744:	8c 93       	st	X, r24
        set_bit(TCCR1A, WGM11);
    1746:	af e4       	ldi	r26, 0x4F	; 79
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	ef e4       	ldi	r30, 0x4F	; 79
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	82 60       	ori	r24, 0x02	; 2
    1752:	8c 93       	st	X, r24
        clr_bit(TCCR1B, WGM12);
    1754:	ae e4       	ldi	r26, 0x4E	; 78
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	ee e4       	ldi	r30, 0x4E	; 78
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	87 7f       	andi	r24, 0xF7	; 247
    1760:	8c 93       	st	X, r24
        set_bit(TCCR1B, WGM13);
    1762:	ae e4       	ldi	r26, 0x4E	; 78
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	ee e4       	ldi	r30, 0x4E	; 78
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	80 61       	ori	r24, 0x10	; 16
    176e:	8c 93       	st	X, r24
    1770:	56 c0       	rjmp	.+172    	; 0x181e <vTimer1_SetMode+0x43a>
        break;

    case TIMER1_CTC_MODE_ICR_IS_TOP:
        // CTC with ICR as top: WGM13 = 1, WGM12 = 1, WGM11 = 0, WGM10 = 0
        clr_bit(TCCR1A, WGM10);
    1772:	af e4       	ldi	r26, 0x4F	; 79
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	ef e4       	ldi	r30, 0x4F	; 79
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	8e 7f       	andi	r24, 0xFE	; 254
    177e:	8c 93       	st	X, r24
        clr_bit(TCCR1A, WGM11);
    1780:	af e4       	ldi	r26, 0x4F	; 79
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	ef e4       	ldi	r30, 0x4F	; 79
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	8d 7f       	andi	r24, 0xFD	; 253
    178c:	8c 93       	st	X, r24
        set_bit(TCCR1B, WGM12);
    178e:	ae e4       	ldi	r26, 0x4E	; 78
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	ee e4       	ldi	r30, 0x4E	; 78
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	88 60       	ori	r24, 0x08	; 8
    179a:	8c 93       	st	X, r24
        set_bit(TCCR1B, WGM13);
    179c:	ae e4       	ldi	r26, 0x4E	; 78
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	ee e4       	ldi	r30, 0x4E	; 78
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	80 61       	ori	r24, 0x10	; 16
    17a8:	8c 93       	st	X, r24
    17aa:	39 c0       	rjmp	.+114    	; 0x181e <vTimer1_SetMode+0x43a>
        break;

    case TIMER1_PWM_FAST_MODE_ICR_IS_TOP:
        // Fast PWM, ICR as top: WGM13 = 1, WGM12 = 1, WGM11 = 0, WGM10 = 1
        set_bit(TCCR1A, WGM10);
    17ac:	af e4       	ldi	r26, 0x4F	; 79
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	ef e4       	ldi	r30, 0x4F	; 79
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	81 60       	ori	r24, 0x01	; 1
    17b8:	8c 93       	st	X, r24
        clr_bit(TCCR1A, WGM11);
    17ba:	af e4       	ldi	r26, 0x4F	; 79
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	ef e4       	ldi	r30, 0x4F	; 79
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	8d 7f       	andi	r24, 0xFD	; 253
    17c6:	8c 93       	st	X, r24
        set_bit(TCCR1B, WGM12);
    17c8:	ae e4       	ldi	r26, 0x4E	; 78
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	ee e4       	ldi	r30, 0x4E	; 78
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	88 60       	ori	r24, 0x08	; 8
    17d4:	8c 93       	st	X, r24
        set_bit(TCCR1B, WGM13);
    17d6:	ae e4       	ldi	r26, 0x4E	; 78
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	ee e4       	ldi	r30, 0x4E	; 78
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	80 61       	ori	r24, 0x10	; 16
    17e2:	8c 93       	st	X, r24
    17e4:	1c c0       	rjmp	.+56     	; 0x181e <vTimer1_SetMode+0x43a>
        break;

    case TIMER1_PWM_FAST_MODE_OCRA_IS_TOP:
        // Fast PWM, OCRA as top: WGM13 = 1, WGM12 = 1, WGM11 = 1, WGM10 = 0
        clr_bit(TCCR1A, WGM10);
    17e6:	af e4       	ldi	r26, 0x4F	; 79
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	ef e4       	ldi	r30, 0x4F	; 79
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	8e 7f       	andi	r24, 0xFE	; 254
    17f2:	8c 93       	st	X, r24
        set_bit(TCCR1A, WGM11);
    17f4:	af e4       	ldi	r26, 0x4F	; 79
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	ef e4       	ldi	r30, 0x4F	; 79
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	82 60       	ori	r24, 0x02	; 2
    1800:	8c 93       	st	X, r24
        set_bit(TCCR1B, WGM12);
    1802:	ae e4       	ldi	r26, 0x4E	; 78
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	ee e4       	ldi	r30, 0x4E	; 78
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	88 60       	ori	r24, 0x08	; 8
    180e:	8c 93       	st	X, r24
        set_bit(TCCR1B, WGM13);
    1810:	ae e4       	ldi	r26, 0x4E	; 78
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	ee e4       	ldi	r30, 0x4E	; 78
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	80 61       	ori	r24, 0x10	; 16
    181c:	8c 93       	st	X, r24

    default:
        // Invalid mode
        break;
    }
}
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <vTimer1_OC1A_SetMode>:

void vTimer1_OC1A_SetMode(u8 mode)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <vTimer1_OC1A_SetMode+0x6>
    1830:	0f 92       	push	r0
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	89 83       	std	Y+1, r24	; 0x01
    switch (mode)
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	3b 83       	std	Y+3, r19	; 0x03
    1840:	2a 83       	std	Y+2, r18	; 0x02
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	9b 81       	ldd	r25, Y+3	; 0x03
    1846:	81 30       	cpi	r24, 0x01	; 1
    1848:	91 05       	cpc	r25, r1
    184a:	21 f1       	breq	.+72     	; 0x1894 <vTimer1_OC1A_SetMode+0x6a>
    184c:	2a 81       	ldd	r18, Y+2	; 0x02
    184e:	3b 81       	ldd	r19, Y+3	; 0x03
    1850:	22 30       	cpi	r18, 0x02	; 2
    1852:	31 05       	cpc	r19, r1
    1854:	2c f4       	brge	.+10     	; 0x1860 <vTimer1_OC1A_SetMode+0x36>
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	9b 81       	ldd	r25, Y+3	; 0x03
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	61 f0       	breq	.+24     	; 0x1876 <vTimer1_OC1A_SetMode+0x4c>
    185e:	46 c0       	rjmp	.+140    	; 0x18ec <vTimer1_OC1A_SetMode+0xc2>
    1860:	2a 81       	ldd	r18, Y+2	; 0x02
    1862:	3b 81       	ldd	r19, Y+3	; 0x03
    1864:	22 30       	cpi	r18, 0x02	; 2
    1866:	31 05       	cpc	r19, r1
    1868:	21 f1       	breq	.+72     	; 0x18b2 <vTimer1_OC1A_SetMode+0x88>
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	9b 81       	ldd	r25, Y+3	; 0x03
    186e:	83 30       	cpi	r24, 0x03	; 3
    1870:	91 05       	cpc	r25, r1
    1872:	71 f1       	breq	.+92     	; 0x18d0 <vTimer1_OC1A_SetMode+0xa6>
    1874:	3b c0       	rjmp	.+118    	; 0x18ec <vTimer1_OC1A_SetMode+0xc2>
    {
    case TIMER_OC_DISCONNECTED:
        clr_bit(TCCR1A, COM1A0);
    1876:	af e4       	ldi	r26, 0x4F	; 79
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	ef e4       	ldi	r30, 0x4F	; 79
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8f 7b       	andi	r24, 0xBF	; 191
    1882:	8c 93       	st	X, r24
        clr_bit(TCCR1A, COM1A1);
    1884:	af e4       	ldi	r26, 0x4F	; 79
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	ef e4       	ldi	r30, 0x4F	; 79
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	8f 77       	andi	r24, 0x7F	; 127
    1890:	8c 93       	st	X, r24
    1892:	2c c0       	rjmp	.+88     	; 0x18ec <vTimer1_OC1A_SetMode+0xc2>
        break;

    case TIMER_OC_TOGGLE:
        set_bit(TCCR1A, COM1A0);
    1894:	af e4       	ldi	r26, 0x4F	; 79
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	ef e4       	ldi	r30, 0x4F	; 79
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	80 64       	ori	r24, 0x40	; 64
    18a0:	8c 93       	st	X, r24
        clr_bit(TCCR1A, COM1A1);
    18a2:	af e4       	ldi	r26, 0x4F	; 79
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	ef e4       	ldi	r30, 0x4F	; 79
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	8f 77       	andi	r24, 0x7F	; 127
    18ae:	8c 93       	st	X, r24
    18b0:	1d c0       	rjmp	.+58     	; 0x18ec <vTimer1_OC1A_SetMode+0xc2>
        break;

    case TIMER_OC_NON_INVERTING:
        clr_bit(TCCR1A, COM1A0);
    18b2:	af e4       	ldi	r26, 0x4F	; 79
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	ef e4       	ldi	r30, 0x4F	; 79
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	8f 7b       	andi	r24, 0xBF	; 191
    18be:	8c 93       	st	X, r24
        set_bit(TCCR1A, COM1A1);
    18c0:	af e4       	ldi	r26, 0x4F	; 79
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	ef e4       	ldi	r30, 0x4F	; 79
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	80 68       	ori	r24, 0x80	; 128
    18cc:	8c 93       	st	X, r24
    18ce:	0e c0       	rjmp	.+28     	; 0x18ec <vTimer1_OC1A_SetMode+0xc2>
        break;

    case TIMER_OC_INVERTING:
        set_bit(TCCR1A, COM1A0);
    18d0:	af e4       	ldi	r26, 0x4F	; 79
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	ef e4       	ldi	r30, 0x4F	; 79
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	80 64       	ori	r24, 0x40	; 64
    18dc:	8c 93       	st	X, r24
        set_bit(TCCR1A, COM1A1);
    18de:	af e4       	ldi	r26, 0x4F	; 79
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	ef e4       	ldi	r30, 0x4F	; 79
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	80 68       	ori	r24, 0x80	; 128
    18ea:	8c 93       	st	X, r24

    default:
        /*error handling*/
        break;
    }
}
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <vTimer1_OC1B_SetMode>:

void vTimer1_OC1B_SetMode(u8 mode)
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <vTimer1_OC1B_SetMode+0x6>
    18fe:	0f 92       	push	r0
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	89 83       	std	Y+1, r24	; 0x01
    switch (mode)
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	3b 83       	std	Y+3, r19	; 0x03
    190e:	2a 83       	std	Y+2, r18	; 0x02
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	9b 81       	ldd	r25, Y+3	; 0x03
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	91 05       	cpc	r25, r1
    1918:	21 f1       	breq	.+72     	; 0x1962 <vTimer1_OC1B_SetMode+0x6a>
    191a:	2a 81       	ldd	r18, Y+2	; 0x02
    191c:	3b 81       	ldd	r19, Y+3	; 0x03
    191e:	22 30       	cpi	r18, 0x02	; 2
    1920:	31 05       	cpc	r19, r1
    1922:	2c f4       	brge	.+10     	; 0x192e <vTimer1_OC1B_SetMode+0x36>
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	9b 81       	ldd	r25, Y+3	; 0x03
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	61 f0       	breq	.+24     	; 0x1944 <vTimer1_OC1B_SetMode+0x4c>
    192c:	46 c0       	rjmp	.+140    	; 0x19ba <vTimer1_OC1B_SetMode+0xc2>
    192e:	2a 81       	ldd	r18, Y+2	; 0x02
    1930:	3b 81       	ldd	r19, Y+3	; 0x03
    1932:	22 30       	cpi	r18, 0x02	; 2
    1934:	31 05       	cpc	r19, r1
    1936:	21 f1       	breq	.+72     	; 0x1980 <vTimer1_OC1B_SetMode+0x88>
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	9b 81       	ldd	r25, Y+3	; 0x03
    193c:	83 30       	cpi	r24, 0x03	; 3
    193e:	91 05       	cpc	r25, r1
    1940:	71 f1       	breq	.+92     	; 0x199e <vTimer1_OC1B_SetMode+0xa6>
    1942:	3b c0       	rjmp	.+118    	; 0x19ba <vTimer1_OC1B_SetMode+0xc2>
    {
    case TIMER_OC_DISCONNECTED:
        clr_bit(TCCR1A, COM1B0);
    1944:	af e4       	ldi	r26, 0x4F	; 79
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	ef e4       	ldi	r30, 0x4F	; 79
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	8f 7e       	andi	r24, 0xEF	; 239
    1950:	8c 93       	st	X, r24
        clr_bit(TCCR1A, COM1B1);
    1952:	af e4       	ldi	r26, 0x4F	; 79
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	ef e4       	ldi	r30, 0x4F	; 79
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	8f 7d       	andi	r24, 0xDF	; 223
    195e:	8c 93       	st	X, r24
    1960:	2c c0       	rjmp	.+88     	; 0x19ba <vTimer1_OC1B_SetMode+0xc2>
        break;

    case TIMER_OC_TOGGLE:
        set_bit(TCCR1A, COM1B0);
    1962:	af e4       	ldi	r26, 0x4F	; 79
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	ef e4       	ldi	r30, 0x4F	; 79
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	80 61       	ori	r24, 0x10	; 16
    196e:	8c 93       	st	X, r24
        clr_bit(TCCR1A, COM1B1);
    1970:	af e4       	ldi	r26, 0x4F	; 79
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	ef e4       	ldi	r30, 0x4F	; 79
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	8f 7d       	andi	r24, 0xDF	; 223
    197c:	8c 93       	st	X, r24
    197e:	1d c0       	rjmp	.+58     	; 0x19ba <vTimer1_OC1B_SetMode+0xc2>
        break;

    case TIMER_OC_NON_INVERTING:
        clr_bit(TCCR1A, COM1B0);
    1980:	af e4       	ldi	r26, 0x4F	; 79
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	ef e4       	ldi	r30, 0x4F	; 79
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	8f 7e       	andi	r24, 0xEF	; 239
    198c:	8c 93       	st	X, r24
        set_bit(TCCR1A, COM1B1);
    198e:	af e4       	ldi	r26, 0x4F	; 79
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	ef e4       	ldi	r30, 0x4F	; 79
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	80 62       	ori	r24, 0x20	; 32
    199a:	8c 93       	st	X, r24
    199c:	0e c0       	rjmp	.+28     	; 0x19ba <vTimer1_OC1B_SetMode+0xc2>
        break;

    case TIMER_OC_INVERTING:
        set_bit(TCCR1A, COM1B0);
    199e:	af e4       	ldi	r26, 0x4F	; 79
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	ef e4       	ldi	r30, 0x4F	; 79
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	80 61       	ori	r24, 0x10	; 16
    19aa:	8c 93       	st	X, r24
        set_bit(TCCR1A, COM1B1);
    19ac:	af e4       	ldi	r26, 0x4F	; 79
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	ef e4       	ldi	r30, 0x4F	; 79
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	80 62       	ori	r24, 0x20	; 32
    19b8:	8c 93       	st	X, r24

    default:
        /*error handling*/
        break;
    }
}
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	08 95       	ret

000019c6 <vTimer1_SetPreLoad>:

void vTimer1_SetPreLoad(u16 value)
{
    19c6:	df 93       	push	r29
    19c8:	cf 93       	push	r28
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <vTimer1_SetPreLoad+0x6>
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	9a 83       	std	Y+2, r25	; 0x02
    19d2:	89 83       	std	Y+1, r24	; 0x01
    TCNT1 = value;
    19d4:	ec e4       	ldi	r30, 0x4C	; 76
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	9a 81       	ldd	r25, Y+2	; 0x02
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	80 83       	st	Z, r24
}
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <vTimer1_SetOCR_A_Value>:

void vTimer1_SetOCR_A_Value(u16 value)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <vTimer1_SetOCR_A_Value+0x6>
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	9a 83       	std	Y+2, r25	; 0x02
    19f6:	89 83       	std	Y+1, r24	; 0x01
    OCR1A = value;
    19f8:	ea e4       	ldi	r30, 0x4A	; 74
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1a00:	91 83       	std	Z+1, r25	; 0x01
    1a02:	80 83       	st	Z, r24
}
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <vTimer1_SetOCR_B_Value>:

void vTimer1_SetOCR_B_Value(u16 value)
{
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <vTimer1_SetOCR_B_Value+0x6>
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	9a 83       	std	Y+2, r25	; 0x02
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    OCR1B = value;
    1a1c:	e8 e4       	ldi	r30, 0x48	; 72
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	9a 81       	ldd	r25, Y+2	; 0x02
    1a24:	91 83       	std	Z+1, r25	; 0x01
    1a26:	80 83       	st	Z, r24
}
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <vTimer1_SetICR_Value>:

void vTimer1_SetICR_Value(u16 value)
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <vTimer1_SetICR_Value+0x6>
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	9a 83       	std	Y+2, r25	; 0x02
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    ICR1 = value;
    1a40:	e6 e4       	ldi	r30, 0x46	; 70
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	9a 81       	ldd	r25, Y+2	; 0x02
    1a48:	91 83       	std	Z+1, r25	; 0x01
    1a4a:	80 83       	st	Z, r24
}
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <vTimer1_OVF_InterruptEnable>:

void vTimer1_OVF_InterruptEnable(void)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    set_bit(TIMSK, TOIE1);
    1a5e:	a9 e5       	ldi	r26, 0x59	; 89
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e9 e5       	ldi	r30, 0x59	; 89
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	84 60       	ori	r24, 0x04	; 4
    1a6a:	8c 93       	st	X, r24
}
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <vTimer1_OVF_InterruptDisable>:

void vTimer1_OVF_InterruptDisable(void)
{
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    clr_bit(TIMSK, TOIE1);
    1a7a:	a9 e5       	ldi	r26, 0x59	; 89
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e9 e5       	ldi	r30, 0x59	; 89
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	8b 7f       	andi	r24, 0xFB	; 251
    1a86:	8c 93       	st	X, r24
}
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	08 95       	ret

00001a8e <vTimer1_OCM_A_InterruptEnable>:

void vTimer1_OCM_A_InterruptEnable(void)
{
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    set_bit(TIMSK, OCIE1A);
    1a96:	a9 e5       	ldi	r26, 0x59	; 89
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	e9 e5       	ldi	r30, 0x59	; 89
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	80 61       	ori	r24, 0x10	; 16
    1aa2:	8c 93       	st	X, r24
}
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <vTimer1_OCM_A_InterruptDisable>:

void vTimer1_OCM_A_InterruptDisable(void)
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    clr_bit(TIMSK, OCIE1A);
    1ab2:	a9 e5       	ldi	r26, 0x59	; 89
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e9 e5       	ldi	r30, 0x59	; 89
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	8f 7e       	andi	r24, 0xEF	; 239
    1abe:	8c 93       	st	X, r24
}
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <vTimer1_OCM_B_InterruptEnable>:

void vTimer1_OCM_B_InterruptEnable(void)
{
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    set_bit(TIMSK, OCIE1B);
    1ace:	a9 e5       	ldi	r26, 0x59	; 89
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	e9 e5       	ldi	r30, 0x59	; 89
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	88 60       	ori	r24, 0x08	; 8
    1ada:	8c 93       	st	X, r24
}
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <vTimer1_OCM_B_InterruptDisable>:

void vTimer1_OCM_B_InterruptDisable(void)
{
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    clr_bit(TIMSK, OCIE1B);
    1aea:	a9 e5       	ldi	r26, 0x59	; 89
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e9 e5       	ldi	r30, 0x59	; 89
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	87 7f       	andi	r24, 0xF7	; 247
    1af6:	8c 93       	st	X, r24
}
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <vTimer1_PrescalerSelect>:

void vTimer1_PrescalerSelect(u8 prescaler)
{
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <vTimer1_PrescalerSelect+0x6>
    1b04:	0f 92       	push	r0
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    switch (prescaler)
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	3b 83       	std	Y+3, r19	; 0x03
    1b14:	2a 83       	std	Y+2, r18	; 0x02
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1a:	83 30       	cpi	r24, 0x03	; 3
    1b1c:	91 05       	cpc	r25, r1
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <vTimer1_PrescalerSelect+0x24>
    1b20:	49 c0       	rjmp	.+146    	; 0x1bb4 <vTimer1_PrescalerSelect+0xb6>
    1b22:	2a 81       	ldd	r18, Y+2	; 0x02
    1b24:	3b 81       	ldd	r19, Y+3	; 0x03
    1b26:	24 30       	cpi	r18, 0x04	; 4
    1b28:	31 05       	cpc	r19, r1
    1b2a:	5c f4       	brge	.+22     	; 0x1b42 <vTimer1_PrescalerSelect+0x44>
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b30:	81 30       	cpi	r24, 0x01	; 1
    1b32:	91 05       	cpc	r25, r1
    1b34:	99 f0       	breq	.+38     	; 0x1b5c <vTimer1_PrescalerSelect+0x5e>
    1b36:	2a 81       	ldd	r18, Y+2	; 0x02
    1b38:	3b 81       	ldd	r19, Y+3	; 0x03
    1b3a:	22 30       	cpi	r18, 0x02	; 2
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	21 f1       	breq	.+72     	; 0x1b88 <vTimer1_PrescalerSelect+0x8a>
    1b40:	7a c0       	rjmp	.+244    	; 0x1c36 <vTimer1_PrescalerSelect+0x138>
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	9b 81       	ldd	r25, Y+3	; 0x03
    1b46:	84 30       	cpi	r24, 0x04	; 4
    1b48:	91 05       	cpc	r25, r1
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <vTimer1_PrescalerSelect+0x50>
    1b4c:	49 c0       	rjmp	.+146    	; 0x1be0 <vTimer1_PrescalerSelect+0xe2>
    1b4e:	2a 81       	ldd	r18, Y+2	; 0x02
    1b50:	3b 81       	ldd	r19, Y+3	; 0x03
    1b52:	25 30       	cpi	r18, 0x05	; 5
    1b54:	31 05       	cpc	r19, r1
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <vTimer1_PrescalerSelect+0x5c>
    1b58:	59 c0       	rjmp	.+178    	; 0x1c0c <vTimer1_PrescalerSelect+0x10e>
    1b5a:	6d c0       	rjmp	.+218    	; 0x1c36 <vTimer1_PrescalerSelect+0x138>
    {
    case TIMER_SCALER_1:
        set_bit(TCCR1B, CS10);
    1b5c:	ae e4       	ldi	r26, 0x4E	; 78
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	ee e4       	ldi	r30, 0x4E	; 78
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	81 60       	ori	r24, 0x01	; 1
    1b68:	8c 93       	st	X, r24
        clr_bit(TCCR1B, CS11);
    1b6a:	ae e4       	ldi	r26, 0x4E	; 78
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	ee e4       	ldi	r30, 0x4E	; 78
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	8d 7f       	andi	r24, 0xFD	; 253
    1b76:	8c 93       	st	X, r24
        clr_bit(TCCR1B, CS12);
    1b78:	ae e4       	ldi	r26, 0x4E	; 78
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	ee e4       	ldi	r30, 0x4E	; 78
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	8b 7f       	andi	r24, 0xFB	; 251
    1b84:	8c 93       	st	X, r24
    1b86:	57 c0       	rjmp	.+174    	; 0x1c36 <vTimer1_PrescalerSelect+0x138>
        break;
    case TIMER_SCALER_8:
        clr_bit(TCCR1B, CS10);
    1b88:	ae e4       	ldi	r26, 0x4E	; 78
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	ee e4       	ldi	r30, 0x4E	; 78
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	8e 7f       	andi	r24, 0xFE	; 254
    1b94:	8c 93       	st	X, r24
        set_bit(TCCR1B, CS11);
    1b96:	ae e4       	ldi	r26, 0x4E	; 78
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	ee e4       	ldi	r30, 0x4E	; 78
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	82 60       	ori	r24, 0x02	; 2
    1ba2:	8c 93       	st	X, r24
        clr_bit(TCCR1B, CS12);
    1ba4:	ae e4       	ldi	r26, 0x4E	; 78
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	ee e4       	ldi	r30, 0x4E	; 78
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	8b 7f       	andi	r24, 0xFB	; 251
    1bb0:	8c 93       	st	X, r24
    1bb2:	41 c0       	rjmp	.+130    	; 0x1c36 <vTimer1_PrescalerSelect+0x138>
        break;
    case TIMER_SCALER_64:
        set_bit(TCCR1B, CS10);
    1bb4:	ae e4       	ldi	r26, 0x4E	; 78
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	ee e4       	ldi	r30, 0x4E	; 78
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	81 60       	ori	r24, 0x01	; 1
    1bc0:	8c 93       	st	X, r24
        set_bit(TCCR1B, CS11);
    1bc2:	ae e4       	ldi	r26, 0x4E	; 78
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	ee e4       	ldi	r30, 0x4E	; 78
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	82 60       	ori	r24, 0x02	; 2
    1bce:	8c 93       	st	X, r24
        clr_bit(TCCR1B, CS12);
    1bd0:	ae e4       	ldi	r26, 0x4E	; 78
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	ee e4       	ldi	r30, 0x4E	; 78
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	8b 7f       	andi	r24, 0xFB	; 251
    1bdc:	8c 93       	st	X, r24
    1bde:	2b c0       	rjmp	.+86     	; 0x1c36 <vTimer1_PrescalerSelect+0x138>
        break;
    case TIMER_SCALER_256:
        clr_bit(TCCR1B, CS10);
    1be0:	ae e4       	ldi	r26, 0x4E	; 78
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	ee e4       	ldi	r30, 0x4E	; 78
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	8e 7f       	andi	r24, 0xFE	; 254
    1bec:	8c 93       	st	X, r24
        clr_bit(TCCR1B, CS11);
    1bee:	ae e4       	ldi	r26, 0x4E	; 78
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	ee e4       	ldi	r30, 0x4E	; 78
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	8d 7f       	andi	r24, 0xFD	; 253
    1bfa:	8c 93       	st	X, r24
        set_bit(TCCR1B, CS12);
    1bfc:	ae e4       	ldi	r26, 0x4E	; 78
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	ee e4       	ldi	r30, 0x4E	; 78
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	84 60       	ori	r24, 0x04	; 4
    1c08:	8c 93       	st	X, r24
    1c0a:	15 c0       	rjmp	.+42     	; 0x1c36 <vTimer1_PrescalerSelect+0x138>
        break;
    case TIMER_SCALER_1024:
        set_bit(TCCR1B, CS10);
    1c0c:	ae e4       	ldi	r26, 0x4E	; 78
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	ee e4       	ldi	r30, 0x4E	; 78
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	81 60       	ori	r24, 0x01	; 1
    1c18:	8c 93       	st	X, r24
        clr_bit(TCCR1B, CS11);
    1c1a:	ae e4       	ldi	r26, 0x4E	; 78
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	ee e4       	ldi	r30, 0x4E	; 78
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8d 7f       	andi	r24, 0xFD	; 253
    1c26:	8c 93       	st	X, r24
        set_bit(TCCR1B, CS12);
    1c28:	ae e4       	ldi	r26, 0x4E	; 78
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	ee e4       	ldi	r30, 0x4E	; 78
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	84 60       	ori	r24, 0x04	; 4
    1c34:	8c 93       	st	X, r24
        break;
    default:
        // Error handling
        break;
    }
}
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <vTIMER2_Init>:
/**********************************Timer 2**************************************/

// Timer2 Initialization
void vTIMER2_Init(void)
{
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    /*1. Select Mode*/
    vTimer2_SetMode(TIMER2_MODE);
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <vTimer2_SetMode>

    /*2- Select OC2 Pin Mode*/
    vTimer2_OC2_SetMode(TIMER2_OC2_MODE);
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <vTimer2_OC2_SetMode>

    /*3- Set Pre-load "Initial Counting Value" Value*/
    vTimer2_SetPreLoad(TIMER2_INITIAL_VALUE);
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <vTimer2_SetPreLoad>

    /*4- Set Compare Match Value*/
    vTimer2_SetOCRValue(TIMER2_OCR2_VALUE);
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <vTimer2_SetOCRValue>

    /*5- Enable/ Disable OV Interrupt*/
    vTimer2_OVF_InterruptDisable();
    1c62:	0e 94 56 0f 	call	0x1eac	; 0x1eac <vTimer2_OVF_InterruptDisable>

    /*6- Enable/ Disable OC Interrupt*/
    vTimer2_OCM_InterruptDisable();
    1c66:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <vTimer2_OCM_InterruptDisable>
}
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <vTIMER2_Start>:

// Timer2 Start
void vTIMER2_Start(void)
{
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
    vTimer2_PrescalerSelect(TIMER2_PRESCALER);
    1c78:	84 e0       	ldi	r24, 0x04	; 4
    1c7a:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <vTimer2_PrescalerSelect>
}
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <vTIMER2_Stop>:

// Timer2 Stop
void vTIMER2_Stop(void)
{
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    clr_bit(TCCR2, CS20);
    1c8c:	a5 e4       	ldi	r26, 0x45	; 69
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e5 e4       	ldi	r30, 0x45	; 69
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	8e 7f       	andi	r24, 0xFE	; 254
    1c98:	8c 93       	st	X, r24
    clr_bit(TCCR2, CS21);
    1c9a:	a5 e4       	ldi	r26, 0x45	; 69
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	e5 e4       	ldi	r30, 0x45	; 69
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	8d 7f       	andi	r24, 0xFD	; 253
    1ca6:	8c 93       	st	X, r24
    clr_bit(TCCR2, CS22);
    1ca8:	a5 e4       	ldi	r26, 0x45	; 69
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e5 e4       	ldi	r30, 0x45	; 69
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	8b 7f       	andi	r24, 0xFB	; 251
    1cb4:	8c 93       	st	X, r24
}
    1cb6:	cf 91       	pop	r28
    1cb8:	df 91       	pop	r29
    1cba:	08 95       	ret

00001cbc <vTimer2_SetPreLoad>:

// Set Timer2 Pre-load
void vTimer2_SetPreLoad(u8 value)
{
    1cbc:	df 93       	push	r29
    1cbe:	cf 93       	push	r28
    1cc0:	0f 92       	push	r0
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    TCNT2 = value;
    1cc8:	e4 e4       	ldi	r30, 0x44	; 68
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	80 83       	st	Z, r24
}
    1cd0:	0f 90       	pop	r0
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	08 95       	ret

00001cd8 <vTimer2_SetOCRValue>:

// Set Timer2 Compare Match Value
void vTimer2_SetOCRValue(u8 value)
{
    1cd8:	df 93       	push	r29
    1cda:	cf 93       	push	r28
    1cdc:	0f 92       	push	r0
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    OCR2 = value;
    1ce4:	e3 e4       	ldi	r30, 0x43	; 67
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	80 83       	st	Z, r24
}
    1cec:	0f 90       	pop	r0
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <vTimer2_SetMode>:

// Set Timer2 Mode
void vTimer2_SetMode(u8 mode)
{
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <vTimer2_SetMode+0x6>
    1cfa:	0f 92       	push	r0
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	89 83       	std	Y+1, r24	; 0x01
    switch (mode)
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	3b 83       	std	Y+3, r19	; 0x03
    1d0a:	2a 83       	std	Y+2, r18	; 0x02
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d10:	81 30       	cpi	r24, 0x01	; 1
    1d12:	91 05       	cpc	r25, r1
    1d14:	21 f1       	breq	.+72     	; 0x1d5e <vTimer2_SetMode+0x6a>
    1d16:	2a 81       	ldd	r18, Y+2	; 0x02
    1d18:	3b 81       	ldd	r19, Y+3	; 0x03
    1d1a:	22 30       	cpi	r18, 0x02	; 2
    1d1c:	31 05       	cpc	r19, r1
    1d1e:	2c f4       	brge	.+10     	; 0x1d2a <vTimer2_SetMode+0x36>
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	9b 81       	ldd	r25, Y+3	; 0x03
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	61 f0       	breq	.+24     	; 0x1d40 <vTimer2_SetMode+0x4c>
    1d28:	46 c0       	rjmp	.+140    	; 0x1db6 <vTimer2_SetMode+0xc2>
    1d2a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d2c:	3b 81       	ldd	r19, Y+3	; 0x03
    1d2e:	22 30       	cpi	r18, 0x02	; 2
    1d30:	31 05       	cpc	r19, r1
    1d32:	21 f1       	breq	.+72     	; 0x1d7c <vTimer2_SetMode+0x88>
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	9b 81       	ldd	r25, Y+3	; 0x03
    1d38:	83 30       	cpi	r24, 0x03	; 3
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	71 f1       	breq	.+92     	; 0x1d9a <vTimer2_SetMode+0xa6>
    1d3e:	3b c0       	rjmp	.+118    	; 0x1db6 <vTimer2_SetMode+0xc2>
    {
    case TIMER2_NORMAL_MODE:
        clr_bit(TCCR2, WGM20);
    1d40:	a5 e4       	ldi	r26, 0x45	; 69
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e5 e4       	ldi	r30, 0x45	; 69
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	8f 7b       	andi	r24, 0xBF	; 191
    1d4c:	8c 93       	st	X, r24
        clr_bit(TCCR2, WGM21);
    1d4e:	a5 e4       	ldi	r26, 0x45	; 69
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e5 e4       	ldi	r30, 0x45	; 69
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	87 7f       	andi	r24, 0xF7	; 247
    1d5a:	8c 93       	st	X, r24
    1d5c:	2c c0       	rjmp	.+88     	; 0x1db6 <vTimer2_SetMode+0xc2>
        break;

    case TIMER2_PWM_PHASE_CORRECT_MODE:
        set_bit(TCCR2, WGM20);
    1d5e:	a5 e4       	ldi	r26, 0x45	; 69
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	e5 e4       	ldi	r30, 0x45	; 69
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	80 64       	ori	r24, 0x40	; 64
    1d6a:	8c 93       	st	X, r24
        clr_bit(TCCR2, WGM21);
    1d6c:	a5 e4       	ldi	r26, 0x45	; 69
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e5 e4       	ldi	r30, 0x45	; 69
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	87 7f       	andi	r24, 0xF7	; 247
    1d78:	8c 93       	st	X, r24
    1d7a:	1d c0       	rjmp	.+58     	; 0x1db6 <vTimer2_SetMode+0xc2>
        break;

    case TIMER2_CTC_MODE:
        clr_bit(TCCR2, WGM20);
    1d7c:	a5 e4       	ldi	r26, 0x45	; 69
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e5 e4       	ldi	r30, 0x45	; 69
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	8f 7b       	andi	r24, 0xBF	; 191
    1d88:	8c 93       	st	X, r24
        set_bit(TCCR2, WGM21);
    1d8a:	a5 e4       	ldi	r26, 0x45	; 69
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	e5 e4       	ldi	r30, 0x45	; 69
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	88 60       	ori	r24, 0x08	; 8
    1d96:	8c 93       	st	X, r24
    1d98:	0e c0       	rjmp	.+28     	; 0x1db6 <vTimer2_SetMode+0xc2>
        break;

    case TIMER2_FASTPWM_MODE:
        set_bit(TCCR2, WGM20);
    1d9a:	a5 e4       	ldi	r26, 0x45	; 69
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e5 e4       	ldi	r30, 0x45	; 69
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	80 64       	ori	r24, 0x40	; 64
    1da6:	8c 93       	st	X, r24
        set_bit(TCCR2, WGM21);
    1da8:	a5 e4       	ldi	r26, 0x45	; 69
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e5 e4       	ldi	r30, 0x45	; 69
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	88 60       	ori	r24, 0x08	; 8
    1db4:	8c 93       	st	X, r24

    default:
        // Error handling
        break;
    }
}
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <vTimer2_OC2_SetMode>:

// Set Timer2 OC2 Mode
void vTimer2_OC2_SetMode(u8 mode)
{
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <vTimer2_OC2_SetMode+0x6>
    1dc8:	0f 92       	push	r0
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	89 83       	std	Y+1, r24	; 0x01
    switch (mode)
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	3b 83       	std	Y+3, r19	; 0x03
    1dd8:	2a 83       	std	Y+2, r18	; 0x02
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dde:	81 30       	cpi	r24, 0x01	; 1
    1de0:	91 05       	cpc	r25, r1
    1de2:	21 f1       	breq	.+72     	; 0x1e2c <vTimer2_OC2_SetMode+0x6a>
    1de4:	2a 81       	ldd	r18, Y+2	; 0x02
    1de6:	3b 81       	ldd	r19, Y+3	; 0x03
    1de8:	22 30       	cpi	r18, 0x02	; 2
    1dea:	31 05       	cpc	r19, r1
    1dec:	2c f4       	brge	.+10     	; 0x1df8 <vTimer2_OC2_SetMode+0x36>
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	9b 81       	ldd	r25, Y+3	; 0x03
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	61 f0       	breq	.+24     	; 0x1e0e <vTimer2_OC2_SetMode+0x4c>
    1df6:	46 c0       	rjmp	.+140    	; 0x1e84 <vTimer2_OC2_SetMode+0xc2>
    1df8:	2a 81       	ldd	r18, Y+2	; 0x02
    1dfa:	3b 81       	ldd	r19, Y+3	; 0x03
    1dfc:	22 30       	cpi	r18, 0x02	; 2
    1dfe:	31 05       	cpc	r19, r1
    1e00:	21 f1       	breq	.+72     	; 0x1e4a <vTimer2_OC2_SetMode+0x88>
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	9b 81       	ldd	r25, Y+3	; 0x03
    1e06:	83 30       	cpi	r24, 0x03	; 3
    1e08:	91 05       	cpc	r25, r1
    1e0a:	71 f1       	breq	.+92     	; 0x1e68 <vTimer2_OC2_SetMode+0xa6>
    1e0c:	3b c0       	rjmp	.+118    	; 0x1e84 <vTimer2_OC2_SetMode+0xc2>
    {
    case TIMER_OC_DISCONNECTED:
        clr_bit(TCCR2, COM20);
    1e0e:	a5 e4       	ldi	r26, 0x45	; 69
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e5 e4       	ldi	r30, 0x45	; 69
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	8f 7e       	andi	r24, 0xEF	; 239
    1e1a:	8c 93       	st	X, r24
        clr_bit(TCCR2, COM21);
    1e1c:	a5 e4       	ldi	r26, 0x45	; 69
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e5 e4       	ldi	r30, 0x45	; 69
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	8f 7d       	andi	r24, 0xDF	; 223
    1e28:	8c 93       	st	X, r24
    1e2a:	2c c0       	rjmp	.+88     	; 0x1e84 <vTimer2_OC2_SetMode+0xc2>
        break;

    case TIMER_OC_TOGGLE:
        set_bit(TCCR2, COM20);
    1e2c:	a5 e4       	ldi	r26, 0x45	; 69
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e5 e4       	ldi	r30, 0x45	; 69
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	80 61       	ori	r24, 0x10	; 16
    1e38:	8c 93       	st	X, r24
        clr_bit(TCCR2, COM21);
    1e3a:	a5 e4       	ldi	r26, 0x45	; 69
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e5 e4       	ldi	r30, 0x45	; 69
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	8f 7d       	andi	r24, 0xDF	; 223
    1e46:	8c 93       	st	X, r24
    1e48:	1d c0       	rjmp	.+58     	; 0x1e84 <vTimer2_OC2_SetMode+0xc2>
        break;

    case TIMER_OC_NON_INVERTING:
        clr_bit(TCCR2, COM20);
    1e4a:	a5 e4       	ldi	r26, 0x45	; 69
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e5 e4       	ldi	r30, 0x45	; 69
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	8f 7e       	andi	r24, 0xEF	; 239
    1e56:	8c 93       	st	X, r24
        set_bit(TCCR2, COM21);
    1e58:	a5 e4       	ldi	r26, 0x45	; 69
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e5 e4       	ldi	r30, 0x45	; 69
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	80 62       	ori	r24, 0x20	; 32
    1e64:	8c 93       	st	X, r24
    1e66:	0e c0       	rjmp	.+28     	; 0x1e84 <vTimer2_OC2_SetMode+0xc2>
        break;

    case TIMER_OC_INVERTING:
        set_bit(TCCR2, COM20);
    1e68:	a5 e4       	ldi	r26, 0x45	; 69
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e5 e4       	ldi	r30, 0x45	; 69
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	80 61       	ori	r24, 0x10	; 16
    1e74:	8c 93       	st	X, r24
        set_bit(TCCR2, COM21);
    1e76:	a5 e4       	ldi	r26, 0x45	; 69
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e5 e4       	ldi	r30, 0x45	; 69
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	80 62       	ori	r24, 0x20	; 32
    1e82:	8c 93       	st	X, r24

    default:
        // Error handling
        break;
    }
}
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <vTimer2_OVF_InterruptEnable>:

// Timer2 OVF Interrupt Enable
void vTimer2_OVF_InterruptEnable(void)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    set_bit(TIMSK, TOIE2);
    1e98:	a9 e5       	ldi	r26, 0x59	; 89
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e9 e5       	ldi	r30, 0x59	; 89
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	80 64       	ori	r24, 0x40	; 64
    1ea4:	8c 93       	st	X, r24
}
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	08 95       	ret

00001eac <vTimer2_OVF_InterruptDisable>:

// Timer2 OVF Interrupt Disable
void vTimer2_OVF_InterruptDisable(void)
{
    1eac:	df 93       	push	r29
    1eae:	cf 93       	push	r28
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    clr_bit(TIMSK, TOIE2);
    1eb4:	a9 e5       	ldi	r26, 0x59	; 89
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e9 e5       	ldi	r30, 0x59	; 89
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	8f 7b       	andi	r24, 0xBF	; 191
    1ec0:	8c 93       	st	X, r24
}
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <vTimer2_OCM_InterruptEnable>:

// Timer2 OCM Interrupt Enable
void vTimer2_OCM_InterruptEnable(void)
{
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    set_bit(TIMSK, OCIE2);
    1ed0:	a9 e5       	ldi	r26, 0x59	; 89
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e9 e5       	ldi	r30, 0x59	; 89
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	80 68       	ori	r24, 0x80	; 128
    1edc:	8c 93       	st	X, r24
}
    1ede:	cf 91       	pop	r28
    1ee0:	df 91       	pop	r29
    1ee2:	08 95       	ret

00001ee4 <vTimer2_OCM_InterruptDisable>:

// Timer2 OCM Interrupt Disable
void vTimer2_OCM_InterruptDisable(void)
{
    1ee4:	df 93       	push	r29
    1ee6:	cf 93       	push	r28
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    clr_bit(TIMSK, OCIE2);
    1eec:	a9 e5       	ldi	r26, 0x59	; 89
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e9 e5       	ldi	r30, 0x59	; 89
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	8f 77       	andi	r24, 0x7F	; 127
    1ef8:	8c 93       	st	X, r24
}
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <vTimer2_PrescalerSelect>:

// Set Timer2 Prescaler
void vTimer2_PrescalerSelect(u8 prescaler)
{
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <vTimer2_PrescalerSelect+0x6>
    1f06:	0f 92       	push	r0
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    switch (prescaler)
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	3b 83       	std	Y+3, r19	; 0x03
    1f16:	2a 83       	std	Y+2, r18	; 0x02
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f1c:	84 30       	cpi	r24, 0x04	; 4
    1f1e:	91 05       	cpc	r25, r1
    1f20:	09 f4       	brne	.+2      	; 0x1f24 <vTimer2_PrescalerSelect+0x24>
    1f22:	6b c0       	rjmp	.+214    	; 0x1ffa <vTimer2_PrescalerSelect+0xfa>
    1f24:	2a 81       	ldd	r18, Y+2	; 0x02
    1f26:	3b 81       	ldd	r19, Y+3	; 0x03
    1f28:	25 30       	cpi	r18, 0x05	; 5
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	8c f4       	brge	.+34     	; 0x1f50 <vTimer2_PrescalerSelect+0x50>
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	9b 81       	ldd	r25, Y+3	; 0x03
    1f32:	82 30       	cpi	r24, 0x02	; 2
    1f34:	91 05       	cpc	r25, r1
    1f36:	a9 f1       	breq	.+106    	; 0x1fa2 <vTimer2_PrescalerSelect+0xa2>
    1f38:	2a 81       	ldd	r18, Y+2	; 0x02
    1f3a:	3b 81       	ldd	r19, Y+3	; 0x03
    1f3c:	23 30       	cpi	r18, 0x03	; 3
    1f3e:	31 05       	cpc	r19, r1
    1f40:	0c f0       	brlt	.+2      	; 0x1f44 <vTimer2_PrescalerSelect+0x44>
    1f42:	45 c0       	rjmp	.+138    	; 0x1fce <vTimer2_PrescalerSelect+0xce>
    1f44:	8a 81       	ldd	r24, Y+2	; 0x02
    1f46:	9b 81       	ldd	r25, Y+3	; 0x03
    1f48:	81 30       	cpi	r24, 0x01	; 1
    1f4a:	91 05       	cpc	r25, r1
    1f4c:	a1 f0       	breq	.+40     	; 0x1f76 <vTimer2_PrescalerSelect+0x76>
    1f4e:	ac c0       	rjmp	.+344    	; 0x20a8 <vTimer2_PrescalerSelect+0x1a8>
    1f50:	2a 81       	ldd	r18, Y+2	; 0x02
    1f52:	3b 81       	ldd	r19, Y+3	; 0x03
    1f54:	26 30       	cpi	r18, 0x06	; 6
    1f56:	31 05       	cpc	r19, r1
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <vTimer2_PrescalerSelect+0x5c>
    1f5a:	7b c0       	rjmp	.+246    	; 0x2052 <vTimer2_PrescalerSelect+0x152>
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f60:	86 30       	cpi	r24, 0x06	; 6
    1f62:	91 05       	cpc	r25, r1
    1f64:	0c f4       	brge	.+2      	; 0x1f68 <vTimer2_PrescalerSelect+0x68>
    1f66:	5f c0       	rjmp	.+190    	; 0x2026 <vTimer2_PrescalerSelect+0x126>
    1f68:	2a 81       	ldd	r18, Y+2	; 0x02
    1f6a:	3b 81       	ldd	r19, Y+3	; 0x03
    1f6c:	27 30       	cpi	r18, 0x07	; 7
    1f6e:	31 05       	cpc	r19, r1
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <vTimer2_PrescalerSelect+0x74>
    1f72:	85 c0       	rjmp	.+266    	; 0x207e <vTimer2_PrescalerSelect+0x17e>
    1f74:	99 c0       	rjmp	.+306    	; 0x20a8 <vTimer2_PrescalerSelect+0x1a8>
    {
    case TIMER2_SCALER_1:
        set_bit(TCCR2, CS20);
    1f76:	a5 e4       	ldi	r26, 0x45	; 69
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e5 e4       	ldi	r30, 0x45	; 69
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	81 60       	ori	r24, 0x01	; 1
    1f82:	8c 93       	st	X, r24
        clr_bit(TCCR2, CS21);
    1f84:	a5 e4       	ldi	r26, 0x45	; 69
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e5 e4       	ldi	r30, 0x45	; 69
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	8d 7f       	andi	r24, 0xFD	; 253
    1f90:	8c 93       	st	X, r24
        clr_bit(TCCR2, CS22);
    1f92:	a5 e4       	ldi	r26, 0x45	; 69
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e5 e4       	ldi	r30, 0x45	; 69
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	8b 7f       	andi	r24, 0xFB	; 251
    1f9e:	8c 93       	st	X, r24
    1fa0:	83 c0       	rjmp	.+262    	; 0x20a8 <vTimer2_PrescalerSelect+0x1a8>
        break;
    case TIMER2_SCALER_8:
        clr_bit(TCCR2, CS20);
    1fa2:	a5 e4       	ldi	r26, 0x45	; 69
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	e5 e4       	ldi	r30, 0x45	; 69
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	8e 7f       	andi	r24, 0xFE	; 254
    1fae:	8c 93       	st	X, r24
        set_bit(TCCR2, CS21);
    1fb0:	a5 e4       	ldi	r26, 0x45	; 69
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e5 e4       	ldi	r30, 0x45	; 69
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	82 60       	ori	r24, 0x02	; 2
    1fbc:	8c 93       	st	X, r24
        clr_bit(TCCR2, CS22);
    1fbe:	a5 e4       	ldi	r26, 0x45	; 69
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e5 e4       	ldi	r30, 0x45	; 69
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	8b 7f       	andi	r24, 0xFB	; 251
    1fca:	8c 93       	st	X, r24
    1fcc:	6d c0       	rjmp	.+218    	; 0x20a8 <vTimer2_PrescalerSelect+0x1a8>
        break;
    case TIMER2_SCALER_32:
        set_bit(TCCR2, CS20);
    1fce:	a5 e4       	ldi	r26, 0x45	; 69
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e5 e4       	ldi	r30, 0x45	; 69
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	81 60       	ori	r24, 0x01	; 1
    1fda:	8c 93       	st	X, r24
        set_bit(TCCR2, CS21);
    1fdc:	a5 e4       	ldi	r26, 0x45	; 69
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e5 e4       	ldi	r30, 0x45	; 69
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	82 60       	ori	r24, 0x02	; 2
    1fe8:	8c 93       	st	X, r24
        clr_bit(TCCR2, CS22);
    1fea:	a5 e4       	ldi	r26, 0x45	; 69
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e5 e4       	ldi	r30, 0x45	; 69
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	8b 7f       	andi	r24, 0xFB	; 251
    1ff6:	8c 93       	st	X, r24
    1ff8:	57 c0       	rjmp	.+174    	; 0x20a8 <vTimer2_PrescalerSelect+0x1a8>
        break;
    case TIMER2_SCALER_64:
        clr_bit(TCCR2, CS20);
    1ffa:	a5 e4       	ldi	r26, 0x45	; 69
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	e5 e4       	ldi	r30, 0x45	; 69
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	8e 7f       	andi	r24, 0xFE	; 254
    2006:	8c 93       	st	X, r24
        clr_bit(TCCR2, CS21);
    2008:	a5 e4       	ldi	r26, 0x45	; 69
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e5 e4       	ldi	r30, 0x45	; 69
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	8d 7f       	andi	r24, 0xFD	; 253
    2014:	8c 93       	st	X, r24
        set_bit(TCCR2, CS22);
    2016:	a5 e4       	ldi	r26, 0x45	; 69
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	e5 e4       	ldi	r30, 0x45	; 69
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	84 60       	ori	r24, 0x04	; 4
    2022:	8c 93       	st	X, r24
    2024:	41 c0       	rjmp	.+130    	; 0x20a8 <vTimer2_PrescalerSelect+0x1a8>
        break;
    case TIMER2_SCALER_128:
        set_bit(TCCR2, CS20);
    2026:	a5 e4       	ldi	r26, 0x45	; 69
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e5 e4       	ldi	r30, 0x45	; 69
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	81 60       	ori	r24, 0x01	; 1
    2032:	8c 93       	st	X, r24
        clr_bit(TCCR2, CS21);
    2034:	a5 e4       	ldi	r26, 0x45	; 69
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e5 e4       	ldi	r30, 0x45	; 69
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	8d 7f       	andi	r24, 0xFD	; 253
    2040:	8c 93       	st	X, r24
        set_bit(TCCR2, CS22);
    2042:	a5 e4       	ldi	r26, 0x45	; 69
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e5 e4       	ldi	r30, 0x45	; 69
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	84 60       	ori	r24, 0x04	; 4
    204e:	8c 93       	st	X, r24
    2050:	2b c0       	rjmp	.+86     	; 0x20a8 <vTimer2_PrescalerSelect+0x1a8>
        break;
    case TIMER2_SCALER_256:
        clr_bit(TCCR2, CS20);
    2052:	a5 e4       	ldi	r26, 0x45	; 69
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e5 e4       	ldi	r30, 0x45	; 69
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	8e 7f       	andi	r24, 0xFE	; 254
    205e:	8c 93       	st	X, r24
        set_bit(TCCR2, CS21);
    2060:	a5 e4       	ldi	r26, 0x45	; 69
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e5 e4       	ldi	r30, 0x45	; 69
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	82 60       	ori	r24, 0x02	; 2
    206c:	8c 93       	st	X, r24
        set_bit(TCCR2, CS22);
    206e:	a5 e4       	ldi	r26, 0x45	; 69
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	e5 e4       	ldi	r30, 0x45	; 69
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	84 60       	ori	r24, 0x04	; 4
    207a:	8c 93       	st	X, r24
    207c:	15 c0       	rjmp	.+42     	; 0x20a8 <vTimer2_PrescalerSelect+0x1a8>
        break;
    case TIMER2_SCALER_1024:
        set_bit(TCCR2, CS20);
    207e:	a5 e4       	ldi	r26, 0x45	; 69
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e5 e4       	ldi	r30, 0x45	; 69
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	81 60       	ori	r24, 0x01	; 1
    208a:	8c 93       	st	X, r24
        set_bit(TCCR2, CS21);
    208c:	a5 e4       	ldi	r26, 0x45	; 69
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e5 e4       	ldi	r30, 0x45	; 69
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	82 60       	ori	r24, 0x02	; 2
    2098:	8c 93       	st	X, r24
        set_bit(TCCR2, CS22);
    209a:	a5 e4       	ldi	r26, 0x45	; 69
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e5 e4       	ldi	r30, 0x45	; 69
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	84 60       	ori	r24, 0x04	; 4
    20a6:	8c 93       	st	X, r24
        break;
    default:
        // Error handling
        break;
    }
}
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	08 95       	ret

000020b4 <MSPI_vMasterInit>:
#include "SPI_private.h"
#include "SPI_config.h"
#include "SPI_interface.h"

void MSPI_vMasterInit(void)
{
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
	// 1- Data Order
	set_bit(SPCR, SPCR_DORD);
    20bc:	ad e2       	ldi	r26, 0x2D	; 45
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	ed e2       	ldi	r30, 0x2D	; 45
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	80 62       	ori	r24, 0x20	; 32
    20c8:	8c 93       	st	X, r24

	// 2- Master mode
	set_bit(SPCR, SPCR_MSTR);
    20ca:	ad e2       	ldi	r26, 0x2D	; 45
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	ed e2       	ldi	r30, 0x2D	; 45
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	80 61       	ori	r24, 0x10	; 16
    20d6:	8c 93       	st	X, r24

	// 3- Polarity
	clr_bit(SPCR, SPCR_CPOL);
    20d8:	ad e2       	ldi	r26, 0x2D	; 45
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	ed e2       	ldi	r30, 0x2D	; 45
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	87 7f       	andi	r24, 0xF7	; 247
    20e4:	8c 93       	st	X, r24

	// 4- Clock Phase Select
	clr_bit(SPCR, SPCR_CPHA);
    20e6:	ad e2       	ldi	r26, 0x2D	; 45
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	ed e2       	ldi	r30, 0x2D	; 45
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	8b 7f       	andi	r24, 0xFB	; 251
    20f2:	8c 93       	st	X, r24

	// 5- Clock Frequency
	set_bit(SPCR, SPCR_SPR0);
    20f4:	ad e2       	ldi	r26, 0x2D	; 45
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	ed e2       	ldi	r30, 0x2D	; 45
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	81 60       	ori	r24, 0x01	; 1
    2100:	8c 93       	st	X, r24
	clr_bit(SPCR, SPCR_SPR1);
    2102:	ad e2       	ldi	r26, 0x2D	; 45
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	ed e2       	ldi	r30, 0x2D	; 45
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	8d 7f       	andi	r24, 0xFD	; 253
    210e:	8c 93       	st	X, r24
	clr_bit(SPSR, SPSR_SPI2X);
    2110:	ae e2       	ldi	r26, 0x2E	; 46
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	ee e2       	ldi	r30, 0x2E	; 46
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	8e 7f       	andi	r24, 0xFE	; 254
    211c:	8c 93       	st	X, r24

	// 6- Disable SPI interrupt
	clr_bit(SPCR, SPCR_SPIE);
    211e:	ad e2       	ldi	r26, 0x2D	; 45
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	ed e2       	ldi	r30, 0x2D	; 45
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	8f 77       	andi	r24, 0x7F	; 127
    212a:	8c 93       	st	X, r24

	// 7-Enable SPI
	set_bit(SPCR, SPCR_SPE);
    212c:	ad e2       	ldi	r26, 0x2D	; 45
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	ed e2       	ldi	r30, 0x2D	; 45
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	80 64       	ori	r24, 0x40	; 64
    2138:	8c 93       	st	X, r24
}
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <MSPI_vSlaveInit>:
void MSPI_vSlaveInit(void)
{
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
	// 1- Data Order
	set_bit(SPCR, SPCR_DORD);
    2148:	ad e2       	ldi	r26, 0x2D	; 45
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	ed e2       	ldi	r30, 0x2D	; 45
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	80 62       	ori	r24, 0x20	; 32
    2154:	8c 93       	st	X, r24

	// 2- Slave mode
	clr_bit(SPCR, SPCR_MSTR);
    2156:	ad e2       	ldi	r26, 0x2D	; 45
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	ed e2       	ldi	r30, 0x2D	; 45
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	8f 7e       	andi	r24, 0xEF	; 239
    2162:	8c 93       	st	X, r24

	// 3- Polarity
	clr_bit(SPCR, SPCR_CPOL);
    2164:	ad e2       	ldi	r26, 0x2D	; 45
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	ed e2       	ldi	r30, 0x2D	; 45
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	87 7f       	andi	r24, 0xF7	; 247
    2170:	8c 93       	st	X, r24

	// 4- Clock Phase Select
	clr_bit(SPCR, SPCR_CPHA);
    2172:	ad e2       	ldi	r26, 0x2D	; 45
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	ed e2       	ldi	r30, 0x2D	; 45
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	8b 7f       	andi	r24, 0xFB	; 251
    217e:	8c 93       	st	X, r24

	// 5- Clock Frequency
	set_bit(SPCR, SPCR_SPR0);
    2180:	ad e2       	ldi	r26, 0x2D	; 45
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	ed e2       	ldi	r30, 0x2D	; 45
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	81 60       	ori	r24, 0x01	; 1
    218c:	8c 93       	st	X, r24
	clr_bit(SPCR, SPCR_SPR1);
    218e:	ad e2       	ldi	r26, 0x2D	; 45
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	ed e2       	ldi	r30, 0x2D	; 45
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	8d 7f       	andi	r24, 0xFD	; 253
    219a:	8c 93       	st	X, r24
	clr_bit(SPSR, SPSR_SPI2X);
    219c:	ae e2       	ldi	r26, 0x2E	; 46
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	ee e2       	ldi	r30, 0x2E	; 46
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	8e 7f       	andi	r24, 0xFE	; 254
    21a8:	8c 93       	st	X, r24

	// 6-Disable SPI interrupt
	clr_bit(SPCR, SPCR_SPIE);
    21aa:	ad e2       	ldi	r26, 0x2D	; 45
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	ed e2       	ldi	r30, 0x2D	; 45
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	8f 77       	andi	r24, 0x7F	; 127
    21b6:	8c 93       	st	X, r24

	// 7- Enable SPI
	set_bit(SPCR, SPCR_SPE);
    21b8:	ad e2       	ldi	r26, 0x2D	; 45
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	ed e2       	ldi	r30, 0x2D	; 45
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	80 64       	ori	r24, 0x40	; 64
    21c4:	8c 93       	st	X, r24
}
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <MSPI_voidTransmit>:

void MSPI_voidTransmit(u8 Copy_u8Data)
{
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	0f 92       	push	r0
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_u8Data;
    21d8:	ef e2       	ldi	r30, 0x2F	; 47
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	80 83       	st	Z, r24
}
    21e0:	0f 90       	pop	r0
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <MSPI_voidReceive>:

void MSPI_voidReceive(u8 *Copy_pu8ReceivedData)
{
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <MSPI_voidReceive+0x6>
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	9a 83       	std	Y+2, r25	; 0x02
    21f4:	89 83       	std	Y+1, r24	; 0x01
	while (!get_bit(SPSR, SPSR_SPIF))
    21f6:	ee e2       	ldi	r30, 0x2E	; 46
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	88 23       	and	r24, r24
    21fe:	dc f7       	brge	.-10     	; 0x21f6 <MSPI_voidReceive+0xe>
		;
	*Copy_pu8ReceivedData = SPDR;
    2200:	ef e2       	ldi	r30, 0x2F	; 47
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	e9 81       	ldd	r30, Y+1	; 0x01
    2208:	fa 81       	ldd	r31, Y+2	; 0x02
    220a:	80 83       	st	Z, r24
}
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	cf 91       	pop	r28
    2212:	df 91       	pop	r29
    2214:	08 95       	ret

00002216 <MSPI_u8Transcieve>:

u8 MSPI_u8Transcieve(u8 Copy_u8Data)
{
    2216:	df 93       	push	r29
    2218:	cf 93       	push	r28
    221a:	0f 92       	push	r0
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	89 83       	std	Y+1, r24	; 0x01
	// The parameter contains the data to be sent
	SPDR = Copy_u8Data;
    2222:	ef e2       	ldi	r30, 0x2F	; 47
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	80 83       	st	Z, r24

	while (!get_bit(SPSR, SPSR_SPIF))
    222a:	ee e2       	ldi	r30, 0x2E	; 46
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	88 23       	and	r24, r24
    2232:	dc f7       	brge	.-10     	; 0x222a <MSPI_u8Transcieve+0x14>
		;
	return SPDR;
    2234:	ef e2       	ldi	r30, 0x2F	; 47
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
}
    223a:	0f 90       	pop	r0
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <MDIO_vSetPortDir>:
}
*/


void MDIO_vSetPortDir(u8 A_u8PortNo, u8 A_u8Dir)
{
    2242:	df 93       	push	r29
    2244:	cf 93       	push	r28
    2246:	00 d0       	rcall	.+0      	; 0x2248 <MDIO_vSetPortDir+0x6>
    2248:	00 d0       	rcall	.+0      	; 0x224a <MDIO_vSetPortDir+0x8>
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	89 83       	std	Y+1, r24	; 0x01
    2250:	6a 83       	std	Y+2, r22	; 0x02
		switch (A_u8PortNo)
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	3c 83       	std	Y+4, r19	; 0x04
    225a:	2b 83       	std	Y+3, r18	; 0x03
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	9c 81       	ldd	r25, Y+4	; 0x04
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	91 05       	cpc	r25, r1
    2264:	d1 f0       	breq	.+52     	; 0x229a <MDIO_vSetPortDir+0x58>
    2266:	2b 81       	ldd	r18, Y+3	; 0x03
    2268:	3c 81       	ldd	r19, Y+4	; 0x04
    226a:	22 30       	cpi	r18, 0x02	; 2
    226c:	31 05       	cpc	r19, r1
    226e:	2c f4       	brge	.+10     	; 0x227a <MDIO_vSetPortDir+0x38>
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	9c 81       	ldd	r25, Y+4	; 0x04
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	61 f0       	breq	.+24     	; 0x2290 <MDIO_vSetPortDir+0x4e>
    2278:	1e c0       	rjmp	.+60     	; 0x22b6 <MDIO_vSetPortDir+0x74>
    227a:	2b 81       	ldd	r18, Y+3	; 0x03
    227c:	3c 81       	ldd	r19, Y+4	; 0x04
    227e:	22 30       	cpi	r18, 0x02	; 2
    2280:	31 05       	cpc	r19, r1
    2282:	81 f0       	breq	.+32     	; 0x22a4 <MDIO_vSetPortDir+0x62>
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	83 30       	cpi	r24, 0x03	; 3
    228a:	91 05       	cpc	r25, r1
    228c:	81 f0       	breq	.+32     	; 0x22ae <MDIO_vSetPortDir+0x6c>
    228e:	13 c0       	rjmp	.+38     	; 0x22b6 <MDIO_vSetPortDir+0x74>
		{
			case PORT_A:
			DDRA=A_u8Dir;
    2290:	ea e3       	ldi	r30, 0x3A	; 58
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	8a 81       	ldd	r24, Y+2	; 0x02
    2296:	80 83       	st	Z, r24
    2298:	0e c0       	rjmp	.+28     	; 0x22b6 <MDIO_vSetPortDir+0x74>
			break;
			case PORT_B:
			DDRB=A_u8Dir;
    229a:	e7 e3       	ldi	r30, 0x37	; 55
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	80 83       	st	Z, r24
    22a2:	09 c0       	rjmp	.+18     	; 0x22b6 <MDIO_vSetPortDir+0x74>
			break;
			case PORT_C:
			DDRC=A_u8Dir;
    22a4:	e4 e3       	ldi	r30, 0x34	; 52
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	80 83       	st	Z, r24
    22ac:	04 c0       	rjmp	.+8      	; 0x22b6 <MDIO_vSetPortDir+0x74>
			break;
			case PORT_D:
			DDRD=A_u8Dir;
    22ae:	e1 e3       	ldi	r30, 0x31	; 49
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	8a 81       	ldd	r24, Y+2	; 0x02
    22b4:	80 83       	st	Z, r24
			break;

		}
}
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <MDIO_vSetPinDir>:
void MDIO_vSetPinDir(u8 A_u8PortNo, u8 A_u8PinNo, u8 A_u8Dir)
{
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
    22cc:	27 97       	sbiw	r28, 0x07	; 7
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	de bf       	out	0x3e, r29	; 62
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	cd bf       	out	0x3d, r28	; 61
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	6a 83       	std	Y+2, r22	; 0x02
    22dc:	4b 83       	std	Y+3, r20	; 0x03
	if (A_u8Dir==DIO_OUTPUT)
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	81 30       	cpi	r24, 0x01	; 1
    22e2:	09 f0       	breq	.+2      	; 0x22e6 <MDIO_vSetPinDir+0x22>
    22e4:	6f c0       	rjmp	.+222    	; 0x23c4 <MDIO_vSetPinDir+0x100>
	{
		switch (A_u8PortNo)
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	28 2f       	mov	r18, r24
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	3f 83       	std	Y+7, r19	; 0x07
    22ee:	2e 83       	std	Y+6, r18	; 0x06
    22f0:	8e 81       	ldd	r24, Y+6	; 0x06
    22f2:	9f 81       	ldd	r25, Y+7	; 0x07
    22f4:	81 30       	cpi	r24, 0x01	; 1
    22f6:	91 05       	cpc	r25, r1
    22f8:	49 f1       	breq	.+82     	; 0x234c <MDIO_vSetPinDir+0x88>
    22fa:	2e 81       	ldd	r18, Y+6	; 0x06
    22fc:	3f 81       	ldd	r19, Y+7	; 0x07
    22fe:	22 30       	cpi	r18, 0x02	; 2
    2300:	31 05       	cpc	r19, r1
    2302:	2c f4       	brge	.+10     	; 0x230e <MDIO_vSetPinDir+0x4a>
    2304:	8e 81       	ldd	r24, Y+6	; 0x06
    2306:	9f 81       	ldd	r25, Y+7	; 0x07
    2308:	00 97       	sbiw	r24, 0x00	; 0
    230a:	61 f0       	breq	.+24     	; 0x2324 <MDIO_vSetPinDir+0x60>
    230c:	d2 c0       	rjmp	.+420    	; 0x24b2 <MDIO_vSetPinDir+0x1ee>
    230e:	2e 81       	ldd	r18, Y+6	; 0x06
    2310:	3f 81       	ldd	r19, Y+7	; 0x07
    2312:	22 30       	cpi	r18, 0x02	; 2
    2314:	31 05       	cpc	r19, r1
    2316:	71 f1       	breq	.+92     	; 0x2374 <MDIO_vSetPinDir+0xb0>
    2318:	8e 81       	ldd	r24, Y+6	; 0x06
    231a:	9f 81       	ldd	r25, Y+7	; 0x07
    231c:	83 30       	cpi	r24, 0x03	; 3
    231e:	91 05       	cpc	r25, r1
    2320:	e9 f1       	breq	.+122    	; 0x239c <MDIO_vSetPinDir+0xd8>
    2322:	c7 c0       	rjmp	.+398    	; 0x24b2 <MDIO_vSetPinDir+0x1ee>
		{
			case PORT_A:
				set_bit(DDRA,A_u8PinNo);
    2324:	aa e3       	ldi	r26, 0x3A	; 58
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	ea e3       	ldi	r30, 0x3A	; 58
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	48 2f       	mov	r20, r24
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	02 2e       	mov	r0, r18
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <MDIO_vSetPinDir+0x7e>
    233e:	88 0f       	add	r24, r24
    2340:	99 1f       	adc	r25, r25
    2342:	0a 94       	dec	r0
    2344:	e2 f7       	brpl	.-8      	; 0x233e <MDIO_vSetPinDir+0x7a>
    2346:	84 2b       	or	r24, r20
    2348:	8c 93       	st	X, r24
    234a:	b3 c0       	rjmp	.+358    	; 0x24b2 <MDIO_vSetPinDir+0x1ee>
				break;
			case PORT_B:
				set_bit(DDRB,A_u8PinNo);
    234c:	a7 e3       	ldi	r26, 0x37	; 55
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	e7 e3       	ldi	r30, 0x37	; 55
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	48 2f       	mov	r20, r24
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	28 2f       	mov	r18, r24
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	02 2e       	mov	r0, r18
    2364:	02 c0       	rjmp	.+4      	; 0x236a <MDIO_vSetPinDir+0xa6>
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	0a 94       	dec	r0
    236c:	e2 f7       	brpl	.-8      	; 0x2366 <MDIO_vSetPinDir+0xa2>
    236e:	84 2b       	or	r24, r20
    2370:	8c 93       	st	X, r24
    2372:	9f c0       	rjmp	.+318    	; 0x24b2 <MDIO_vSetPinDir+0x1ee>
				break;
			case PORT_C:
				set_bit(DDRC,A_u8PinNo);
    2374:	a4 e3       	ldi	r26, 0x34	; 52
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	e4 e3       	ldi	r30, 0x34	; 52
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	48 2f       	mov	r20, r24
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	28 2f       	mov	r18, r24
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	02 2e       	mov	r0, r18
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <MDIO_vSetPinDir+0xce>
    238e:	88 0f       	add	r24, r24
    2390:	99 1f       	adc	r25, r25
    2392:	0a 94       	dec	r0
    2394:	e2 f7       	brpl	.-8      	; 0x238e <MDIO_vSetPinDir+0xca>
    2396:	84 2b       	or	r24, r20
    2398:	8c 93       	st	X, r24
    239a:	8b c0       	rjmp	.+278    	; 0x24b2 <MDIO_vSetPinDir+0x1ee>
				break;
			case PORT_D:
				set_bit(DDRD,A_u8PinNo);
    239c:	a1 e3       	ldi	r26, 0x31	; 49
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	e1 e3       	ldi	r30, 0x31	; 49
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	48 2f       	mov	r20, r24
    23a8:	8a 81       	ldd	r24, Y+2	; 0x02
    23aa:	28 2f       	mov	r18, r24
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	02 2e       	mov	r0, r18
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <MDIO_vSetPinDir+0xf6>
    23b6:	88 0f       	add	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	0a 94       	dec	r0
    23bc:	e2 f7       	brpl	.-8      	; 0x23b6 <MDIO_vSetPinDir+0xf2>
    23be:	84 2b       	or	r24, r20
    23c0:	8c 93       	st	X, r24
    23c2:	77 c0       	rjmp	.+238    	; 0x24b2 <MDIO_vSetPinDir+0x1ee>
				break;

		}
	}
	else if (A_u8Dir ==DIO_INPUT)
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	88 23       	and	r24, r24
    23c8:	09 f0       	breq	.+2      	; 0x23cc <MDIO_vSetPinDir+0x108>
    23ca:	73 c0       	rjmp	.+230    	; 0x24b2 <MDIO_vSetPinDir+0x1ee>
	{
		switch (A_u8PortNo)
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	28 2f       	mov	r18, r24
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	3d 83       	std	Y+5, r19	; 0x05
    23d4:	2c 83       	std	Y+4, r18	; 0x04
    23d6:	8c 81       	ldd	r24, Y+4	; 0x04
    23d8:	9d 81       	ldd	r25, Y+5	; 0x05
    23da:	81 30       	cpi	r24, 0x01	; 1
    23dc:	91 05       	cpc	r25, r1
    23de:	59 f1       	breq	.+86     	; 0x2436 <MDIO_vSetPinDir+0x172>
    23e0:	2c 81       	ldd	r18, Y+4	; 0x04
    23e2:	3d 81       	ldd	r19, Y+5	; 0x05
    23e4:	22 30       	cpi	r18, 0x02	; 2
    23e6:	31 05       	cpc	r19, r1
    23e8:	2c f4       	brge	.+10     	; 0x23f4 <MDIO_vSetPinDir+0x130>
    23ea:	8c 81       	ldd	r24, Y+4	; 0x04
    23ec:	9d 81       	ldd	r25, Y+5	; 0x05
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	69 f0       	breq	.+26     	; 0x240c <MDIO_vSetPinDir+0x148>
    23f2:	5f c0       	rjmp	.+190    	; 0x24b2 <MDIO_vSetPinDir+0x1ee>
    23f4:	2c 81       	ldd	r18, Y+4	; 0x04
    23f6:	3d 81       	ldd	r19, Y+5	; 0x05
    23f8:	22 30       	cpi	r18, 0x02	; 2
    23fa:	31 05       	cpc	r19, r1
    23fc:	89 f1       	breq	.+98     	; 0x2460 <MDIO_vSetPinDir+0x19c>
    23fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2400:	9d 81       	ldd	r25, Y+5	; 0x05
    2402:	83 30       	cpi	r24, 0x03	; 3
    2404:	91 05       	cpc	r25, r1
    2406:	09 f4       	brne	.+2      	; 0x240a <MDIO_vSetPinDir+0x146>
    2408:	40 c0       	rjmp	.+128    	; 0x248a <MDIO_vSetPinDir+0x1c6>
    240a:	53 c0       	rjmp	.+166    	; 0x24b2 <MDIO_vSetPinDir+0x1ee>
		{
			case PORT_A:
			clr_bit(DDRA,A_u8PinNo);
    240c:	aa e3       	ldi	r26, 0x3A	; 58
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	ea e3       	ldi	r30, 0x3A	; 58
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	48 2f       	mov	r20, r24
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	28 2f       	mov	r18, r24
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	02 2e       	mov	r0, r18
    2424:	02 c0       	rjmp	.+4      	; 0x242a <MDIO_vSetPinDir+0x166>
    2426:	88 0f       	add	r24, r24
    2428:	99 1f       	adc	r25, r25
    242a:	0a 94       	dec	r0
    242c:	e2 f7       	brpl	.-8      	; 0x2426 <MDIO_vSetPinDir+0x162>
    242e:	80 95       	com	r24
    2430:	84 23       	and	r24, r20
    2432:	8c 93       	st	X, r24
    2434:	3e c0       	rjmp	.+124    	; 0x24b2 <MDIO_vSetPinDir+0x1ee>
			break;
			case PORT_B:
			clr_bit(DDRB,A_u8PinNo);
    2436:	a7 e3       	ldi	r26, 0x37	; 55
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e7 e3       	ldi	r30, 0x37	; 55
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	48 2f       	mov	r20, r24
    2442:	8a 81       	ldd	r24, Y+2	; 0x02
    2444:	28 2f       	mov	r18, r24
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	02 2e       	mov	r0, r18
    244e:	02 c0       	rjmp	.+4      	; 0x2454 <MDIO_vSetPinDir+0x190>
    2450:	88 0f       	add	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	0a 94       	dec	r0
    2456:	e2 f7       	brpl	.-8      	; 0x2450 <MDIO_vSetPinDir+0x18c>
    2458:	80 95       	com	r24
    245a:	84 23       	and	r24, r20
    245c:	8c 93       	st	X, r24
    245e:	29 c0       	rjmp	.+82     	; 0x24b2 <MDIO_vSetPinDir+0x1ee>
			break;
			case PORT_C:
			clr_bit(DDRC,A_u8PinNo);
    2460:	a4 e3       	ldi	r26, 0x34	; 52
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	e4 e3       	ldi	r30, 0x34	; 52
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	48 2f       	mov	r20, r24
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	28 2f       	mov	r18, r24
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	02 2e       	mov	r0, r18
    2478:	02 c0       	rjmp	.+4      	; 0x247e <MDIO_vSetPinDir+0x1ba>
    247a:	88 0f       	add	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	0a 94       	dec	r0
    2480:	e2 f7       	brpl	.-8      	; 0x247a <MDIO_vSetPinDir+0x1b6>
    2482:	80 95       	com	r24
    2484:	84 23       	and	r24, r20
    2486:	8c 93       	st	X, r24
    2488:	14 c0       	rjmp	.+40     	; 0x24b2 <MDIO_vSetPinDir+0x1ee>
			break;
			case PORT_D:
			clr_bit(DDRD,A_u8PinNo);
    248a:	a1 e3       	ldi	r26, 0x31	; 49
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e1 e3       	ldi	r30, 0x31	; 49
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	48 2f       	mov	r20, r24
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	28 2f       	mov	r18, r24
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	02 2e       	mov	r0, r18
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <MDIO_vSetPinDir+0x1e4>
    24a4:	88 0f       	add	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	0a 94       	dec	r0
    24aa:	e2 f7       	brpl	.-8      	; 0x24a4 <MDIO_vSetPinDir+0x1e0>
    24ac:	80 95       	com	r24
    24ae:	84 23       	and	r24, r20
    24b0:	8c 93       	st	X, r24
			break;

		}
	}
}
    24b2:	27 96       	adiw	r28, 0x07	; 7
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <MDIO_vSetPinVal>:


void MDIO_vSetPinVal(u8 A_u8port,u8 A_u8pin,u8 A_u8value)
{
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <MDIO_vSetPinVal+0x6>
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <MDIO_vSetPinVal+0x8>
    24cc:	0f 92       	push	r0
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	89 83       	std	Y+1, r24	; 0x01
    24d4:	6a 83       	std	Y+2, r22	; 0x02
    24d6:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8port)
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	28 2f       	mov	r18, r24
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	3d 83       	std	Y+5, r19	; 0x05
    24e0:	2c 83       	std	Y+4, r18	; 0x04
    24e2:	8c 81       	ldd	r24, Y+4	; 0x04
    24e4:	9d 81       	ldd	r25, Y+5	; 0x05
    24e6:	81 30       	cpi	r24, 0x01	; 1
    24e8:	91 05       	cpc	r25, r1
    24ea:	09 f4       	brne	.+2      	; 0x24ee <MDIO_vSetPinVal+0x2a>
    24ec:	47 c0       	rjmp	.+142    	; 0x257c <MDIO_vSetPinVal+0xb8>
    24ee:	2c 81       	ldd	r18, Y+4	; 0x04
    24f0:	3d 81       	ldd	r19, Y+5	; 0x05
    24f2:	22 30       	cpi	r18, 0x02	; 2
    24f4:	31 05       	cpc	r19, r1
    24f6:	2c f4       	brge	.+10     	; 0x2502 <MDIO_vSetPinVal+0x3e>
    24f8:	8c 81       	ldd	r24, Y+4	; 0x04
    24fa:	9d 81       	ldd	r25, Y+5	; 0x05
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	71 f0       	breq	.+28     	; 0x251c <MDIO_vSetPinVal+0x58>
    2500:	cb c0       	rjmp	.+406    	; 0x2698 <MDIO_vSetPinVal+0x1d4>
    2502:	2c 81       	ldd	r18, Y+4	; 0x04
    2504:	3d 81       	ldd	r19, Y+5	; 0x05
    2506:	22 30       	cpi	r18, 0x02	; 2
    2508:	31 05       	cpc	r19, r1
    250a:	09 f4       	brne	.+2      	; 0x250e <MDIO_vSetPinVal+0x4a>
    250c:	67 c0       	rjmp	.+206    	; 0x25dc <MDIO_vSetPinVal+0x118>
    250e:	8c 81       	ldd	r24, Y+4	; 0x04
    2510:	9d 81       	ldd	r25, Y+5	; 0x05
    2512:	83 30       	cpi	r24, 0x03	; 3
    2514:	91 05       	cpc	r25, r1
    2516:	09 f4       	brne	.+2      	; 0x251a <MDIO_vSetPinVal+0x56>
    2518:	91 c0       	rjmp	.+290    	; 0x263c <MDIO_vSetPinVal+0x178>
    251a:	be c0       	rjmp	.+380    	; 0x2698 <MDIO_vSetPinVal+0x1d4>
	{
		case PORT_A:
			{
				if (A_u8value == DIO_HIGH)
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	81 30       	cpi	r24, 0x01	; 1
    2520:	a1 f4       	brne	.+40     	; 0x254a <MDIO_vSetPinVal+0x86>
				{
					set_bit(PORTA,A_u8pin);
    2522:	ab e3       	ldi	r26, 0x3B	; 59
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	eb e3       	ldi	r30, 0x3B	; 59
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	48 2f       	mov	r20, r24
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	02 2e       	mov	r0, r18
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <MDIO_vSetPinVal+0x7c>
    253c:	88 0f       	add	r24, r24
    253e:	99 1f       	adc	r25, r25
    2540:	0a 94       	dec	r0
    2542:	e2 f7       	brpl	.-8      	; 0x253c <MDIO_vSetPinVal+0x78>
    2544:	84 2b       	or	r24, r20
    2546:	8c 93       	st	X, r24
    2548:	a7 c0       	rjmp	.+334    	; 0x2698 <MDIO_vSetPinVal+0x1d4>
				}
				else if (A_u8value == DIO_LOW)
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	88 23       	and	r24, r24
    254e:	09 f0       	breq	.+2      	; 0x2552 <MDIO_vSetPinVal+0x8e>
    2550:	a3 c0       	rjmp	.+326    	; 0x2698 <MDIO_vSetPinVal+0x1d4>
				{
					clr_bit(PORTA,A_u8pin);
    2552:	ab e3       	ldi	r26, 0x3B	; 59
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	eb e3       	ldi	r30, 0x3B	; 59
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	48 2f       	mov	r20, r24
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	02 2e       	mov	r0, r18
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <MDIO_vSetPinVal+0xac>
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	0a 94       	dec	r0
    2572:	e2 f7       	brpl	.-8      	; 0x256c <MDIO_vSetPinVal+0xa8>
    2574:	80 95       	com	r24
    2576:	84 23       	and	r24, r20
    2578:	8c 93       	st	X, r24
    257a:	8e c0       	rjmp	.+284    	; 0x2698 <MDIO_vSetPinVal+0x1d4>
				}
				break;
			}
		case PORT_B:
			{
				if (A_u8value == DIO_HIGH)
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	81 30       	cpi	r24, 0x01	; 1
    2580:	a1 f4       	brne	.+40     	; 0x25aa <MDIO_vSetPinVal+0xe6>
				{
					set_bit(PORTB,A_u8pin);
    2582:	a8 e3       	ldi	r26, 0x38	; 56
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	e8 e3       	ldi	r30, 0x38	; 56
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	48 2f       	mov	r20, r24
    258e:	8a 81       	ldd	r24, Y+2	; 0x02
    2590:	28 2f       	mov	r18, r24
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	02 2e       	mov	r0, r18
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <MDIO_vSetPinVal+0xdc>
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	0a 94       	dec	r0
    25a2:	e2 f7       	brpl	.-8      	; 0x259c <MDIO_vSetPinVal+0xd8>
    25a4:	84 2b       	or	r24, r20
    25a6:	8c 93       	st	X, r24
    25a8:	77 c0       	rjmp	.+238    	; 0x2698 <MDIO_vSetPinVal+0x1d4>
				}
				else if (A_u8value == DIO_LOW)
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	88 23       	and	r24, r24
    25ae:	09 f0       	breq	.+2      	; 0x25b2 <MDIO_vSetPinVal+0xee>
    25b0:	73 c0       	rjmp	.+230    	; 0x2698 <MDIO_vSetPinVal+0x1d4>
				{
					clr_bit(PORTB,A_u8pin);
    25b2:	a8 e3       	ldi	r26, 0x38	; 56
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e8 e3       	ldi	r30, 0x38	; 56
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	48 2f       	mov	r20, r24
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	02 2e       	mov	r0, r18
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <MDIO_vSetPinVal+0x10c>
    25cc:	88 0f       	add	r24, r24
    25ce:	99 1f       	adc	r25, r25
    25d0:	0a 94       	dec	r0
    25d2:	e2 f7       	brpl	.-8      	; 0x25cc <MDIO_vSetPinVal+0x108>
    25d4:	80 95       	com	r24
    25d6:	84 23       	and	r24, r20
    25d8:	8c 93       	st	X, r24
    25da:	5e c0       	rjmp	.+188    	; 0x2698 <MDIO_vSetPinVal+0x1d4>
				}
				break;
			}
		case PORT_C:
			{
				if (A_u8value == DIO_HIGH)
    25dc:	8b 81       	ldd	r24, Y+3	; 0x03
    25de:	81 30       	cpi	r24, 0x01	; 1
    25e0:	a1 f4       	brne	.+40     	; 0x260a <MDIO_vSetPinVal+0x146>
				{
					set_bit(PORTC,A_u8pin);
    25e2:	a5 e3       	ldi	r26, 0x35	; 53
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e5 e3       	ldi	r30, 0x35	; 53
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	48 2f       	mov	r20, r24
    25ee:	8a 81       	ldd	r24, Y+2	; 0x02
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	02 2e       	mov	r0, r18
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <MDIO_vSetPinVal+0x13c>
    25fc:	88 0f       	add	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	0a 94       	dec	r0
    2602:	e2 f7       	brpl	.-8      	; 0x25fc <MDIO_vSetPinVal+0x138>
    2604:	84 2b       	or	r24, r20
    2606:	8c 93       	st	X, r24
    2608:	47 c0       	rjmp	.+142    	; 0x2698 <MDIO_vSetPinVal+0x1d4>
				}
				else if (A_u8value == DIO_LOW)
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	88 23       	and	r24, r24
    260e:	09 f0       	breq	.+2      	; 0x2612 <MDIO_vSetPinVal+0x14e>
    2610:	43 c0       	rjmp	.+134    	; 0x2698 <MDIO_vSetPinVal+0x1d4>
				{
					clr_bit(PORTC,A_u8pin);
    2612:	a5 e3       	ldi	r26, 0x35	; 53
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e5 e3       	ldi	r30, 0x35	; 53
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	48 2f       	mov	r20, r24
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	28 2f       	mov	r18, r24
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	02 2e       	mov	r0, r18
    262a:	02 c0       	rjmp	.+4      	; 0x2630 <MDIO_vSetPinVal+0x16c>
    262c:	88 0f       	add	r24, r24
    262e:	99 1f       	adc	r25, r25
    2630:	0a 94       	dec	r0
    2632:	e2 f7       	brpl	.-8      	; 0x262c <MDIO_vSetPinVal+0x168>
    2634:	80 95       	com	r24
    2636:	84 23       	and	r24, r20
    2638:	8c 93       	st	X, r24
    263a:	2e c0       	rjmp	.+92     	; 0x2698 <MDIO_vSetPinVal+0x1d4>
				}
				break;
			}
		case PORT_D:
			{
				if (A_u8value == DIO_HIGH)
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	81 30       	cpi	r24, 0x01	; 1
    2640:	a1 f4       	brne	.+40     	; 0x266a <MDIO_vSetPinVal+0x1a6>
				{
					set_bit(PORTD,A_u8pin);
    2642:	a2 e3       	ldi	r26, 0x32	; 50
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	e2 e3       	ldi	r30, 0x32	; 50
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	80 81       	ld	r24, Z
    264c:	48 2f       	mov	r20, r24
    264e:	8a 81       	ldd	r24, Y+2	; 0x02
    2650:	28 2f       	mov	r18, r24
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	02 2e       	mov	r0, r18
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <MDIO_vSetPinVal+0x19c>
    265c:	88 0f       	add	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	0a 94       	dec	r0
    2662:	e2 f7       	brpl	.-8      	; 0x265c <MDIO_vSetPinVal+0x198>
    2664:	84 2b       	or	r24, r20
    2666:	8c 93       	st	X, r24
    2668:	17 c0       	rjmp	.+46     	; 0x2698 <MDIO_vSetPinVal+0x1d4>
				}
				else if (A_u8value == DIO_LOW)
    266a:	8b 81       	ldd	r24, Y+3	; 0x03
    266c:	88 23       	and	r24, r24
    266e:	a1 f4       	brne	.+40     	; 0x2698 <MDIO_vSetPinVal+0x1d4>
				{
					clr_bit(PORTD,A_u8pin);
    2670:	a2 e3       	ldi	r26, 0x32	; 50
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	e2 e3       	ldi	r30, 0x32	; 50
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	48 2f       	mov	r20, r24
    267c:	8a 81       	ldd	r24, Y+2	; 0x02
    267e:	28 2f       	mov	r18, r24
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	02 2e       	mov	r0, r18
    2688:	02 c0       	rjmp	.+4      	; 0x268e <MDIO_vSetPinVal+0x1ca>
    268a:	88 0f       	add	r24, r24
    268c:	99 1f       	adc	r25, r25
    268e:	0a 94       	dec	r0
    2690:	e2 f7       	brpl	.-8      	; 0x268a <MDIO_vSetPinVal+0x1c6>
    2692:	80 95       	com	r24
    2694:	84 23       	and	r24, r20
    2696:	8c 93       	st	X, r24
				}
				break;
			}
	}
}
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <MDIO_u8ReadPin>:

u8 MDIO_u8ReadPin(u8 A_u8port,u8 A_u8pin)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	00 d0       	rcall	.+0      	; 0x26ae <MDIO_u8ReadPin+0x6>
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <MDIO_u8ReadPin+0x8>
    26b0:	0f 92       	push	r0
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
    26b6:	8a 83       	std	Y+2, r24	; 0x02
    26b8:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8ReturnVal ;
	switch (A_u8port)
    26ba:	8a 81       	ldd	r24, Y+2	; 0x02
    26bc:	28 2f       	mov	r18, r24
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	3d 83       	std	Y+5, r19	; 0x05
    26c2:	2c 83       	std	Y+4, r18	; 0x04
    26c4:	4c 81       	ldd	r20, Y+4	; 0x04
    26c6:	5d 81       	ldd	r21, Y+5	; 0x05
    26c8:	41 30       	cpi	r20, 0x01	; 1
    26ca:	51 05       	cpc	r21, r1
    26cc:	41 f1       	breq	.+80     	; 0x271e <MDIO_u8ReadPin+0x76>
    26ce:	8c 81       	ldd	r24, Y+4	; 0x04
    26d0:	9d 81       	ldd	r25, Y+5	; 0x05
    26d2:	82 30       	cpi	r24, 0x02	; 2
    26d4:	91 05       	cpc	r25, r1
    26d6:	34 f4       	brge	.+12     	; 0x26e4 <MDIO_u8ReadPin+0x3c>
    26d8:	2c 81       	ldd	r18, Y+4	; 0x04
    26da:	3d 81       	ldd	r19, Y+5	; 0x05
    26dc:	21 15       	cp	r18, r1
    26de:	31 05       	cpc	r19, r1
    26e0:	61 f0       	breq	.+24     	; 0x26fa <MDIO_u8ReadPin+0x52>
    26e2:	52 c0       	rjmp	.+164    	; 0x2788 <MDIO_u8ReadPin+0xe0>
    26e4:	4c 81       	ldd	r20, Y+4	; 0x04
    26e6:	5d 81       	ldd	r21, Y+5	; 0x05
    26e8:	42 30       	cpi	r20, 0x02	; 2
    26ea:	51 05       	cpc	r21, r1
    26ec:	51 f1       	breq	.+84     	; 0x2742 <MDIO_u8ReadPin+0x9a>
    26ee:	8c 81       	ldd	r24, Y+4	; 0x04
    26f0:	9d 81       	ldd	r25, Y+5	; 0x05
    26f2:	83 30       	cpi	r24, 0x03	; 3
    26f4:	91 05       	cpc	r25, r1
    26f6:	b9 f1       	breq	.+110    	; 0x2766 <MDIO_u8ReadPin+0xbe>
    26f8:	47 c0       	rjmp	.+142    	; 0x2788 <MDIO_u8ReadPin+0xe0>
		{
			case PORT_A:
				{
					L_u8ReturnVal=get_bit(PINA,A_u8pin);
    26fa:	e9 e3       	ldi	r30, 0x39	; 57
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	80 81       	ld	r24, Z
    2700:	28 2f       	mov	r18, r24
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	88 2f       	mov	r24, r24
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	a9 01       	movw	r20, r18
    270c:	02 c0       	rjmp	.+4      	; 0x2712 <MDIO_u8ReadPin+0x6a>
    270e:	55 95       	asr	r21
    2710:	47 95       	ror	r20
    2712:	8a 95       	dec	r24
    2714:	e2 f7       	brpl	.-8      	; 0x270e <MDIO_u8ReadPin+0x66>
    2716:	ca 01       	movw	r24, r20
    2718:	81 70       	andi	r24, 0x01	; 1
    271a:	89 83       	std	Y+1, r24	; 0x01
    271c:	35 c0       	rjmp	.+106    	; 0x2788 <MDIO_u8ReadPin+0xe0>
					break;
				}
			case PORT_B:
				{
					L_u8ReturnVal=get_bit(PINB,A_u8pin);
    271e:	e6 e3       	ldi	r30, 0x36	; 54
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	28 2f       	mov	r18, r24
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	8b 81       	ldd	r24, Y+3	; 0x03
    272a:	88 2f       	mov	r24, r24
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	a9 01       	movw	r20, r18
    2730:	02 c0       	rjmp	.+4      	; 0x2736 <MDIO_u8ReadPin+0x8e>
    2732:	55 95       	asr	r21
    2734:	47 95       	ror	r20
    2736:	8a 95       	dec	r24
    2738:	e2 f7       	brpl	.-8      	; 0x2732 <MDIO_u8ReadPin+0x8a>
    273a:	ca 01       	movw	r24, r20
    273c:	81 70       	andi	r24, 0x01	; 1
    273e:	89 83       	std	Y+1, r24	; 0x01
    2740:	23 c0       	rjmp	.+70     	; 0x2788 <MDIO_u8ReadPin+0xe0>
					break;
				}
			case PORT_C:
				{
					L_u8ReturnVal=get_bit(PINC,A_u8pin);
    2742:	e3 e3       	ldi	r30, 0x33	; 51
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	28 2f       	mov	r18, r24
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	88 2f       	mov	r24, r24
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	a9 01       	movw	r20, r18
    2754:	02 c0       	rjmp	.+4      	; 0x275a <MDIO_u8ReadPin+0xb2>
    2756:	55 95       	asr	r21
    2758:	47 95       	ror	r20
    275a:	8a 95       	dec	r24
    275c:	e2 f7       	brpl	.-8      	; 0x2756 <MDIO_u8ReadPin+0xae>
    275e:	ca 01       	movw	r24, r20
    2760:	81 70       	andi	r24, 0x01	; 1
    2762:	89 83       	std	Y+1, r24	; 0x01
    2764:	11 c0       	rjmp	.+34     	; 0x2788 <MDIO_u8ReadPin+0xe0>
					break;
				}
			case PORT_D:
				{
					L_u8ReturnVal=get_bit(PIND,A_u8pin);
    2766:	e0 e3       	ldi	r30, 0x30	; 48
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	28 2f       	mov	r18, r24
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	8b 81       	ldd	r24, Y+3	; 0x03
    2772:	88 2f       	mov	r24, r24
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	a9 01       	movw	r20, r18
    2778:	02 c0       	rjmp	.+4      	; 0x277e <MDIO_u8ReadPin+0xd6>
    277a:	55 95       	asr	r21
    277c:	47 95       	ror	r20
    277e:	8a 95       	dec	r24
    2780:	e2 f7       	brpl	.-8      	; 0x277a <MDIO_u8ReadPin+0xd2>
    2782:	ca 01       	movw	r24, r20
    2784:	81 70       	andi	r24, 0x01	; 1
    2786:	89 83       	std	Y+1, r24	; 0x01
					break;
				}
		}
	return L_u8ReturnVal;
    2788:	89 81       	ldd	r24, Y+1	; 0x01
}
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <MDIO_vTogglePin>:

void MDIO_vTogglePin(u8 A_u8port,u8 A_u8pin)
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	00 d0       	rcall	.+0      	; 0x27a0 <MDIO_vTogglePin+0x6>
    27a0:	00 d0       	rcall	.+0      	; 0x27a2 <MDIO_vTogglePin+0x8>
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	89 83       	std	Y+1, r24	; 0x01
    27a8:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8port)
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	28 2f       	mov	r18, r24
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	3c 83       	std	Y+4, r19	; 0x04
    27b2:	2b 83       	std	Y+3, r18	; 0x03
    27b4:	8b 81       	ldd	r24, Y+3	; 0x03
    27b6:	9c 81       	ldd	r25, Y+4	; 0x04
    27b8:	81 30       	cpi	r24, 0x01	; 1
    27ba:	91 05       	cpc	r25, r1
    27bc:	49 f1       	breq	.+82     	; 0x2810 <MDIO_vTogglePin+0x76>
    27be:	2b 81       	ldd	r18, Y+3	; 0x03
    27c0:	3c 81       	ldd	r19, Y+4	; 0x04
    27c2:	22 30       	cpi	r18, 0x02	; 2
    27c4:	31 05       	cpc	r19, r1
    27c6:	2c f4       	brge	.+10     	; 0x27d2 <MDIO_vTogglePin+0x38>
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	9c 81       	ldd	r25, Y+4	; 0x04
    27cc:	00 97       	sbiw	r24, 0x00	; 0
    27ce:	61 f0       	breq	.+24     	; 0x27e8 <MDIO_vTogglePin+0x4e>
    27d0:	5a c0       	rjmp	.+180    	; 0x2886 <MDIO_vTogglePin+0xec>
    27d2:	2b 81       	ldd	r18, Y+3	; 0x03
    27d4:	3c 81       	ldd	r19, Y+4	; 0x04
    27d6:	22 30       	cpi	r18, 0x02	; 2
    27d8:	31 05       	cpc	r19, r1
    27da:	71 f1       	breq	.+92     	; 0x2838 <MDIO_vTogglePin+0x9e>
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	9c 81       	ldd	r25, Y+4	; 0x04
    27e0:	83 30       	cpi	r24, 0x03	; 3
    27e2:	91 05       	cpc	r25, r1
    27e4:	e9 f1       	breq	.+122    	; 0x2860 <MDIO_vTogglePin+0xc6>
    27e6:	4f c0       	rjmp	.+158    	; 0x2886 <MDIO_vTogglePin+0xec>
			{
				case PORT_A:
					{
						toggle_bit(PORTA,A_u8pin);
    27e8:	ab e3       	ldi	r26, 0x3B	; 59
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	eb e3       	ldi	r30, 0x3B	; 59
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	48 2f       	mov	r20, r24
    27f4:	8a 81       	ldd	r24, Y+2	; 0x02
    27f6:	28 2f       	mov	r18, r24
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	02 2e       	mov	r0, r18
    2800:	02 c0       	rjmp	.+4      	; 0x2806 <MDIO_vTogglePin+0x6c>
    2802:	88 0f       	add	r24, r24
    2804:	99 1f       	adc	r25, r25
    2806:	0a 94       	dec	r0
    2808:	e2 f7       	brpl	.-8      	; 0x2802 <MDIO_vTogglePin+0x68>
    280a:	84 27       	eor	r24, r20
    280c:	8c 93       	st	X, r24
    280e:	3b c0       	rjmp	.+118    	; 0x2886 <MDIO_vTogglePin+0xec>
						break;
					}
				case PORT_B:
					{
						toggle_bit(PORTB,A_u8pin);
    2810:	a8 e3       	ldi	r26, 0x38	; 56
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	e8 e3       	ldi	r30, 0x38	; 56
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	48 2f       	mov	r20, r24
    281c:	8a 81       	ldd	r24, Y+2	; 0x02
    281e:	28 2f       	mov	r18, r24
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	02 2e       	mov	r0, r18
    2828:	02 c0       	rjmp	.+4      	; 0x282e <MDIO_vTogglePin+0x94>
    282a:	88 0f       	add	r24, r24
    282c:	99 1f       	adc	r25, r25
    282e:	0a 94       	dec	r0
    2830:	e2 f7       	brpl	.-8      	; 0x282a <MDIO_vTogglePin+0x90>
    2832:	84 27       	eor	r24, r20
    2834:	8c 93       	st	X, r24
    2836:	27 c0       	rjmp	.+78     	; 0x2886 <MDIO_vTogglePin+0xec>
						break;
					}
				case PORT_C:
					{
						toggle_bit(PORTC,A_u8pin);
    2838:	a5 e3       	ldi	r26, 0x35	; 53
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	e5 e3       	ldi	r30, 0x35	; 53
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	48 2f       	mov	r20, r24
    2844:	8a 81       	ldd	r24, Y+2	; 0x02
    2846:	28 2f       	mov	r18, r24
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	02 2e       	mov	r0, r18
    2850:	02 c0       	rjmp	.+4      	; 0x2856 <MDIO_vTogglePin+0xbc>
    2852:	88 0f       	add	r24, r24
    2854:	99 1f       	adc	r25, r25
    2856:	0a 94       	dec	r0
    2858:	e2 f7       	brpl	.-8      	; 0x2852 <MDIO_vTogglePin+0xb8>
    285a:	84 27       	eor	r24, r20
    285c:	8c 93       	st	X, r24
    285e:	13 c0       	rjmp	.+38     	; 0x2886 <MDIO_vTogglePin+0xec>
						break;
					}
				case PORT_D:
					{
						toggle_bit(PORTD,A_u8pin);
    2860:	a2 e3       	ldi	r26, 0x32	; 50
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e2 e3       	ldi	r30, 0x32	; 50
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	48 2f       	mov	r20, r24
    286c:	8a 81       	ldd	r24, Y+2	; 0x02
    286e:	28 2f       	mov	r18, r24
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	02 2e       	mov	r0, r18
    2878:	02 c0       	rjmp	.+4      	; 0x287e <MDIO_vTogglePin+0xe4>
    287a:	88 0f       	add	r24, r24
    287c:	99 1f       	adc	r25, r25
    287e:	0a 94       	dec	r0
    2880:	e2 f7       	brpl	.-8      	; 0x287a <MDIO_vTogglePin+0xe0>
    2882:	84 27       	eor	r24, r20
    2884:	8c 93       	st	X, r24
						break;
					}
			}

}
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	08 95       	ret

00002894 <MDIO_vSetPortVal>:

void MDIO_vSetPortVal(u8 A_u8port ,u8 A_u8Value)
{
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	00 d0       	rcall	.+0      	; 0x289a <MDIO_vSetPortVal+0x6>
    289a:	00 d0       	rcall	.+0      	; 0x289c <MDIO_vSetPortVal+0x8>
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	89 83       	std	Y+1, r24	; 0x01
    28a2:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8port)
    28a4:	89 81       	ldd	r24, Y+1	; 0x01
    28a6:	28 2f       	mov	r18, r24
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	3c 83       	std	Y+4, r19	; 0x04
    28ac:	2b 83       	std	Y+3, r18	; 0x03
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	9c 81       	ldd	r25, Y+4	; 0x04
    28b2:	81 30       	cpi	r24, 0x01	; 1
    28b4:	91 05       	cpc	r25, r1
    28b6:	d1 f0       	breq	.+52     	; 0x28ec <MDIO_vSetPortVal+0x58>
    28b8:	2b 81       	ldd	r18, Y+3	; 0x03
    28ba:	3c 81       	ldd	r19, Y+4	; 0x04
    28bc:	22 30       	cpi	r18, 0x02	; 2
    28be:	31 05       	cpc	r19, r1
    28c0:	2c f4       	brge	.+10     	; 0x28cc <MDIO_vSetPortVal+0x38>
    28c2:	8b 81       	ldd	r24, Y+3	; 0x03
    28c4:	9c 81       	ldd	r25, Y+4	; 0x04
    28c6:	00 97       	sbiw	r24, 0x00	; 0
    28c8:	61 f0       	breq	.+24     	; 0x28e2 <MDIO_vSetPortVal+0x4e>
    28ca:	1e c0       	rjmp	.+60     	; 0x2908 <MDIO_vSetPortVal+0x74>
    28cc:	2b 81       	ldd	r18, Y+3	; 0x03
    28ce:	3c 81       	ldd	r19, Y+4	; 0x04
    28d0:	22 30       	cpi	r18, 0x02	; 2
    28d2:	31 05       	cpc	r19, r1
    28d4:	81 f0       	breq	.+32     	; 0x28f6 <MDIO_vSetPortVal+0x62>
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	9c 81       	ldd	r25, Y+4	; 0x04
    28da:	83 30       	cpi	r24, 0x03	; 3
    28dc:	91 05       	cpc	r25, r1
    28de:	81 f0       	breq	.+32     	; 0x2900 <MDIO_vSetPortVal+0x6c>
    28e0:	13 c0       	rjmp	.+38     	; 0x2908 <MDIO_vSetPortVal+0x74>
			{
				case PORT_A:
					{
						PORTA = A_u8Value;
    28e2:	eb e3       	ldi	r30, 0x3B	; 59
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	8a 81       	ldd	r24, Y+2	; 0x02
    28e8:	80 83       	st	Z, r24
    28ea:	0e c0       	rjmp	.+28     	; 0x2908 <MDIO_vSetPortVal+0x74>
						break;
					}
				case PORT_B:
					{
						PORTB = A_u8Value;
    28ec:	e8 e3       	ldi	r30, 0x38	; 56
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	8a 81       	ldd	r24, Y+2	; 0x02
    28f2:	80 83       	st	Z, r24
    28f4:	09 c0       	rjmp	.+18     	; 0x2908 <MDIO_vSetPortVal+0x74>
						break;
					}
				case PORT_C:
					{
						PORTC = A_u8Value;
    28f6:	e5 e3       	ldi	r30, 0x35	; 53
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	8a 81       	ldd	r24, Y+2	; 0x02
    28fc:	80 83       	st	Z, r24
    28fe:	04 c0       	rjmp	.+8      	; 0x2908 <MDIO_vSetPortVal+0x74>
						break;
					}
				case PORT_D:
					{
						PORTD = A_u8Value;
    2900:	e2 e3       	ldi	r30, 0x32	; 50
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	8a 81       	ldd	r24, Y+2	; 0x02
    2906:	80 83       	st	Z, r24
						break;
					}
			}
}
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	0f 90       	pop	r0
    2910:	cf 91       	pop	r28
    2912:	df 91       	pop	r29
    2914:	08 95       	ret

00002916 <DIO_voidPullUpState>:

void DIO_voidPullUpState(u8 u8PortCpy , u8 u8PinCpy,u8 u8State)
{
    2916:	df 93       	push	r29
    2918:	cf 93       	push	r28
    291a:	00 d0       	rcall	.+0      	; 0x291c <DIO_voidPullUpState+0x6>
    291c:	00 d0       	rcall	.+0      	; 0x291e <DIO_voidPullUpState+0x8>
    291e:	00 d0       	rcall	.+0      	; 0x2920 <DIO_voidPullUpState+0xa>
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	8a 83       	std	Y+2, r24	; 0x02
    2926:	6b 83       	std	Y+3, r22	; 0x03
    2928:	4c 83       	std	Y+4, r20	; 0x04
	u8 u8Direction ;
	switch(u8PortCpy)
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	28 2f       	mov	r18, r24
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	3e 83       	std	Y+6, r19	; 0x06
    2932:	2d 83       	std	Y+5, r18	; 0x05
    2934:	4d 81       	ldd	r20, Y+5	; 0x05
    2936:	5e 81       	ldd	r21, Y+6	; 0x06
    2938:	41 30       	cpi	r20, 0x01	; 1
    293a:	51 05       	cpc	r21, r1
    293c:	41 f1       	breq	.+80     	; 0x298e <DIO_voidPullUpState+0x78>
    293e:	8d 81       	ldd	r24, Y+5	; 0x05
    2940:	9e 81       	ldd	r25, Y+6	; 0x06
    2942:	82 30       	cpi	r24, 0x02	; 2
    2944:	91 05       	cpc	r25, r1
    2946:	34 f4       	brge	.+12     	; 0x2954 <DIO_voidPullUpState+0x3e>
    2948:	2d 81       	ldd	r18, Y+5	; 0x05
    294a:	3e 81       	ldd	r19, Y+6	; 0x06
    294c:	21 15       	cp	r18, r1
    294e:	31 05       	cpc	r19, r1
    2950:	61 f0       	breq	.+24     	; 0x296a <DIO_voidPullUpState+0x54>
    2952:	52 c0       	rjmp	.+164    	; 0x29f8 <DIO_voidPullUpState+0xe2>
    2954:	4d 81       	ldd	r20, Y+5	; 0x05
    2956:	5e 81       	ldd	r21, Y+6	; 0x06
    2958:	42 30       	cpi	r20, 0x02	; 2
    295a:	51 05       	cpc	r21, r1
    295c:	51 f1       	breq	.+84     	; 0x29b2 <DIO_voidPullUpState+0x9c>
    295e:	8d 81       	ldd	r24, Y+5	; 0x05
    2960:	9e 81       	ldd	r25, Y+6	; 0x06
    2962:	83 30       	cpi	r24, 0x03	; 3
    2964:	91 05       	cpc	r25, r1
    2966:	b9 f1       	breq	.+110    	; 0x29d6 <DIO_voidPullUpState+0xc0>
    2968:	47 c0       	rjmp	.+142    	; 0x29f8 <DIO_voidPullUpState+0xe2>
	{
	case PORT_A :
		u8Direction=get_bit(DDRA,u8PinCpy);
    296a:	ea e3       	ldi	r30, 0x3A	; 58
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
    2970:	28 2f       	mov	r18, r24
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	8b 81       	ldd	r24, Y+3	; 0x03
    2976:	88 2f       	mov	r24, r24
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	a9 01       	movw	r20, r18
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <DIO_voidPullUpState+0x6c>
    297e:	55 95       	asr	r21
    2980:	47 95       	ror	r20
    2982:	8a 95       	dec	r24
    2984:	e2 f7       	brpl	.-8      	; 0x297e <DIO_voidPullUpState+0x68>
    2986:	ca 01       	movw	r24, r20
    2988:	81 70       	andi	r24, 0x01	; 1
    298a:	89 83       	std	Y+1, r24	; 0x01
    298c:	35 c0       	rjmp	.+106    	; 0x29f8 <DIO_voidPullUpState+0xe2>
		break;
	case PORT_B :
		u8Direction=get_bit(DDRB,u8PinCpy);
    298e:	e7 e3       	ldi	r30, 0x37	; 55
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	28 2f       	mov	r18, r24
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	8b 81       	ldd	r24, Y+3	; 0x03
    299a:	88 2f       	mov	r24, r24
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	a9 01       	movw	r20, r18
    29a0:	02 c0       	rjmp	.+4      	; 0x29a6 <DIO_voidPullUpState+0x90>
    29a2:	55 95       	asr	r21
    29a4:	47 95       	ror	r20
    29a6:	8a 95       	dec	r24
    29a8:	e2 f7       	brpl	.-8      	; 0x29a2 <DIO_voidPullUpState+0x8c>
    29aa:	ca 01       	movw	r24, r20
    29ac:	81 70       	andi	r24, 0x01	; 1
    29ae:	89 83       	std	Y+1, r24	; 0x01
    29b0:	23 c0       	rjmp	.+70     	; 0x29f8 <DIO_voidPullUpState+0xe2>
		break;

	case PORT_C :
		u8Direction=get_bit(DDRC,u8PinCpy);
    29b2:	e4 e3       	ldi	r30, 0x34	; 52
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	80 81       	ld	r24, Z
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	88 2f       	mov	r24, r24
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	a9 01       	movw	r20, r18
    29c4:	02 c0       	rjmp	.+4      	; 0x29ca <DIO_voidPullUpState+0xb4>
    29c6:	55 95       	asr	r21
    29c8:	47 95       	ror	r20
    29ca:	8a 95       	dec	r24
    29cc:	e2 f7       	brpl	.-8      	; 0x29c6 <DIO_voidPullUpState+0xb0>
    29ce:	ca 01       	movw	r24, r20
    29d0:	81 70       	andi	r24, 0x01	; 1
    29d2:	89 83       	std	Y+1, r24	; 0x01
    29d4:	11 c0       	rjmp	.+34     	; 0x29f8 <DIO_voidPullUpState+0xe2>
		break;

	case PORT_D :
		u8Direction= get_bit(DDRD,u8PinCpy);
    29d6:	e1 e3       	ldi	r30, 0x31	; 49
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	28 2f       	mov	r18, r24
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	8b 81       	ldd	r24, Y+3	; 0x03
    29e2:	88 2f       	mov	r24, r24
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	a9 01       	movw	r20, r18
    29e8:	02 c0       	rjmp	.+4      	; 0x29ee <DIO_voidPullUpState+0xd8>
    29ea:	55 95       	asr	r21
    29ec:	47 95       	ror	r20
    29ee:	8a 95       	dec	r24
    29f0:	e2 f7       	brpl	.-8      	; 0x29ea <DIO_voidPullUpState+0xd4>
    29f2:	ca 01       	movw	r24, r20
    29f4:	81 70       	andi	r24, 0x01	; 1
    29f6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	if (u8Direction==DIO_INPUT)
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	88 23       	and	r24, r24
    29fc:	29 f4       	brne	.+10     	; 0x2a08 <DIO_voidPullUpState+0xf2>
	{
		MDIO_vSetPinVal(u8PortCpy,u8PinCpy,u8State);
    29fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2a00:	6b 81       	ldd	r22, Y+3	; 0x03
    2a02:	4c 81       	ldd	r20, Y+4	; 0x04
    2a04:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>

		//do nothing
	}


}
    2a08:	26 96       	adiw	r28, 0x06	; 6
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	08 95       	ret

00002a1a <MServo_voidInit>:
#include "Servo_Private.h"
#include "Servo_config.h"
#include <util/delay.h>

void MServo_voidInit(void)
{
    2a1a:	df 93       	push	r29
    2a1c:	cf 93       	push	r28
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
    MDIO_vSetPinDir(SERVO_PORT, SERVO_PIN, DIO_OUTPUT);
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	60 e0       	ldi	r22, 0x00	; 0
    2a26:	41 e0       	ldi	r20, 0x01	; 1
    2a28:	0e 94 62 11 	call	0x22c4	; 0x22c4 <MDIO_vSetPinDir>
}
    2a2c:	cf 91       	pop	r28
    2a2e:	df 91       	pop	r29
    2a30:	08 95       	ret

00002a32 <MServo_voidSetAngle>:

void MServo_voidSetAngle(u8 Copy_u8Angle)
{
    2a32:	df 93       	push	r29
    2a34:	cf 93       	push	r28
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
    2a3a:	e2 97       	sbiw	r28, 0x32	; 50
    2a3c:	0f b6       	in	r0, 0x3f	; 63
    2a3e:	f8 94       	cli
    2a40:	de bf       	out	0x3e, r29	; 62
    2a42:	0f be       	out	0x3f, r0	; 63
    2a44:	cd bf       	out	0x3d, r28	; 61
    2a46:	8a ab       	std	Y+50, r24	; 0x32
    u8 Local_u8PulseWidth = 0;
    2a48:	19 aa       	std	Y+49, r1	; 0x31
    Local_u8PulseWidth = (u8)(Copy_u8Angle * 11.11) + 500;
    2a4a:	8a a9       	ldd	r24, Y+50	; 0x32
    2a4c:	88 2f       	mov	r24, r24
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	aa 27       	eor	r26, r26
    2a52:	97 fd       	sbrc	r25, 7
    2a54:	a0 95       	com	r26
    2a56:	ba 2f       	mov	r27, r26
    2a58:	bc 01       	movw	r22, r24
    2a5a:	cd 01       	movw	r24, r26
    2a5c:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	bc 01       	movw	r22, r24
    2a66:	cd 01       	movw	r24, r26
    2a68:	2f e8       	ldi	r18, 0x8F	; 143
    2a6a:	32 ec       	ldi	r19, 0xC2	; 194
    2a6c:	41 e3       	ldi	r20, 0x31	; 49
    2a6e:	51 e4       	ldi	r21, 0x41	; 65
    2a70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	bc 01       	movw	r22, r24
    2a7a:	cd 01       	movw	r24, r26
    2a7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	8c 50       	subi	r24, 0x0C	; 12
    2a86:	89 ab       	std	Y+49, r24	; 0x31
    MDIO_vSetPinVal(SERVO_PORT, SERVO_PIN, DIO_HIGH);
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	60 e0       	ldi	r22, 0x00	; 0
    2a8c:	41 e0       	ldi	r20, 0x01	; 1
    2a8e:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>
    _delay_us(Local_u8PulseWidth);
    2a92:	89 a9       	ldd	r24, Y+49	; 0x31
    2a94:	88 2f       	mov	r24, r24
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	a0 e0       	ldi	r26, 0x00	; 0
    2a9a:	b0 e0       	ldi	r27, 0x00	; 0
    2a9c:	bc 01       	movw	r22, r24
    2a9e:	cd 01       	movw	r24, r26
    2aa0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	8d a7       	std	Y+45, r24	; 0x2d
    2aaa:	9e a7       	std	Y+46, r25	; 0x2e
    2aac:	af a7       	std	Y+47, r26	; 0x2f
    2aae:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ab0:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ab2:	7e a5       	ldd	r23, Y+46	; 0x2e
    2ab4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ab6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ab8:	2b ea       	ldi	r18, 0xAB	; 171
    2aba:	3a ea       	ldi	r19, 0xAA	; 170
    2abc:	4a e2       	ldi	r20, 0x2A	; 42
    2abe:	50 e4       	ldi	r21, 0x40	; 64
    2ac0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	89 a7       	std	Y+41, r24	; 0x29
    2aca:	9a a7       	std	Y+42, r25	; 0x2a
    2acc:	ab a7       	std	Y+43, r26	; 0x2b
    2ace:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2ad0:	69 a5       	ldd	r22, Y+41	; 0x29
    2ad2:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ad4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ad6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e8       	ldi	r20, 0x80	; 128
    2ade:	5f e3       	ldi	r21, 0x3F	; 63
    2ae0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ae4:	88 23       	and	r24, r24
    2ae6:	1c f4       	brge	.+6      	; 0x2aee <MServo_voidSetAngle+0xbc>
		__ticks = 1;
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	88 a7       	std	Y+40, r24	; 0x28
    2aec:	91 c0       	rjmp	.+290    	; 0x2c10 <MServo_voidSetAngle+0x1de>
	else if (__tmp > 255)
    2aee:	69 a5       	ldd	r22, Y+41	; 0x29
    2af0:	7a a5       	ldd	r23, Y+42	; 0x2a
    2af2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2af4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	4f e7       	ldi	r20, 0x7F	; 127
    2afc:	53 e4       	ldi	r21, 0x43	; 67
    2afe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b02:	18 16       	cp	r1, r24
    2b04:	0c f0       	brlt	.+2      	; 0x2b08 <MServo_voidSetAngle+0xd6>
    2b06:	7b c0       	rjmp	.+246    	; 0x2bfe <MServo_voidSetAngle+0x1cc>
	{
		_delay_ms(__us / 1000.0);
    2b08:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b0a:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b0e:	98 a9       	ldd	r25, Y+48	; 0x30
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	4a e7       	ldi	r20, 0x7A	; 122
    2b16:	54 e4       	ldi	r21, 0x44	; 68
    2b18:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	8c a3       	std	Y+36, r24	; 0x24
    2b22:	9d a3       	std	Y+37, r25	; 0x25
    2b24:	ae a3       	std	Y+38, r26	; 0x26
    2b26:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b28:	6c a1       	ldd	r22, Y+36	; 0x24
    2b2a:	7d a1       	ldd	r23, Y+37	; 0x25
    2b2c:	8e a1       	ldd	r24, Y+38	; 0x26
    2b2e:	9f a1       	ldd	r25, Y+39	; 0x27
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	4a ef       	ldi	r20, 0xFA	; 250
    2b36:	54 e4       	ldi	r21, 0x44	; 68
    2b38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	88 a3       	std	Y+32, r24	; 0x20
    2b42:	99 a3       	std	Y+33, r25	; 0x21
    2b44:	aa a3       	std	Y+34, r26	; 0x22
    2b46:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2b48:	68 a1       	ldd	r22, Y+32	; 0x20
    2b4a:	79 a1       	ldd	r23, Y+33	; 0x21
    2b4c:	8a a1       	ldd	r24, Y+34	; 0x22
    2b4e:	9b a1       	ldd	r25, Y+35	; 0x23
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	40 e8       	ldi	r20, 0x80	; 128
    2b56:	5f e3       	ldi	r21, 0x3F	; 63
    2b58:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b5c:	88 23       	and	r24, r24
    2b5e:	2c f4       	brge	.+10     	; 0x2b6a <MServo_voidSetAngle+0x138>
		__ticks = 1;
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	9f 8f       	std	Y+31, r25	; 0x1f
    2b66:	8e 8f       	std	Y+30, r24	; 0x1e
    2b68:	3f c0       	rjmp	.+126    	; 0x2be8 <MServo_voidSetAngle+0x1b6>
	else if (__tmp > 65535)
    2b6a:	68 a1       	ldd	r22, Y+32	; 0x20
    2b6c:	79 a1       	ldd	r23, Y+33	; 0x21
    2b6e:	8a a1       	ldd	r24, Y+34	; 0x22
    2b70:	9b a1       	ldd	r25, Y+35	; 0x23
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	3f ef       	ldi	r19, 0xFF	; 255
    2b76:	4f e7       	ldi	r20, 0x7F	; 127
    2b78:	57 e4       	ldi	r21, 0x47	; 71
    2b7a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b7e:	18 16       	cp	r1, r24
    2b80:	4c f5       	brge	.+82     	; 0x2bd4 <MServo_voidSetAngle+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b82:	6c a1       	ldd	r22, Y+36	; 0x24
    2b84:	7d a1       	ldd	r23, Y+37	; 0x25
    2b86:	8e a1       	ldd	r24, Y+38	; 0x26
    2b88:	9f a1       	ldd	r25, Y+39	; 0x27
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e2       	ldi	r20, 0x20	; 32
    2b90:	51 e4       	ldi	r21, 0x41	; 65
    2b92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	cd 01       	movw	r24, r26
    2b9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	9f 8f       	std	Y+31, r25	; 0x1f
    2ba8:	8e 8f       	std	Y+30, r24	; 0x1e
    2baa:	0f c0       	rjmp	.+30     	; 0x2bca <MServo_voidSetAngle+0x198>
    2bac:	88 ec       	ldi	r24, 0xC8	; 200
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	9d 8f       	std	Y+29, r25	; 0x1d
    2bb2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bb4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2bb6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <MServo_voidSetAngle+0x186>
    2bbc:	9d 8f       	std	Y+29, r25	; 0x1d
    2bbe:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bc2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	9f 8f       	std	Y+31, r25	; 0x1f
    2bc8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bcc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bce:	00 97       	sbiw	r24, 0x00	; 0
    2bd0:	69 f7       	brne	.-38     	; 0x2bac <MServo_voidSetAngle+0x17a>
    2bd2:	24 c0       	rjmp	.+72     	; 0x2c1c <MServo_voidSetAngle+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd4:	68 a1       	ldd	r22, Y+32	; 0x20
    2bd6:	79 a1       	ldd	r23, Y+33	; 0x21
    2bd8:	8a a1       	ldd	r24, Y+34	; 0x22
    2bda:	9b a1       	ldd	r25, Y+35	; 0x23
    2bdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	9f 8f       	std	Y+31, r25	; 0x1f
    2be6:	8e 8f       	std	Y+30, r24	; 0x1e
    2be8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bec:	9b 8f       	std	Y+27, r25	; 0x1b
    2bee:	8a 8f       	std	Y+26, r24	; 0x1a
    2bf0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bf2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <MServo_voidSetAngle+0x1c2>
    2bf8:	9b 8f       	std	Y+27, r25	; 0x1b
    2bfa:	8a 8f       	std	Y+26, r24	; 0x1a
    2bfc:	0f c0       	rjmp	.+30     	; 0x2c1c <MServo_voidSetAngle+0x1ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bfe:	69 a5       	ldd	r22, Y+41	; 0x29
    2c00:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c02:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c04:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	88 a7       	std	Y+40, r24	; 0x28
    2c10:	88 a5       	ldd	r24, Y+40	; 0x28
    2c12:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c14:	89 8d       	ldd	r24, Y+25	; 0x19
    2c16:	8a 95       	dec	r24
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <MServo_voidSetAngle+0x1e4>
    2c1a:	89 8f       	std	Y+25, r24	; 0x19
    MDIO_vSetPinVal(SERVO_PORT, SERVO_PIN, DIO_LOW);
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
    2c1e:	60 e0       	ldi	r22, 0x00	; 0
    2c20:	40 e0       	ldi	r20, 0x00	; 0
    2c22:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>
    _delay_us(20000 - Local_u8PulseWidth);
    2c26:	89 a9       	ldd	r24, Y+49	; 0x31
    2c28:	28 2f       	mov	r18, r24
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	80 e2       	ldi	r24, 0x20	; 32
    2c2e:	9e e4       	ldi	r25, 0x4E	; 78
    2c30:	82 1b       	sub	r24, r18
    2c32:	93 0b       	sbc	r25, r19
    2c34:	aa 27       	eor	r26, r26
    2c36:	97 fd       	sbrc	r25, 7
    2c38:	a0 95       	com	r26
    2c3a:	ba 2f       	mov	r27, r26
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	8d 8b       	std	Y+21, r24	; 0x15
    2c4a:	9e 8b       	std	Y+22, r25	; 0x16
    2c4c:	af 8b       	std	Y+23, r26	; 0x17
    2c4e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c50:	6d 89       	ldd	r22, Y+21	; 0x15
    2c52:	7e 89       	ldd	r23, Y+22	; 0x16
    2c54:	8f 89       	ldd	r24, Y+23	; 0x17
    2c56:	98 8d       	ldd	r25, Y+24	; 0x18
    2c58:	2b ea       	ldi	r18, 0xAB	; 171
    2c5a:	3a ea       	ldi	r19, 0xAA	; 170
    2c5c:	4a e2       	ldi	r20, 0x2A	; 42
    2c5e:	50 e4       	ldi	r21, 0x40	; 64
    2c60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	89 8b       	std	Y+17, r24	; 0x11
    2c6a:	9a 8b       	std	Y+18, r25	; 0x12
    2c6c:	ab 8b       	std	Y+19, r26	; 0x13
    2c6e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c70:	69 89       	ldd	r22, Y+17	; 0x11
    2c72:	7a 89       	ldd	r23, Y+18	; 0x12
    2c74:	8b 89       	ldd	r24, Y+19	; 0x13
    2c76:	9c 89       	ldd	r25, Y+20	; 0x14
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e8       	ldi	r20, 0x80	; 128
    2c7e:	5f e3       	ldi	r21, 0x3F	; 63
    2c80:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c84:	88 23       	and	r24, r24
    2c86:	1c f4       	brge	.+6      	; 0x2c8e <MServo_voidSetAngle+0x25c>
		__ticks = 1;
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	88 8b       	std	Y+16, r24	; 0x10
    2c8c:	91 c0       	rjmp	.+290    	; 0x2db0 <MServo_voidSetAngle+0x37e>
	else if (__tmp > 255)
    2c8e:	69 89       	ldd	r22, Y+17	; 0x11
    2c90:	7a 89       	ldd	r23, Y+18	; 0x12
    2c92:	8b 89       	ldd	r24, Y+19	; 0x13
    2c94:	9c 89       	ldd	r25, Y+20	; 0x14
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	4f e7       	ldi	r20, 0x7F	; 127
    2c9c:	53 e4       	ldi	r21, 0x43	; 67
    2c9e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2ca2:	18 16       	cp	r1, r24
    2ca4:	0c f0       	brlt	.+2      	; 0x2ca8 <MServo_voidSetAngle+0x276>
    2ca6:	7b c0       	rjmp	.+246    	; 0x2d9e <MServo_voidSetAngle+0x36c>
	{
		_delay_ms(__us / 1000.0);
    2ca8:	6d 89       	ldd	r22, Y+21	; 0x15
    2caa:	7e 89       	ldd	r23, Y+22	; 0x16
    2cac:	8f 89       	ldd	r24, Y+23	; 0x17
    2cae:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	4a e7       	ldi	r20, 0x7A	; 122
    2cb6:	54 e4       	ldi	r21, 0x44	; 68
    2cb8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	8c 87       	std	Y+12, r24	; 0x0c
    2cc2:	9d 87       	std	Y+13, r25	; 0x0d
    2cc4:	ae 87       	std	Y+14, r26	; 0x0e
    2cc6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc8:	6c 85       	ldd	r22, Y+12	; 0x0c
    2cca:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ccc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cce:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	4a ef       	ldi	r20, 0xFA	; 250
    2cd6:	54 e4       	ldi	r21, 0x44	; 68
    2cd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	88 87       	std	Y+8, r24	; 0x08
    2ce2:	99 87       	std	Y+9, r25	; 0x09
    2ce4:	aa 87       	std	Y+10, r26	; 0x0a
    2ce6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2ce8:	68 85       	ldd	r22, Y+8	; 0x08
    2cea:	79 85       	ldd	r23, Y+9	; 0x09
    2cec:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cee:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	40 e8       	ldi	r20, 0x80	; 128
    2cf6:	5f e3       	ldi	r21, 0x3F	; 63
    2cf8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2cfc:	88 23       	and	r24, r24
    2cfe:	2c f4       	brge	.+10     	; 0x2d0a <MServo_voidSetAngle+0x2d8>
		__ticks = 1;
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	9f 83       	std	Y+7, r25	; 0x07
    2d06:	8e 83       	std	Y+6, r24	; 0x06
    2d08:	3f c0       	rjmp	.+126    	; 0x2d88 <MServo_voidSetAngle+0x356>
	else if (__tmp > 65535)
    2d0a:	68 85       	ldd	r22, Y+8	; 0x08
    2d0c:	79 85       	ldd	r23, Y+9	; 0x09
    2d0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d10:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	3f ef       	ldi	r19, 0xFF	; 255
    2d16:	4f e7       	ldi	r20, 0x7F	; 127
    2d18:	57 e4       	ldi	r21, 0x47	; 71
    2d1a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d1e:	18 16       	cp	r1, r24
    2d20:	4c f5       	brge	.+82     	; 0x2d74 <MServo_voidSetAngle+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d22:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d24:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d26:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d28:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	40 e2       	ldi	r20, 0x20	; 32
    2d30:	51 e4       	ldi	r21, 0x41	; 65
    2d32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	bc 01       	movw	r22, r24
    2d3c:	cd 01       	movw	r24, r26
    2d3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	9f 83       	std	Y+7, r25	; 0x07
    2d48:	8e 83       	std	Y+6, r24	; 0x06
    2d4a:	0f c0       	rjmp	.+30     	; 0x2d6a <MServo_voidSetAngle+0x338>
    2d4c:	88 ec       	ldi	r24, 0xC8	; 200
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	9d 83       	std	Y+5, r25	; 0x05
    2d52:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d54:	8c 81       	ldd	r24, Y+4	; 0x04
    2d56:	9d 81       	ldd	r25, Y+5	; 0x05
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	f1 f7       	brne	.-4      	; 0x2d58 <MServo_voidSetAngle+0x326>
    2d5c:	9d 83       	std	Y+5, r25	; 0x05
    2d5e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d60:	8e 81       	ldd	r24, Y+6	; 0x06
    2d62:	9f 81       	ldd	r25, Y+7	; 0x07
    2d64:	01 97       	sbiw	r24, 0x01	; 1
    2d66:	9f 83       	std	Y+7, r25	; 0x07
    2d68:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d6a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d6c:	9f 81       	ldd	r25, Y+7	; 0x07
    2d6e:	00 97       	sbiw	r24, 0x00	; 0
    2d70:	69 f7       	brne	.-38     	; 0x2d4c <MServo_voidSetAngle+0x31a>
    2d72:	24 c0       	rjmp	.+72     	; 0x2dbc <MServo_voidSetAngle+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d74:	68 85       	ldd	r22, Y+8	; 0x08
    2d76:	79 85       	ldd	r23, Y+9	; 0x09
    2d78:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	9f 83       	std	Y+7, r25	; 0x07
    2d86:	8e 83       	std	Y+6, r24	; 0x06
    2d88:	8e 81       	ldd	r24, Y+6	; 0x06
    2d8a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d8c:	9b 83       	std	Y+3, r25	; 0x03
    2d8e:	8a 83       	std	Y+2, r24	; 0x02
    2d90:	8a 81       	ldd	r24, Y+2	; 0x02
    2d92:	9b 81       	ldd	r25, Y+3	; 0x03
    2d94:	01 97       	sbiw	r24, 0x01	; 1
    2d96:	f1 f7       	brne	.-4      	; 0x2d94 <MServo_voidSetAngle+0x362>
    2d98:	9b 83       	std	Y+3, r25	; 0x03
    2d9a:	8a 83       	std	Y+2, r24	; 0x02
    2d9c:	0f c0       	rjmp	.+30     	; 0x2dbc <MServo_voidSetAngle+0x38a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d9e:	69 89       	ldd	r22, Y+17	; 0x11
    2da0:	7a 89       	ldd	r23, Y+18	; 0x12
    2da2:	8b 89       	ldd	r24, Y+19	; 0x13
    2da4:	9c 89       	ldd	r25, Y+20	; 0x14
    2da6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	88 8b       	std	Y+16, r24	; 0x10
    2db0:	88 89       	ldd	r24, Y+16	; 0x10
    2db2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	8a 95       	dec	r24
    2db8:	f1 f7       	brne	.-4      	; 0x2db6 <MServo_voidSetAngle+0x384>
    2dba:	89 83       	std	Y+1, r24	; 0x01
}
    2dbc:	e2 96       	adiw	r28, 0x32	; 50
    2dbe:	0f b6       	in	r0, 0x3f	; 63
    2dc0:	f8 94       	cli
    2dc2:	de bf       	out	0x3e, r29	; 62
    2dc4:	0f be       	out	0x3f, r0	; 63
    2dc6:	cd bf       	out	0x3d, r28	; 61
    2dc8:	cf 91       	pop	r28
    2dca:	df 91       	pop	r29
    2dcc:	08 95       	ret

00002dce <LCD_vidInit>:
#include "LCD_interface.h"
#include "util/delay.h"
#include "LCD_EXTRA.h"


void LCD_vidInit(void){
    2dce:	0f 93       	push	r16
    2dd0:	1f 93       	push	r17
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
    2dda:	c4 55       	subi	r28, 0x54	; 84
    2ddc:	d0 40       	sbci	r29, 0x00	; 0
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	f8 94       	cli
    2de2:	de bf       	out	0x3e, r29	; 62
    2de4:	0f be       	out	0x3f, r0	; 63
    2de6:	cd bf       	out	0x3d, r28	; 61

	MDIO_vSetPinVal(lcd_CONTROLPORT,lcd_EPIN,DIO_LOW);
    2de8:	82 e0       	ldi	r24, 0x02	; 2
    2dea:	62 e0       	ldi	r22, 0x02	; 2
    2dec:	40 e0       	ldi	r20, 0x00	; 0
    2dee:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>
    2df2:	fe 01       	movw	r30, r28
    2df4:	ef 5a       	subi	r30, 0xAF	; 175
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	80 e0       	ldi	r24, 0x00	; 0
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	a0 ef       	ldi	r26, 0xF0	; 240
    2dfe:	b1 e4       	ldi	r27, 0x41	; 65
    2e00:	80 83       	st	Z, r24
    2e02:	91 83       	std	Z+1, r25	; 0x01
    2e04:	a2 83       	std	Z+2, r26	; 0x02
    2e06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e08:	8e 01       	movw	r16, r28
    2e0a:	03 5b       	subi	r16, 0xB3	; 179
    2e0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e0e:	fe 01       	movw	r30, r28
    2e10:	ef 5a       	subi	r30, 0xAF	; 175
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	60 81       	ld	r22, Z
    2e16:	71 81       	ldd	r23, Z+1	; 0x01
    2e18:	82 81       	ldd	r24, Z+2	; 0x02
    2e1a:	93 81       	ldd	r25, Z+3	; 0x03
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	4a ef       	ldi	r20, 0xFA	; 250
    2e22:	54 e4       	ldi	r21, 0x44	; 68
    2e24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	f8 01       	movw	r30, r16
    2e2e:	80 83       	st	Z, r24
    2e30:	91 83       	std	Z+1, r25	; 0x01
    2e32:	a2 83       	std	Z+2, r26	; 0x02
    2e34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e36:	fe 01       	movw	r30, r28
    2e38:	e3 5b       	subi	r30, 0xB3	; 179
    2e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3c:	60 81       	ld	r22, Z
    2e3e:	71 81       	ldd	r23, Z+1	; 0x01
    2e40:	82 81       	ldd	r24, Z+2	; 0x02
    2e42:	93 81       	ldd	r25, Z+3	; 0x03
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	40 e8       	ldi	r20, 0x80	; 128
    2e4a:	5f e3       	ldi	r21, 0x3F	; 63
    2e4c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e50:	88 23       	and	r24, r24
    2e52:	44 f4       	brge	.+16     	; 0x2e64 <LCD_vidInit+0x96>
		__ticks = 1;
    2e54:	fe 01       	movw	r30, r28
    2e56:	e5 5b       	subi	r30, 0xB5	; 181
    2e58:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	91 83       	std	Z+1, r25	; 0x01
    2e60:	80 83       	st	Z, r24
    2e62:	64 c0       	rjmp	.+200    	; 0x2f2c <LCD_vidInit+0x15e>
	else if (__tmp > 65535)
    2e64:	fe 01       	movw	r30, r28
    2e66:	e3 5b       	subi	r30, 0xB3	; 179
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	60 81       	ld	r22, Z
    2e6c:	71 81       	ldd	r23, Z+1	; 0x01
    2e6e:	82 81       	ldd	r24, Z+2	; 0x02
    2e70:	93 81       	ldd	r25, Z+3	; 0x03
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	3f ef       	ldi	r19, 0xFF	; 255
    2e76:	4f e7       	ldi	r20, 0x7F	; 127
    2e78:	57 e4       	ldi	r21, 0x47	; 71
    2e7a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e7e:	18 16       	cp	r1, r24
    2e80:	0c f0       	brlt	.+2      	; 0x2e84 <LCD_vidInit+0xb6>
    2e82:	43 c0       	rjmp	.+134    	; 0x2f0a <LCD_vidInit+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e84:	fe 01       	movw	r30, r28
    2e86:	ef 5a       	subi	r30, 0xAF	; 175
    2e88:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8a:	60 81       	ld	r22, Z
    2e8c:	71 81       	ldd	r23, Z+1	; 0x01
    2e8e:	82 81       	ldd	r24, Z+2	; 0x02
    2e90:	93 81       	ldd	r25, Z+3	; 0x03
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	40 e2       	ldi	r20, 0x20	; 32
    2e98:	51 e4       	ldi	r21, 0x41	; 65
    2e9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	8e 01       	movw	r16, r28
    2ea4:	05 5b       	subi	r16, 0xB5	; 181
    2ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea8:	bc 01       	movw	r22, r24
    2eaa:	cd 01       	movw	r24, r26
    2eac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	f8 01       	movw	r30, r16
    2eb6:	91 83       	std	Z+1, r25	; 0x01
    2eb8:	80 83       	st	Z, r24
    2eba:	1f c0       	rjmp	.+62     	; 0x2efa <LCD_vidInit+0x12c>
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e7 5b       	subi	r30, 0xB7	; 183
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	88 ec       	ldi	r24, 0xC8	; 200
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	91 83       	std	Z+1, r25	; 0x01
    2ec8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2eca:	fe 01       	movw	r30, r28
    2ecc:	e7 5b       	subi	r30, 0xB7	; 183
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	80 81       	ld	r24, Z
    2ed2:	91 81       	ldd	r25, Z+1	; 0x01
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	f1 f7       	brne	.-4      	; 0x2ed4 <LCD_vidInit+0x106>
    2ed8:	fe 01       	movw	r30, r28
    2eda:	e7 5b       	subi	r30, 0xB7	; 183
    2edc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ede:	91 83       	std	Z+1, r25	; 0x01
    2ee0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee2:	de 01       	movw	r26, r28
    2ee4:	a5 5b       	subi	r26, 0xB5	; 181
    2ee6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ee8:	fe 01       	movw	r30, r28
    2eea:	e5 5b       	subi	r30, 0xB5	; 181
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	80 81       	ld	r24, Z
    2ef0:	91 81       	ldd	r25, Z+1	; 0x01
    2ef2:	01 97       	sbiw	r24, 0x01	; 1
    2ef4:	11 96       	adiw	r26, 0x01	; 1
    2ef6:	9c 93       	st	X, r25
    2ef8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efa:	fe 01       	movw	r30, r28
    2efc:	e5 5b       	subi	r30, 0xB5	; 181
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	80 81       	ld	r24, Z
    2f02:	91 81       	ldd	r25, Z+1	; 0x01
    2f04:	00 97       	sbiw	r24, 0x00	; 0
    2f06:	d1 f6       	brne	.-76     	; 0x2ebc <LCD_vidInit+0xee>
    2f08:	27 c0       	rjmp	.+78     	; 0x2f58 <LCD_vidInit+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f0a:	8e 01       	movw	r16, r28
    2f0c:	05 5b       	subi	r16, 0xB5	; 181
    2f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f10:	fe 01       	movw	r30, r28
    2f12:	e3 5b       	subi	r30, 0xB3	; 179
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	60 81       	ld	r22, Z
    2f18:	71 81       	ldd	r23, Z+1	; 0x01
    2f1a:	82 81       	ldd	r24, Z+2	; 0x02
    2f1c:	93 81       	ldd	r25, Z+3	; 0x03
    2f1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	f8 01       	movw	r30, r16
    2f28:	91 83       	std	Z+1, r25	; 0x01
    2f2a:	80 83       	st	Z, r24
    2f2c:	de 01       	movw	r26, r28
    2f2e:	a9 5b       	subi	r26, 0xB9	; 185
    2f30:	bf 4f       	sbci	r27, 0xFF	; 255
    2f32:	fe 01       	movw	r30, r28
    2f34:	e5 5b       	subi	r30, 0xB5	; 181
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	80 81       	ld	r24, Z
    2f3a:	91 81       	ldd	r25, Z+1	; 0x01
    2f3c:	8d 93       	st	X+, r24
    2f3e:	9c 93       	st	X, r25
    2f40:	fe 01       	movw	r30, r28
    2f42:	e9 5b       	subi	r30, 0xB9	; 185
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	80 81       	ld	r24, Z
    2f48:	91 81       	ldd	r25, Z+1	; 0x01
    2f4a:	01 97       	sbiw	r24, 0x01	; 1
    2f4c:	f1 f7       	brne	.-4      	; 0x2f4a <LCD_vidInit+0x17c>
    2f4e:	fe 01       	movw	r30, r28
    2f50:	e9 5b       	subi	r30, 0xB9	; 185
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	91 83       	std	Z+1, r25	; 0x01
    2f56:	80 83       	st	Z, r24

	_delay_ms(30);

	LCD_vidSendCommand(lcd_Home);
    2f58:	82 e0       	ldi	r24, 0x02	; 2
    2f5a:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_vidSendCommand>
    2f5e:	fe 01       	movw	r30, r28
    2f60:	ed 5b       	subi	r30, 0xBD	; 189
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	a0 ea       	ldi	r26, 0xA0	; 160
    2f6a:	b0 e4       	ldi	r27, 0x40	; 64
    2f6c:	80 83       	st	Z, r24
    2f6e:	91 83       	std	Z+1, r25	; 0x01
    2f70:	a2 83       	std	Z+2, r26	; 0x02
    2f72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f74:	8e 01       	movw	r16, r28
    2f76:	01 5c       	subi	r16, 0xC1	; 193
    2f78:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	ed 5b       	subi	r30, 0xBD	; 189
    2f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f80:	60 81       	ld	r22, Z
    2f82:	71 81       	ldd	r23, Z+1	; 0x01
    2f84:	82 81       	ldd	r24, Z+2	; 0x02
    2f86:	93 81       	ldd	r25, Z+3	; 0x03
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	4a ef       	ldi	r20, 0xFA	; 250
    2f8e:	54 e4       	ldi	r21, 0x44	; 68
    2f90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	f8 01       	movw	r30, r16
    2f9a:	80 83       	st	Z, r24
    2f9c:	91 83       	std	Z+1, r25	; 0x01
    2f9e:	a2 83       	std	Z+2, r26	; 0x02
    2fa0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	ff 96       	adiw	r30, 0x3f	; 63
    2fa6:	60 81       	ld	r22, Z
    2fa8:	71 81       	ldd	r23, Z+1	; 0x01
    2faa:	82 81       	ldd	r24, Z+2	; 0x02
    2fac:	93 81       	ldd	r25, Z+3	; 0x03
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	40 e8       	ldi	r20, 0x80	; 128
    2fb4:	5f e3       	ldi	r21, 0x3F	; 63
    2fb6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2fba:	88 23       	and	r24, r24
    2fbc:	2c f4       	brge	.+10     	; 0x2fc8 <LCD_vidInit+0x1fa>
		__ticks = 1;
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	9e af       	std	Y+62, r25	; 0x3e
    2fc4:	8d af       	std	Y+61, r24	; 0x3d
    2fc6:	46 c0       	rjmp	.+140    	; 0x3054 <LCD_vidInit+0x286>
	else if (__tmp > 65535)
    2fc8:	fe 01       	movw	r30, r28
    2fca:	ff 96       	adiw	r30, 0x3f	; 63
    2fcc:	60 81       	ld	r22, Z
    2fce:	71 81       	ldd	r23, Z+1	; 0x01
    2fd0:	82 81       	ldd	r24, Z+2	; 0x02
    2fd2:	93 81       	ldd	r25, Z+3	; 0x03
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	3f ef       	ldi	r19, 0xFF	; 255
    2fd8:	4f e7       	ldi	r20, 0x7F	; 127
    2fda:	57 e4       	ldi	r21, 0x47	; 71
    2fdc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2fe0:	18 16       	cp	r1, r24
    2fe2:	64 f5       	brge	.+88     	; 0x303c <LCD_vidInit+0x26e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	ed 5b       	subi	r30, 0xBD	; 189
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	60 81       	ld	r22, Z
    2fec:	71 81       	ldd	r23, Z+1	; 0x01
    2fee:	82 81       	ldd	r24, Z+2	; 0x02
    2ff0:	93 81       	ldd	r25, Z+3	; 0x03
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	40 e2       	ldi	r20, 0x20	; 32
    2ff8:	51 e4       	ldi	r21, 0x41	; 65
    2ffa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	bc 01       	movw	r22, r24
    3004:	cd 01       	movw	r24, r26
    3006:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	9e af       	std	Y+62, r25	; 0x3e
    3010:	8d af       	std	Y+61, r24	; 0x3d
    3012:	0f c0       	rjmp	.+30     	; 0x3032 <LCD_vidInit+0x264>
    3014:	88 ec       	ldi	r24, 0xC8	; 200
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	9c af       	std	Y+60, r25	; 0x3c
    301a:	8b af       	std	Y+59, r24	; 0x3b
    301c:	8b ad       	ldd	r24, Y+59	; 0x3b
    301e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	f1 f7       	brne	.-4      	; 0x3020 <LCD_vidInit+0x252>
    3024:	9c af       	std	Y+60, r25	; 0x3c
    3026:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3028:	8d ad       	ldd	r24, Y+61	; 0x3d
    302a:	9e ad       	ldd	r25, Y+62	; 0x3e
    302c:	01 97       	sbiw	r24, 0x01	; 1
    302e:	9e af       	std	Y+62, r25	; 0x3e
    3030:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3032:	8d ad       	ldd	r24, Y+61	; 0x3d
    3034:	9e ad       	ldd	r25, Y+62	; 0x3e
    3036:	00 97       	sbiw	r24, 0x00	; 0
    3038:	69 f7       	brne	.-38     	; 0x3014 <LCD_vidInit+0x246>
    303a:	16 c0       	rjmp	.+44     	; 0x3068 <LCD_vidInit+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    303c:	fe 01       	movw	r30, r28
    303e:	ff 96       	adiw	r30, 0x3f	; 63
    3040:	60 81       	ld	r22, Z
    3042:	71 81       	ldd	r23, Z+1	; 0x01
    3044:	82 81       	ldd	r24, Z+2	; 0x02
    3046:	93 81       	ldd	r25, Z+3	; 0x03
    3048:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	9e af       	std	Y+62, r25	; 0x3e
    3052:	8d af       	std	Y+61, r24	; 0x3d
    3054:	8d ad       	ldd	r24, Y+61	; 0x3d
    3056:	9e ad       	ldd	r25, Y+62	; 0x3e
    3058:	9a af       	std	Y+58, r25	; 0x3a
    305a:	89 af       	std	Y+57, r24	; 0x39
    305c:	89 ad       	ldd	r24, Y+57	; 0x39
    305e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3060:	01 97       	sbiw	r24, 0x01	; 1
    3062:	f1 f7       	brne	.-4      	; 0x3060 <LCD_vidInit+0x292>
    3064:	9a af       	std	Y+58, r25	; 0x3a
    3066:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);

	LCD_vidSendCommand(lcd_FunctionSet8bit);
    3068:	88 e3       	ldi	r24, 0x38	; 56
    306a:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_vidSendCommand>
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	a0 ea       	ldi	r26, 0xA0	; 160
    3074:	b0 e4       	ldi	r27, 0x40	; 64
    3076:	8d ab       	std	Y+53, r24	; 0x35
    3078:	9e ab       	std	Y+54, r25	; 0x36
    307a:	af ab       	std	Y+55, r26	; 0x37
    307c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    307e:	6d a9       	ldd	r22, Y+53	; 0x35
    3080:	7e a9       	ldd	r23, Y+54	; 0x36
    3082:	8f a9       	ldd	r24, Y+55	; 0x37
    3084:	98 ad       	ldd	r25, Y+56	; 0x38
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	4a ef       	ldi	r20, 0xFA	; 250
    308c:	54 e4       	ldi	r21, 0x44	; 68
    308e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	89 ab       	std	Y+49, r24	; 0x31
    3098:	9a ab       	std	Y+50, r25	; 0x32
    309a:	ab ab       	std	Y+51, r26	; 0x33
    309c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    309e:	69 a9       	ldd	r22, Y+49	; 0x31
    30a0:	7a a9       	ldd	r23, Y+50	; 0x32
    30a2:	8b a9       	ldd	r24, Y+51	; 0x33
    30a4:	9c a9       	ldd	r25, Y+52	; 0x34
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	40 e8       	ldi	r20, 0x80	; 128
    30ac:	5f e3       	ldi	r21, 0x3F	; 63
    30ae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    30b2:	88 23       	and	r24, r24
    30b4:	2c f4       	brge	.+10     	; 0x30c0 <LCD_vidInit+0x2f2>
		__ticks = 1;
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	98 ab       	std	Y+48, r25	; 0x30
    30bc:	8f a7       	std	Y+47, r24	; 0x2f
    30be:	3f c0       	rjmp	.+126    	; 0x313e <LCD_vidInit+0x370>
	else if (__tmp > 65535)
    30c0:	69 a9       	ldd	r22, Y+49	; 0x31
    30c2:	7a a9       	ldd	r23, Y+50	; 0x32
    30c4:	8b a9       	ldd	r24, Y+51	; 0x33
    30c6:	9c a9       	ldd	r25, Y+52	; 0x34
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	3f ef       	ldi	r19, 0xFF	; 255
    30cc:	4f e7       	ldi	r20, 0x7F	; 127
    30ce:	57 e4       	ldi	r21, 0x47	; 71
    30d0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    30d4:	18 16       	cp	r1, r24
    30d6:	4c f5       	brge	.+82     	; 0x312a <LCD_vidInit+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d8:	6d a9       	ldd	r22, Y+53	; 0x35
    30da:	7e a9       	ldd	r23, Y+54	; 0x36
    30dc:	8f a9       	ldd	r24, Y+55	; 0x37
    30de:	98 ad       	ldd	r25, Y+56	; 0x38
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	40 e2       	ldi	r20, 0x20	; 32
    30e6:	51 e4       	ldi	r21, 0x41	; 65
    30e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30ec:	dc 01       	movw	r26, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	bc 01       	movw	r22, r24
    30f2:	cd 01       	movw	r24, r26
    30f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	98 ab       	std	Y+48, r25	; 0x30
    30fe:	8f a7       	std	Y+47, r24	; 0x2f
    3100:	0f c0       	rjmp	.+30     	; 0x3120 <LCD_vidInit+0x352>
    3102:	88 ec       	ldi	r24, 0xC8	; 200
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	9e a7       	std	Y+46, r25	; 0x2e
    3108:	8d a7       	std	Y+45, r24	; 0x2d
    310a:	8d a5       	ldd	r24, Y+45	; 0x2d
    310c:	9e a5       	ldd	r25, Y+46	; 0x2e
    310e:	01 97       	sbiw	r24, 0x01	; 1
    3110:	f1 f7       	brne	.-4      	; 0x310e <LCD_vidInit+0x340>
    3112:	9e a7       	std	Y+46, r25	; 0x2e
    3114:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3116:	8f a5       	ldd	r24, Y+47	; 0x2f
    3118:	98 a9       	ldd	r25, Y+48	; 0x30
    311a:	01 97       	sbiw	r24, 0x01	; 1
    311c:	98 ab       	std	Y+48, r25	; 0x30
    311e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3120:	8f a5       	ldd	r24, Y+47	; 0x2f
    3122:	98 a9       	ldd	r25, Y+48	; 0x30
    3124:	00 97       	sbiw	r24, 0x00	; 0
    3126:	69 f7       	brne	.-38     	; 0x3102 <LCD_vidInit+0x334>
    3128:	14 c0       	rjmp	.+40     	; 0x3152 <LCD_vidInit+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    312a:	69 a9       	ldd	r22, Y+49	; 0x31
    312c:	7a a9       	ldd	r23, Y+50	; 0x32
    312e:	8b a9       	ldd	r24, Y+51	; 0x33
    3130:	9c a9       	ldd	r25, Y+52	; 0x34
    3132:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	98 ab       	std	Y+48, r25	; 0x30
    313c:	8f a7       	std	Y+47, r24	; 0x2f
    313e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3140:	98 a9       	ldd	r25, Y+48	; 0x30
    3142:	9c a7       	std	Y+44, r25	; 0x2c
    3144:	8b a7       	std	Y+43, r24	; 0x2b
    3146:	8b a5       	ldd	r24, Y+43	; 0x2b
    3148:	9c a5       	ldd	r25, Y+44	; 0x2c
    314a:	01 97       	sbiw	r24, 0x01	; 1
    314c:	f1 f7       	brne	.-4      	; 0x314a <LCD_vidInit+0x37c>
    314e:	9c a7       	std	Y+44, r25	; 0x2c
    3150:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);

	LCD_vidSendCommand(lcd_DisplayOn);
    3152:	8c e0       	ldi	r24, 0x0C	; 12
    3154:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_vidSendCommand>
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	a0 ea       	ldi	r26, 0xA0	; 160
    315e:	b0 e4       	ldi	r27, 0x40	; 64
    3160:	8f a3       	std	Y+39, r24	; 0x27
    3162:	98 a7       	std	Y+40, r25	; 0x28
    3164:	a9 a7       	std	Y+41, r26	; 0x29
    3166:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3168:	6f a1       	ldd	r22, Y+39	; 0x27
    316a:	78 a5       	ldd	r23, Y+40	; 0x28
    316c:	89 a5       	ldd	r24, Y+41	; 0x29
    316e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	4a ef       	ldi	r20, 0xFA	; 250
    3176:	54 e4       	ldi	r21, 0x44	; 68
    3178:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	8b a3       	std	Y+35, r24	; 0x23
    3182:	9c a3       	std	Y+36, r25	; 0x24
    3184:	ad a3       	std	Y+37, r26	; 0x25
    3186:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3188:	6b a1       	ldd	r22, Y+35	; 0x23
    318a:	7c a1       	ldd	r23, Y+36	; 0x24
    318c:	8d a1       	ldd	r24, Y+37	; 0x25
    318e:	9e a1       	ldd	r25, Y+38	; 0x26
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	40 e8       	ldi	r20, 0x80	; 128
    3196:	5f e3       	ldi	r21, 0x3F	; 63
    3198:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    319c:	88 23       	and	r24, r24
    319e:	2c f4       	brge	.+10     	; 0x31aa <LCD_vidInit+0x3dc>
		__ticks = 1;
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	9a a3       	std	Y+34, r25	; 0x22
    31a6:	89 a3       	std	Y+33, r24	; 0x21
    31a8:	3f c0       	rjmp	.+126    	; 0x3228 <LCD_vidInit+0x45a>
	else if (__tmp > 65535)
    31aa:	6b a1       	ldd	r22, Y+35	; 0x23
    31ac:	7c a1       	ldd	r23, Y+36	; 0x24
    31ae:	8d a1       	ldd	r24, Y+37	; 0x25
    31b0:	9e a1       	ldd	r25, Y+38	; 0x26
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	3f ef       	ldi	r19, 0xFF	; 255
    31b6:	4f e7       	ldi	r20, 0x7F	; 127
    31b8:	57 e4       	ldi	r21, 0x47	; 71
    31ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    31be:	18 16       	cp	r1, r24
    31c0:	4c f5       	brge	.+82     	; 0x3214 <LCD_vidInit+0x446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c2:	6f a1       	ldd	r22, Y+39	; 0x27
    31c4:	78 a5       	ldd	r23, Y+40	; 0x28
    31c6:	89 a5       	ldd	r24, Y+41	; 0x29
    31c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e2       	ldi	r20, 0x20	; 32
    31d0:	51 e4       	ldi	r21, 0x41	; 65
    31d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	bc 01       	movw	r22, r24
    31dc:	cd 01       	movw	r24, r26
    31de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	9a a3       	std	Y+34, r25	; 0x22
    31e8:	89 a3       	std	Y+33, r24	; 0x21
    31ea:	0f c0       	rjmp	.+30     	; 0x320a <LCD_vidInit+0x43c>
    31ec:	88 ec       	ldi	r24, 0xC8	; 200
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	98 a3       	std	Y+32, r25	; 0x20
    31f2:	8f 8f       	std	Y+31, r24	; 0x1f
    31f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31f6:	98 a1       	ldd	r25, Y+32	; 0x20
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	f1 f7       	brne	.-4      	; 0x31f8 <LCD_vidInit+0x42a>
    31fc:	98 a3       	std	Y+32, r25	; 0x20
    31fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3200:	89 a1       	ldd	r24, Y+33	; 0x21
    3202:	9a a1       	ldd	r25, Y+34	; 0x22
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	9a a3       	std	Y+34, r25	; 0x22
    3208:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    320a:	89 a1       	ldd	r24, Y+33	; 0x21
    320c:	9a a1       	ldd	r25, Y+34	; 0x22
    320e:	00 97       	sbiw	r24, 0x00	; 0
    3210:	69 f7       	brne	.-38     	; 0x31ec <LCD_vidInit+0x41e>
    3212:	14 c0       	rjmp	.+40     	; 0x323c <LCD_vidInit+0x46e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3214:	6b a1       	ldd	r22, Y+35	; 0x23
    3216:	7c a1       	ldd	r23, Y+36	; 0x24
    3218:	8d a1       	ldd	r24, Y+37	; 0x25
    321a:	9e a1       	ldd	r25, Y+38	; 0x26
    321c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	9a a3       	std	Y+34, r25	; 0x22
    3226:	89 a3       	std	Y+33, r24	; 0x21
    3228:	89 a1       	ldd	r24, Y+33	; 0x21
    322a:	9a a1       	ldd	r25, Y+34	; 0x22
    322c:	9e 8f       	std	Y+30, r25	; 0x1e
    322e:	8d 8f       	std	Y+29, r24	; 0x1d
    3230:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3232:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	f1 f7       	brne	.-4      	; 0x3234 <LCD_vidInit+0x466>
    3238:	9e 8f       	std	Y+30, r25	; 0x1e
    323a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	LCD_vidSendCommand(lcd_Clear);
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_vidSendCommand>
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	a0 ea       	ldi	r26, 0xA0	; 160
    3248:	b0 e4       	ldi	r27, 0x40	; 64
    324a:	89 8f       	std	Y+25, r24	; 0x19
    324c:	9a 8f       	std	Y+26, r25	; 0x1a
    324e:	ab 8f       	std	Y+27, r26	; 0x1b
    3250:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3252:	69 8d       	ldd	r22, Y+25	; 0x19
    3254:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3256:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3258:	9c 8d       	ldd	r25, Y+28	; 0x1c
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	4a ef       	ldi	r20, 0xFA	; 250
    3260:	54 e4       	ldi	r21, 0x44	; 68
    3262:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	8d 8b       	std	Y+21, r24	; 0x15
    326c:	9e 8b       	std	Y+22, r25	; 0x16
    326e:	af 8b       	std	Y+23, r26	; 0x17
    3270:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3272:	6d 89       	ldd	r22, Y+21	; 0x15
    3274:	7e 89       	ldd	r23, Y+22	; 0x16
    3276:	8f 89       	ldd	r24, Y+23	; 0x17
    3278:	98 8d       	ldd	r25, Y+24	; 0x18
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e8       	ldi	r20, 0x80	; 128
    3280:	5f e3       	ldi	r21, 0x3F	; 63
    3282:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3286:	88 23       	and	r24, r24
    3288:	2c f4       	brge	.+10     	; 0x3294 <LCD_vidInit+0x4c6>
		__ticks = 1;
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	9c 8b       	std	Y+20, r25	; 0x14
    3290:	8b 8b       	std	Y+19, r24	; 0x13
    3292:	3f c0       	rjmp	.+126    	; 0x3312 <LCD_vidInit+0x544>
	else if (__tmp > 65535)
    3294:	6d 89       	ldd	r22, Y+21	; 0x15
    3296:	7e 89       	ldd	r23, Y+22	; 0x16
    3298:	8f 89       	ldd	r24, Y+23	; 0x17
    329a:	98 8d       	ldd	r25, Y+24	; 0x18
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	3f ef       	ldi	r19, 0xFF	; 255
    32a0:	4f e7       	ldi	r20, 0x7F	; 127
    32a2:	57 e4       	ldi	r21, 0x47	; 71
    32a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    32a8:	18 16       	cp	r1, r24
    32aa:	4c f5       	brge	.+82     	; 0x32fe <LCD_vidInit+0x530>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ac:	69 8d       	ldd	r22, Y+25	; 0x19
    32ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	40 e2       	ldi	r20, 0x20	; 32
    32ba:	51 e4       	ldi	r21, 0x41	; 65
    32bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	bc 01       	movw	r22, r24
    32c6:	cd 01       	movw	r24, r26
    32c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	9c 8b       	std	Y+20, r25	; 0x14
    32d2:	8b 8b       	std	Y+19, r24	; 0x13
    32d4:	0f c0       	rjmp	.+30     	; 0x32f4 <LCD_vidInit+0x526>
    32d6:	88 ec       	ldi	r24, 0xC8	; 200
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	9a 8b       	std	Y+18, r25	; 0x12
    32dc:	89 8b       	std	Y+17, r24	; 0x11
    32de:	89 89       	ldd	r24, Y+17	; 0x11
    32e0:	9a 89       	ldd	r25, Y+18	; 0x12
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	f1 f7       	brne	.-4      	; 0x32e2 <LCD_vidInit+0x514>
    32e6:	9a 8b       	std	Y+18, r25	; 0x12
    32e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ea:	8b 89       	ldd	r24, Y+19	; 0x13
    32ec:	9c 89       	ldd	r25, Y+20	; 0x14
    32ee:	01 97       	sbiw	r24, 0x01	; 1
    32f0:	9c 8b       	std	Y+20, r25	; 0x14
    32f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f4:	8b 89       	ldd	r24, Y+19	; 0x13
    32f6:	9c 89       	ldd	r25, Y+20	; 0x14
    32f8:	00 97       	sbiw	r24, 0x00	; 0
    32fa:	69 f7       	brne	.-38     	; 0x32d6 <LCD_vidInit+0x508>
    32fc:	14 c0       	rjmp	.+40     	; 0x3326 <LCD_vidInit+0x558>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3300:	7e 89       	ldd	r23, Y+22	; 0x16
    3302:	8f 89       	ldd	r24, Y+23	; 0x17
    3304:	98 8d       	ldd	r25, Y+24	; 0x18
    3306:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	9c 8b       	std	Y+20, r25	; 0x14
    3310:	8b 8b       	std	Y+19, r24	; 0x13
    3312:	8b 89       	ldd	r24, Y+19	; 0x13
    3314:	9c 89       	ldd	r25, Y+20	; 0x14
    3316:	98 8b       	std	Y+16, r25	; 0x10
    3318:	8f 87       	std	Y+15, r24	; 0x0f
    331a:	8f 85       	ldd	r24, Y+15	; 0x0f
    331c:	98 89       	ldd	r25, Y+16	; 0x10
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	f1 f7       	brne	.-4      	; 0x331e <LCD_vidInit+0x550>
    3322:	98 8b       	std	Y+16, r25	; 0x10
    3324:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);

	LCD_vidSendCommand(lcd_EntryMode);
    3326:	86 e0       	ldi	r24, 0x06	; 6
    3328:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_vidSendCommand>
    332c:	80 e0       	ldi	r24, 0x00	; 0
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	a0 ea       	ldi	r26, 0xA0	; 160
    3332:	b0 e4       	ldi	r27, 0x40	; 64
    3334:	8b 87       	std	Y+11, r24	; 0x0b
    3336:	9c 87       	std	Y+12, r25	; 0x0c
    3338:	ad 87       	std	Y+13, r26	; 0x0d
    333a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    333c:	6b 85       	ldd	r22, Y+11	; 0x0b
    333e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3340:	8d 85       	ldd	r24, Y+13	; 0x0d
    3342:	9e 85       	ldd	r25, Y+14	; 0x0e
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	4a ef       	ldi	r20, 0xFA	; 250
    334a:	54 e4       	ldi	r21, 0x44	; 68
    334c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	8f 83       	std	Y+7, r24	; 0x07
    3356:	98 87       	std	Y+8, r25	; 0x08
    3358:	a9 87       	std	Y+9, r26	; 0x09
    335a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    335c:	6f 81       	ldd	r22, Y+7	; 0x07
    335e:	78 85       	ldd	r23, Y+8	; 0x08
    3360:	89 85       	ldd	r24, Y+9	; 0x09
    3362:	9a 85       	ldd	r25, Y+10	; 0x0a
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	40 e8       	ldi	r20, 0x80	; 128
    336a:	5f e3       	ldi	r21, 0x3F	; 63
    336c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3370:	88 23       	and	r24, r24
    3372:	2c f4       	brge	.+10     	; 0x337e <LCD_vidInit+0x5b0>
		__ticks = 1;
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	9e 83       	std	Y+6, r25	; 0x06
    337a:	8d 83       	std	Y+5, r24	; 0x05
    337c:	3f c0       	rjmp	.+126    	; 0x33fc <LCD_vidInit+0x62e>
	else if (__tmp > 65535)
    337e:	6f 81       	ldd	r22, Y+7	; 0x07
    3380:	78 85       	ldd	r23, Y+8	; 0x08
    3382:	89 85       	ldd	r24, Y+9	; 0x09
    3384:	9a 85       	ldd	r25, Y+10	; 0x0a
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	3f ef       	ldi	r19, 0xFF	; 255
    338a:	4f e7       	ldi	r20, 0x7F	; 127
    338c:	57 e4       	ldi	r21, 0x47	; 71
    338e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3392:	18 16       	cp	r1, r24
    3394:	4c f5       	brge	.+82     	; 0x33e8 <LCD_vidInit+0x61a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3396:	6b 85       	ldd	r22, Y+11	; 0x0b
    3398:	7c 85       	ldd	r23, Y+12	; 0x0c
    339a:	8d 85       	ldd	r24, Y+13	; 0x0d
    339c:	9e 85       	ldd	r25, Y+14	; 0x0e
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	40 e2       	ldi	r20, 0x20	; 32
    33a4:	51 e4       	ldi	r21, 0x41	; 65
    33a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	bc 01       	movw	r22, r24
    33b0:	cd 01       	movw	r24, r26
    33b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	9e 83       	std	Y+6, r25	; 0x06
    33bc:	8d 83       	std	Y+5, r24	; 0x05
    33be:	0f c0       	rjmp	.+30     	; 0x33de <LCD_vidInit+0x610>
    33c0:	88 ec       	ldi	r24, 0xC8	; 200
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	9c 83       	std	Y+4, r25	; 0x04
    33c6:	8b 83       	std	Y+3, r24	; 0x03
    33c8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ca:	9c 81       	ldd	r25, Y+4	; 0x04
    33cc:	01 97       	sbiw	r24, 0x01	; 1
    33ce:	f1 f7       	brne	.-4      	; 0x33cc <LCD_vidInit+0x5fe>
    33d0:	9c 83       	std	Y+4, r25	; 0x04
    33d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d4:	8d 81       	ldd	r24, Y+5	; 0x05
    33d6:	9e 81       	ldd	r25, Y+6	; 0x06
    33d8:	01 97       	sbiw	r24, 0x01	; 1
    33da:	9e 83       	std	Y+6, r25	; 0x06
    33dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33de:	8d 81       	ldd	r24, Y+5	; 0x05
    33e0:	9e 81       	ldd	r25, Y+6	; 0x06
    33e2:	00 97       	sbiw	r24, 0x00	; 0
    33e4:	69 f7       	brne	.-38     	; 0x33c0 <LCD_vidInit+0x5f2>
    33e6:	14 c0       	rjmp	.+40     	; 0x3410 <LCD_vidInit+0x642>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33e8:	6f 81       	ldd	r22, Y+7	; 0x07
    33ea:	78 85       	ldd	r23, Y+8	; 0x08
    33ec:	89 85       	ldd	r24, Y+9	; 0x09
    33ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	9e 83       	std	Y+6, r25	; 0x06
    33fa:	8d 83       	std	Y+5, r24	; 0x05
    33fc:	8d 81       	ldd	r24, Y+5	; 0x05
    33fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3400:	9a 83       	std	Y+2, r25	; 0x02
    3402:	89 83       	std	Y+1, r24	; 0x01
    3404:	89 81       	ldd	r24, Y+1	; 0x01
    3406:	9a 81       	ldd	r25, Y+2	; 0x02
    3408:	01 97       	sbiw	r24, 0x01	; 1
    340a:	f1 f7       	brne	.-4      	; 0x3408 <LCD_vidInit+0x63a>
    340c:	9a 83       	std	Y+2, r25	; 0x02
    340e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);


}
    3410:	cc 5a       	subi	r28, 0xAC	; 172
    3412:	df 4f       	sbci	r29, 0xFF	; 255
    3414:	0f b6       	in	r0, 0x3f	; 63
    3416:	f8 94       	cli
    3418:	de bf       	out	0x3e, r29	; 62
    341a:	0f be       	out	0x3f, r0	; 63
    341c:	cd bf       	out	0x3d, r28	; 61
    341e:	cf 91       	pop	r28
    3420:	df 91       	pop	r29
    3422:	1f 91       	pop	r17
    3424:	0f 91       	pop	r16
    3426:	08 95       	ret

00003428 <LCD_vidSendCommand>:
void LCD_vidSendCommand(u8 u8CmdCpy){
    3428:	df 93       	push	r29
    342a:	cf 93       	push	r28
    342c:	cd b7       	in	r28, 0x3d	; 61
    342e:	de b7       	in	r29, 0x3e	; 62
    3430:	2f 97       	sbiw	r28, 0x0f	; 15
    3432:	0f b6       	in	r0, 0x3f	; 63
    3434:	f8 94       	cli
    3436:	de bf       	out	0x3e, r29	; 62
    3438:	0f be       	out	0x3f, r0	; 63
    343a:	cd bf       	out	0x3d, r28	; 61
    343c:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_vSetPinVal(lcd_CONTROLPORT,lcd_RSPIN,DIO_LOW);
    343e:	82 e0       	ldi	r24, 0x02	; 2
    3440:	61 e0       	ldi	r22, 0x01	; 1
    3442:	40 e0       	ldi	r20, 0x00	; 0
    3444:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(lcd_CONTROLPORT,lcd_RWPIN,DIO_LOW);
    3448:	82 e0       	ldi	r24, 0x02	; 2
    344a:	60 e0       	ldi	r22, 0x00	; 0
    344c:	40 e0       	ldi	r20, 0x00	; 0
    344e:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(lcd_CONTROLPORT,lcd_EPIN,DIO_LOW);
    3452:	82 e0       	ldi	r24, 0x02	; 2
    3454:	62 e0       	ldi	r22, 0x02	; 2
    3456:	40 e0       	ldi	r20, 0x00	; 0
    3458:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>
	MDIO_vSetPortVal(lcd_DATAPORT,u8CmdCpy);
    345c:	83 e0       	ldi	r24, 0x03	; 3
    345e:	6f 85       	ldd	r22, Y+15	; 0x0f
    3460:	0e 94 4a 14 	call	0x2894	; 0x2894 <MDIO_vSetPortVal>
	MDIO_vSetPinVal(lcd_CONTROLPORT,lcd_EPIN,DIO_HIGH);
    3464:	82 e0       	ldi	r24, 0x02	; 2
    3466:	62 e0       	ldi	r22, 0x02	; 2
    3468:	41 e0       	ldi	r20, 0x01	; 1
    346a:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>
    346e:	80 e0       	ldi	r24, 0x00	; 0
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	a0 ea       	ldi	r26, 0xA0	; 160
    3474:	b0 e4       	ldi	r27, 0x40	; 64
    3476:	8b 87       	std	Y+11, r24	; 0x0b
    3478:	9c 87       	std	Y+12, r25	; 0x0c
    347a:	ad 87       	std	Y+13, r26	; 0x0d
    347c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    347e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3480:	7c 85       	ldd	r23, Y+12	; 0x0c
    3482:	8d 85       	ldd	r24, Y+13	; 0x0d
    3484:	9e 85       	ldd	r25, Y+14	; 0x0e
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	4a ef       	ldi	r20, 0xFA	; 250
    348c:	54 e4       	ldi	r21, 0x44	; 68
    348e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	8f 83       	std	Y+7, r24	; 0x07
    3498:	98 87       	std	Y+8, r25	; 0x08
    349a:	a9 87       	std	Y+9, r26	; 0x09
    349c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    349e:	6f 81       	ldd	r22, Y+7	; 0x07
    34a0:	78 85       	ldd	r23, Y+8	; 0x08
    34a2:	89 85       	ldd	r24, Y+9	; 0x09
    34a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	40 e8       	ldi	r20, 0x80	; 128
    34ac:	5f e3       	ldi	r21, 0x3F	; 63
    34ae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    34b2:	88 23       	and	r24, r24
    34b4:	2c f4       	brge	.+10     	; 0x34c0 <LCD_vidSendCommand+0x98>
		__ticks = 1;
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	9e 83       	std	Y+6, r25	; 0x06
    34bc:	8d 83       	std	Y+5, r24	; 0x05
    34be:	3f c0       	rjmp	.+126    	; 0x353e <LCD_vidSendCommand+0x116>
	else if (__tmp > 65535)
    34c0:	6f 81       	ldd	r22, Y+7	; 0x07
    34c2:	78 85       	ldd	r23, Y+8	; 0x08
    34c4:	89 85       	ldd	r24, Y+9	; 0x09
    34c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	3f ef       	ldi	r19, 0xFF	; 255
    34cc:	4f e7       	ldi	r20, 0x7F	; 127
    34ce:	57 e4       	ldi	r21, 0x47	; 71
    34d0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    34d4:	18 16       	cp	r1, r24
    34d6:	4c f5       	brge	.+82     	; 0x352a <LCD_vidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    34da:	7c 85       	ldd	r23, Y+12	; 0x0c
    34dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34de:	9e 85       	ldd	r25, Y+14	; 0x0e
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	40 e2       	ldi	r20, 0x20	; 32
    34e6:	51 e4       	ldi	r21, 0x41	; 65
    34e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34ec:	dc 01       	movw	r26, r24
    34ee:	cb 01       	movw	r24, r22
    34f0:	bc 01       	movw	r22, r24
    34f2:	cd 01       	movw	r24, r26
    34f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
    34fc:	9e 83       	std	Y+6, r25	; 0x06
    34fe:	8d 83       	std	Y+5, r24	; 0x05
    3500:	0f c0       	rjmp	.+30     	; 0x3520 <LCD_vidSendCommand+0xf8>
    3502:	88 ec       	ldi	r24, 0xC8	; 200
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	9c 83       	std	Y+4, r25	; 0x04
    3508:	8b 83       	std	Y+3, r24	; 0x03
    350a:	8b 81       	ldd	r24, Y+3	; 0x03
    350c:	9c 81       	ldd	r25, Y+4	; 0x04
    350e:	01 97       	sbiw	r24, 0x01	; 1
    3510:	f1 f7       	brne	.-4      	; 0x350e <LCD_vidSendCommand+0xe6>
    3512:	9c 83       	std	Y+4, r25	; 0x04
    3514:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3516:	8d 81       	ldd	r24, Y+5	; 0x05
    3518:	9e 81       	ldd	r25, Y+6	; 0x06
    351a:	01 97       	sbiw	r24, 0x01	; 1
    351c:	9e 83       	std	Y+6, r25	; 0x06
    351e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3520:	8d 81       	ldd	r24, Y+5	; 0x05
    3522:	9e 81       	ldd	r25, Y+6	; 0x06
    3524:	00 97       	sbiw	r24, 0x00	; 0
    3526:	69 f7       	brne	.-38     	; 0x3502 <LCD_vidSendCommand+0xda>
    3528:	14 c0       	rjmp	.+40     	; 0x3552 <LCD_vidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    352a:	6f 81       	ldd	r22, Y+7	; 0x07
    352c:	78 85       	ldd	r23, Y+8	; 0x08
    352e:	89 85       	ldd	r24, Y+9	; 0x09
    3530:	9a 85       	ldd	r25, Y+10	; 0x0a
    3532:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3536:	dc 01       	movw	r26, r24
    3538:	cb 01       	movw	r24, r22
    353a:	9e 83       	std	Y+6, r25	; 0x06
    353c:	8d 83       	std	Y+5, r24	; 0x05
    353e:	8d 81       	ldd	r24, Y+5	; 0x05
    3540:	9e 81       	ldd	r25, Y+6	; 0x06
    3542:	9a 83       	std	Y+2, r25	; 0x02
    3544:	89 83       	std	Y+1, r24	; 0x01
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	9a 81       	ldd	r25, Y+2	; 0x02
    354a:	01 97       	sbiw	r24, 0x01	; 1
    354c:	f1 f7       	brne	.-4      	; 0x354a <LCD_vidSendCommand+0x122>
    354e:	9a 83       	std	Y+2, r25	; 0x02
    3550:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	MDIO_vSetPinVal(lcd_CONTROLPORT,lcd_EPIN,DIO_LOW);
    3552:	82 e0       	ldi	r24, 0x02	; 2
    3554:	62 e0       	ldi	r22, 0x02	; 2
    3556:	40 e0       	ldi	r20, 0x00	; 0
    3558:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>

}
    355c:	2f 96       	adiw	r28, 0x0f	; 15
    355e:	0f b6       	in	r0, 0x3f	; 63
    3560:	f8 94       	cli
    3562:	de bf       	out	0x3e, r29	; 62
    3564:	0f be       	out	0x3f, r0	; 63
    3566:	cd bf       	out	0x3d, r28	; 61
    3568:	cf 91       	pop	r28
    356a:	df 91       	pop	r29
    356c:	08 95       	ret

0000356e <LCD_vidWriteCharctr>:
void LCD_vidWriteCharctr(u8 u8DataCpy){
    356e:	df 93       	push	r29
    3570:	cf 93       	push	r28
    3572:	cd b7       	in	r28, 0x3d	; 61
    3574:	de b7       	in	r29, 0x3e	; 62
    3576:	2f 97       	sbiw	r28, 0x0f	; 15
    3578:	0f b6       	in	r0, 0x3f	; 63
    357a:	f8 94       	cli
    357c:	de bf       	out	0x3e, r29	; 62
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	cd bf       	out	0x3d, r28	; 61
    3582:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_vSetPinVal(lcd_CONTROLPORT,lcd_RSPIN,DIO_HIGH);
    3584:	82 e0       	ldi	r24, 0x02	; 2
    3586:	61 e0       	ldi	r22, 0x01	; 1
    3588:	41 e0       	ldi	r20, 0x01	; 1
    358a:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(lcd_CONTROLPORT,lcd_RWPIN,DIO_LOW);
    358e:	82 e0       	ldi	r24, 0x02	; 2
    3590:	60 e0       	ldi	r22, 0x00	; 0
    3592:	40 e0       	ldi	r20, 0x00	; 0
    3594:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(lcd_CONTROLPORT,lcd_EPIN,DIO_LOW);
    3598:	82 e0       	ldi	r24, 0x02	; 2
    359a:	62 e0       	ldi	r22, 0x02	; 2
    359c:	40 e0       	ldi	r20, 0x00	; 0
    359e:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>
	MDIO_vSetPortVal(lcd_DATAPORT,u8DataCpy);
    35a2:	83 e0       	ldi	r24, 0x03	; 3
    35a4:	6f 85       	ldd	r22, Y+15	; 0x0f
    35a6:	0e 94 4a 14 	call	0x2894	; 0x2894 <MDIO_vSetPortVal>
	MDIO_vSetPinVal(lcd_CONTROLPORT,lcd_EPIN,DIO_HIGH);
    35aa:	82 e0       	ldi	r24, 0x02	; 2
    35ac:	62 e0       	ldi	r22, 0x02	; 2
    35ae:	41 e0       	ldi	r20, 0x01	; 1
    35b0:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>
    35b4:	80 e0       	ldi	r24, 0x00	; 0
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	a0 ea       	ldi	r26, 0xA0	; 160
    35ba:	b0 e4       	ldi	r27, 0x40	; 64
    35bc:	8b 87       	std	Y+11, r24	; 0x0b
    35be:	9c 87       	std	Y+12, r25	; 0x0c
    35c0:	ad 87       	std	Y+13, r26	; 0x0d
    35c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    35c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    35c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	4a ef       	ldi	r20, 0xFA	; 250
    35d2:	54 e4       	ldi	r21, 0x44	; 68
    35d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	8f 83       	std	Y+7, r24	; 0x07
    35de:	98 87       	std	Y+8, r25	; 0x08
    35e0:	a9 87       	std	Y+9, r26	; 0x09
    35e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35e4:	6f 81       	ldd	r22, Y+7	; 0x07
    35e6:	78 85       	ldd	r23, Y+8	; 0x08
    35e8:	89 85       	ldd	r24, Y+9	; 0x09
    35ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ec:	20 e0       	ldi	r18, 0x00	; 0
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	40 e8       	ldi	r20, 0x80	; 128
    35f2:	5f e3       	ldi	r21, 0x3F	; 63
    35f4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    35f8:	88 23       	and	r24, r24
    35fa:	2c f4       	brge	.+10     	; 0x3606 <LCD_vidWriteCharctr+0x98>
		__ticks = 1;
    35fc:	81 e0       	ldi	r24, 0x01	; 1
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	9e 83       	std	Y+6, r25	; 0x06
    3602:	8d 83       	std	Y+5, r24	; 0x05
    3604:	3f c0       	rjmp	.+126    	; 0x3684 <LCD_vidWriteCharctr+0x116>
	else if (__tmp > 65535)
    3606:	6f 81       	ldd	r22, Y+7	; 0x07
    3608:	78 85       	ldd	r23, Y+8	; 0x08
    360a:	89 85       	ldd	r24, Y+9	; 0x09
    360c:	9a 85       	ldd	r25, Y+10	; 0x0a
    360e:	20 e0       	ldi	r18, 0x00	; 0
    3610:	3f ef       	ldi	r19, 0xFF	; 255
    3612:	4f e7       	ldi	r20, 0x7F	; 127
    3614:	57 e4       	ldi	r21, 0x47	; 71
    3616:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    361a:	18 16       	cp	r1, r24
    361c:	4c f5       	brge	.+82     	; 0x3670 <LCD_vidWriteCharctr+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    361e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3620:	7c 85       	ldd	r23, Y+12	; 0x0c
    3622:	8d 85       	ldd	r24, Y+13	; 0x0d
    3624:	9e 85       	ldd	r25, Y+14	; 0x0e
    3626:	20 e0       	ldi	r18, 0x00	; 0
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	40 e2       	ldi	r20, 0x20	; 32
    362c:	51 e4       	ldi	r21, 0x41	; 65
    362e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3632:	dc 01       	movw	r26, r24
    3634:	cb 01       	movw	r24, r22
    3636:	bc 01       	movw	r22, r24
    3638:	cd 01       	movw	r24, r26
    363a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    363e:	dc 01       	movw	r26, r24
    3640:	cb 01       	movw	r24, r22
    3642:	9e 83       	std	Y+6, r25	; 0x06
    3644:	8d 83       	std	Y+5, r24	; 0x05
    3646:	0f c0       	rjmp	.+30     	; 0x3666 <LCD_vidWriteCharctr+0xf8>
    3648:	88 ec       	ldi	r24, 0xC8	; 200
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	9c 83       	std	Y+4, r25	; 0x04
    364e:	8b 83       	std	Y+3, r24	; 0x03
    3650:	8b 81       	ldd	r24, Y+3	; 0x03
    3652:	9c 81       	ldd	r25, Y+4	; 0x04
    3654:	01 97       	sbiw	r24, 0x01	; 1
    3656:	f1 f7       	brne	.-4      	; 0x3654 <LCD_vidWriteCharctr+0xe6>
    3658:	9c 83       	std	Y+4, r25	; 0x04
    365a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    365c:	8d 81       	ldd	r24, Y+5	; 0x05
    365e:	9e 81       	ldd	r25, Y+6	; 0x06
    3660:	01 97       	sbiw	r24, 0x01	; 1
    3662:	9e 83       	std	Y+6, r25	; 0x06
    3664:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3666:	8d 81       	ldd	r24, Y+5	; 0x05
    3668:	9e 81       	ldd	r25, Y+6	; 0x06
    366a:	00 97       	sbiw	r24, 0x00	; 0
    366c:	69 f7       	brne	.-38     	; 0x3648 <LCD_vidWriteCharctr+0xda>
    366e:	14 c0       	rjmp	.+40     	; 0x3698 <LCD_vidWriteCharctr+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3670:	6f 81       	ldd	r22, Y+7	; 0x07
    3672:	78 85       	ldd	r23, Y+8	; 0x08
    3674:	89 85       	ldd	r24, Y+9	; 0x09
    3676:	9a 85       	ldd	r25, Y+10	; 0x0a
    3678:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	9e 83       	std	Y+6, r25	; 0x06
    3682:	8d 83       	std	Y+5, r24	; 0x05
    3684:	8d 81       	ldd	r24, Y+5	; 0x05
    3686:	9e 81       	ldd	r25, Y+6	; 0x06
    3688:	9a 83       	std	Y+2, r25	; 0x02
    368a:	89 83       	std	Y+1, r24	; 0x01
    368c:	89 81       	ldd	r24, Y+1	; 0x01
    368e:	9a 81       	ldd	r25, Y+2	; 0x02
    3690:	01 97       	sbiw	r24, 0x01	; 1
    3692:	f1 f7       	brne	.-4      	; 0x3690 <LCD_vidWriteCharctr+0x122>
    3694:	9a 83       	std	Y+2, r25	; 0x02
    3696:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	MDIO_vSetPinVal(lcd_CONTROLPORT,lcd_EPIN,DIO_LOW);
    3698:	82 e0       	ldi	r24, 0x02	; 2
    369a:	62 e0       	ldi	r22, 0x02	; 2
    369c:	40 e0       	ldi	r20, 0x00	; 0
    369e:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>
}
    36a2:	2f 96       	adiw	r28, 0x0f	; 15
    36a4:	0f b6       	in	r0, 0x3f	; 63
    36a6:	f8 94       	cli
    36a8:	de bf       	out	0x3e, r29	; 62
    36aa:	0f be       	out	0x3f, r0	; 63
    36ac:	cd bf       	out	0x3d, r28	; 61
    36ae:	cf 91       	pop	r28
    36b0:	df 91       	pop	r29
    36b2:	08 95       	ret

000036b4 <LCD_vidWriteString>:
void LCD_vidWriteString (u8* pu8StringCpy, u8 u8Index){
    36b4:	df 93       	push	r29
    36b6:	cf 93       	push	r28
    36b8:	00 d0       	rcall	.+0      	; 0x36ba <LCD_vidWriteString+0x6>
    36ba:	00 d0       	rcall	.+0      	; 0x36bc <LCD_vidWriteString+0x8>
    36bc:	cd b7       	in	r28, 0x3d	; 61
    36be:	de b7       	in	r29, 0x3e	; 62
    36c0:	9b 83       	std	Y+3, r25	; 0x03
    36c2:	8a 83       	std	Y+2, r24	; 0x02
    36c4:	6c 83       	std	Y+4, r22	; 0x04
	u8 i=0;
    36c6:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<u8Index;i++){
    36c8:	19 82       	std	Y+1, r1	; 0x01
    36ca:	0e c0       	rjmp	.+28     	; 0x36e8 <LCD_vidWriteString+0x34>
		LCD_vidWriteCharctr(pu8StringCpy[i]);
    36cc:	89 81       	ldd	r24, Y+1	; 0x01
    36ce:	28 2f       	mov	r18, r24
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	8a 81       	ldd	r24, Y+2	; 0x02
    36d4:	9b 81       	ldd	r25, Y+3	; 0x03
    36d6:	fc 01       	movw	r30, r24
    36d8:	e2 0f       	add	r30, r18
    36da:	f3 1f       	adc	r31, r19
    36dc:	80 81       	ld	r24, Z
    36de:	0e 94 b7 1a 	call	0x356e	; 0x356e <LCD_vidWriteCharctr>
	_delay_ms(5);
	MDIO_vSetPinVal(lcd_CONTROLPORT,lcd_EPIN,DIO_LOW);
}
void LCD_vidWriteString (u8* pu8StringCpy, u8 u8Index){
	u8 i=0;
	for(i=0;i<u8Index;i++){
    36e2:	89 81       	ldd	r24, Y+1	; 0x01
    36e4:	8f 5f       	subi	r24, 0xFF	; 255
    36e6:	89 83       	std	Y+1, r24	; 0x01
    36e8:	99 81       	ldd	r25, Y+1	; 0x01
    36ea:	8c 81       	ldd	r24, Y+4	; 0x04
    36ec:	98 17       	cp	r25, r24
    36ee:	70 f3       	brcs	.-36     	; 0x36cc <LCD_vidWriteString+0x18>
		LCD_vidWriteCharctr(pu8StringCpy[i]);

	}
}
    36f0:	0f 90       	pop	r0
    36f2:	0f 90       	pop	r0
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	cf 91       	pop	r28
    36fa:	df 91       	pop	r29
    36fc:	08 95       	ret

000036fe <Gotoxy>:
void Gotoxy (u8 Y,u8 X){
    36fe:	df 93       	push	r29
    3700:	cf 93       	push	r28
    3702:	00 d0       	rcall	.+0      	; 0x3704 <Gotoxy+0x6>
    3704:	00 d0       	rcall	.+0      	; 0x3706 <Gotoxy+0x8>
    3706:	cd b7       	in	r28, 0x3d	; 61
    3708:	de b7       	in	r29, 0x3e	; 62
    370a:	89 83       	std	Y+1, r24	; 0x01
    370c:	6a 83       	std	Y+2, r22	; 0x02
	if (X>=0 && X<=16)
    370e:	8a 81       	ldd	r24, Y+2	; 0x02
    3710:	81 31       	cpi	r24, 0x11	; 17
    3712:	c8 f4       	brcc	.+50     	; 0x3746 <Gotoxy+0x48>
	{
		switch(Y)
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	28 2f       	mov	r18, r24
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	3c 83       	std	Y+4, r19	; 0x04
    371c:	2b 83       	std	Y+3, r18	; 0x03
    371e:	8b 81       	ldd	r24, Y+3	; 0x03
    3720:	9c 81       	ldd	r25, Y+4	; 0x04
    3722:	81 30       	cpi	r24, 0x01	; 1
    3724:	91 05       	cpc	r25, r1
    3726:	31 f0       	breq	.+12     	; 0x3734 <Gotoxy+0x36>
    3728:	2b 81       	ldd	r18, Y+3	; 0x03
    372a:	3c 81       	ldd	r19, Y+4	; 0x04
    372c:	22 30       	cpi	r18, 0x02	; 2
    372e:	31 05       	cpc	r19, r1
    3730:	31 f0       	breq	.+12     	; 0x373e <Gotoxy+0x40>
    3732:	09 c0       	rjmp	.+18     	; 0x3746 <Gotoxy+0x48>
		{
		case 1:
			LCD_vidSendCommand(X+128);
    3734:	8a 81       	ldd	r24, Y+2	; 0x02
    3736:	80 58       	subi	r24, 0x80	; 128
    3738:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_vidSendCommand>
    373c:	04 c0       	rjmp	.+8      	; 0x3746 <Gotoxy+0x48>
			break;
		case 2:
			LCD_vidSendCommand(X+192);
    373e:	8a 81       	ldd	r24, Y+2	; 0x02
    3740:	80 54       	subi	r24, 0x40	; 64
    3742:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_vidSendCommand>
			break;
		default:
			break;
		}
	}
}
    3746:	0f 90       	pop	r0
    3748:	0f 90       	pop	r0
    374a:	0f 90       	pop	r0
    374c:	0f 90       	pop	r0
    374e:	cf 91       	pop	r28
    3750:	df 91       	pop	r29
    3752:	08 95       	ret

00003754 <LCD_vSetCGRamAdd>:

void LCD_vSetCGRamAdd ()
{
    3754:	df 93       	push	r29
    3756:	cf 93       	push	r28
    3758:	0f 92       	push	r0
    375a:	cd b7       	in	r28, 0x3d	; 61
    375c:	de b7       	in	r29, 0x3e	; 62
	LCD_vidSendCommand(64);
    375e:	80 e4       	ldi	r24, 0x40	; 64
    3760:	0e 94 14 1a 	call	0x3428	; 0x3428 <LCD_vidSendCommand>
	for(u8 counter =0; counter<64 ; counter++){
    3764:	19 82       	std	Y+1, r1	; 0x01
    3766:	0c c0       	rjmp	.+24     	; 0x3780 <LCD_vSetCGRamAdd+0x2c>
		LCD_vidWriteCharctr(array[counter]);
    3768:	89 81       	ldd	r24, Y+1	; 0x01
    376a:	88 2f       	mov	r24, r24
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	fc 01       	movw	r30, r24
    3770:	e8 59       	subi	r30, 0x98	; 152
    3772:	fe 4f       	sbci	r31, 0xFE	; 254
    3774:	80 81       	ld	r24, Z
    3776:	0e 94 b7 1a 	call	0x356e	; 0x356e <LCD_vidWriteCharctr>
}

void LCD_vSetCGRamAdd ()
{
	LCD_vidSendCommand(64);
	for(u8 counter =0; counter<64 ; counter++){
    377a:	89 81       	ldd	r24, Y+1	; 0x01
    377c:	8f 5f       	subi	r24, 0xFF	; 255
    377e:	89 83       	std	Y+1, r24	; 0x01
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	80 34       	cpi	r24, 0x40	; 64
    3784:	88 f3       	brcs	.-30     	; 0x3768 <LCD_vSetCGRamAdd+0x14>
		LCD_vidWriteCharctr(array[counter]);
	}

	Gotoxy(1,0);
    3786:	81 e0       	ldi	r24, 0x01	; 1
    3788:	60 e0       	ldi	r22, 0x00	; 0
    378a:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <Gotoxy>
	
}
    378e:	0f 90       	pop	r0
    3790:	cf 91       	pop	r28
    3792:	df 91       	pop	r29
    3794:	08 95       	ret

00003796 <LCD_WriteNumberFunc>:

void LCD_WriteNumberFunc(s32 n, u8 y, u8 x){
    3796:	df 93       	push	r29
    3798:	cf 93       	push	r28
    379a:	cd b7       	in	r28, 0x3d	; 61
    379c:	de b7       	in	r29, 0x3e	; 62
    379e:	2e 97       	sbiw	r28, 0x0e	; 14
    37a0:	0f b6       	in	r0, 0x3f	; 63
    37a2:	f8 94       	cli
    37a4:	de bf       	out	0x3e, r29	; 62
    37a6:	0f be       	out	0x3f, r0	; 63
    37a8:	cd bf       	out	0x3d, r28	; 61
    37aa:	69 87       	std	Y+9, r22	; 0x09
    37ac:	7a 87       	std	Y+10, r23	; 0x0a
    37ae:	8b 87       	std	Y+11, r24	; 0x0b
    37b0:	9c 87       	std	Y+12, r25	; 0x0c
    37b2:	4d 87       	std	Y+13, r20	; 0x0d
    37b4:	2e 87       	std	Y+14, r18	; 0x0e
	u8 flag=0;
    37b6:	18 86       	std	Y+8, r1	; 0x08
	if(n<0){ n*=-1; flag=1;}
    37b8:	89 85       	ldd	r24, Y+9	; 0x09
    37ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    37bc:	ab 85       	ldd	r26, Y+11	; 0x0b
    37be:	bc 85       	ldd	r27, Y+12	; 0x0c
    37c0:	bb 23       	and	r27, r27
    37c2:	8c f4       	brge	.+34     	; 0x37e6 <LCD_WriteNumberFunc+0x50>
    37c4:	89 85       	ldd	r24, Y+9	; 0x09
    37c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    37c8:	ab 85       	ldd	r26, Y+11	; 0x0b
    37ca:	bc 85       	ldd	r27, Y+12	; 0x0c
    37cc:	b0 95       	com	r27
    37ce:	a0 95       	com	r26
    37d0:	90 95       	com	r25
    37d2:	81 95       	neg	r24
    37d4:	9f 4f       	sbci	r25, 0xFF	; 255
    37d6:	af 4f       	sbci	r26, 0xFF	; 255
    37d8:	bf 4f       	sbci	r27, 0xFF	; 255
    37da:	89 87       	std	Y+9, r24	; 0x09
    37dc:	9a 87       	std	Y+10, r25	; 0x0a
    37de:	ab 87       	std	Y+11, r26	; 0x0b
    37e0:	bc 87       	std	Y+12, r27	; 0x0c
    37e2:	81 e0       	ldi	r24, 0x01	; 1
    37e4:	88 87       	std	Y+8, r24	; 0x08
	u8 counter =0;
    37e6:	1f 82       	std	Y+7, r1	; 0x07
	s32 temp = n;
    37e8:	89 85       	ldd	r24, Y+9	; 0x09
    37ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ec:	ab 85       	ldd	r26, Y+11	; 0x0b
    37ee:	bc 85       	ldd	r27, Y+12	; 0x0c
    37f0:	8b 83       	std	Y+3, r24	; 0x03
    37f2:	9c 83       	std	Y+4, r25	; 0x04
    37f4:	ad 83       	std	Y+5, r26	; 0x05
    37f6:	be 83       	std	Y+6, r27	; 0x06
    37f8:	15 c0       	rjmp	.+42     	; 0x3824 <LCD_WriteNumberFunc+0x8e>
	while(temp!=0){
		counter++;
    37fa:	8f 81       	ldd	r24, Y+7	; 0x07
    37fc:	8f 5f       	subi	r24, 0xFF	; 255
    37fe:	8f 83       	std	Y+7, r24	; 0x07
		temp=temp/10;
    3800:	8b 81       	ldd	r24, Y+3	; 0x03
    3802:	9c 81       	ldd	r25, Y+4	; 0x04
    3804:	ad 81       	ldd	r26, Y+5	; 0x05
    3806:	be 81       	ldd	r27, Y+6	; 0x06
    3808:	2a e0       	ldi	r18, 0x0A	; 10
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	40 e0       	ldi	r20, 0x00	; 0
    380e:	50 e0       	ldi	r21, 0x00	; 0
    3810:	bc 01       	movw	r22, r24
    3812:	cd 01       	movw	r24, r26
    3814:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <__divmodsi4>
    3818:	da 01       	movw	r26, r20
    381a:	c9 01       	movw	r24, r18
    381c:	8b 83       	std	Y+3, r24	; 0x03
    381e:	9c 83       	std	Y+4, r25	; 0x04
    3820:	ad 83       	std	Y+5, r26	; 0x05
    3822:	be 83       	std	Y+6, r27	; 0x06
void LCD_WriteNumberFunc(s32 n, u8 y, u8 x){
	u8 flag=0;
	if(n<0){ n*=-1; flag=1;}
	u8 counter =0;
	s32 temp = n;
	while(temp!=0){
    3824:	8b 81       	ldd	r24, Y+3	; 0x03
    3826:	9c 81       	ldd	r25, Y+4	; 0x04
    3828:	ad 81       	ldd	r26, Y+5	; 0x05
    382a:	be 81       	ldd	r27, Y+6	; 0x06
    382c:	00 97       	sbiw	r24, 0x00	; 0
    382e:	a1 05       	cpc	r26, r1
    3830:	b1 05       	cpc	r27, r1
    3832:	19 f7       	brne	.-58     	; 0x37fa <LCD_WriteNumberFunc+0x64>
		counter++;
		temp=temp/10;
	}
	u8 i;
	for(i=0;i<counter;i++){
    3834:	1a 82       	std	Y+2, r1	; 0x02
    3836:	35 c0       	rjmp	.+106    	; 0x38a2 <LCD_WriteNumberFunc+0x10c>
		u8 num = n%10;
    3838:	89 85       	ldd	r24, Y+9	; 0x09
    383a:	9a 85       	ldd	r25, Y+10	; 0x0a
    383c:	ab 85       	ldd	r26, Y+11	; 0x0b
    383e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3840:	2a e0       	ldi	r18, 0x0A	; 10
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	40 e0       	ldi	r20, 0x00	; 0
    3846:	50 e0       	ldi	r21, 0x00	; 0
    3848:	bc 01       	movw	r22, r24
    384a:	cd 01       	movw	r24, r26
    384c:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <__divmodsi4>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	89 83       	std	Y+1, r24	; 0x01
		Gotoxy(y,x+counter-i-1);
    3856:	9e 85       	ldd	r25, Y+14	; 0x0e
    3858:	8f 81       	ldd	r24, Y+7	; 0x07
    385a:	98 0f       	add	r25, r24
    385c:	8a 81       	ldd	r24, Y+2	; 0x02
    385e:	29 2f       	mov	r18, r25
    3860:	28 1b       	sub	r18, r24
    3862:	82 2f       	mov	r24, r18
    3864:	98 2f       	mov	r25, r24
    3866:	91 50       	subi	r25, 0x01	; 1
    3868:	8d 85       	ldd	r24, Y+13	; 0x0d
    386a:	69 2f       	mov	r22, r25
    386c:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <Gotoxy>
		LCD_vidWriteCharctr(num+48);
    3870:	89 81       	ldd	r24, Y+1	; 0x01
    3872:	80 5d       	subi	r24, 0xD0	; 208
    3874:	0e 94 b7 1a 	call	0x356e	; 0x356e <LCD_vidWriteCharctr>
		n=n/10;
    3878:	89 85       	ldd	r24, Y+9	; 0x09
    387a:	9a 85       	ldd	r25, Y+10	; 0x0a
    387c:	ab 85       	ldd	r26, Y+11	; 0x0b
    387e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3880:	2a e0       	ldi	r18, 0x0A	; 10
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	40 e0       	ldi	r20, 0x00	; 0
    3886:	50 e0       	ldi	r21, 0x00	; 0
    3888:	bc 01       	movw	r22, r24
    388a:	cd 01       	movw	r24, r26
    388c:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <__divmodsi4>
    3890:	da 01       	movw	r26, r20
    3892:	c9 01       	movw	r24, r18
    3894:	89 87       	std	Y+9, r24	; 0x09
    3896:	9a 87       	std	Y+10, r25	; 0x0a
    3898:	ab 87       	std	Y+11, r26	; 0x0b
    389a:	bc 87       	std	Y+12, r27	; 0x0c
	while(temp!=0){
		counter++;
		temp=temp/10;
	}
	u8 i;
	for(i=0;i<counter;i++){
    389c:	8a 81       	ldd	r24, Y+2	; 0x02
    389e:	8f 5f       	subi	r24, 0xFF	; 255
    38a0:	8a 83       	std	Y+2, r24	; 0x02
    38a2:	9a 81       	ldd	r25, Y+2	; 0x02
    38a4:	8f 81       	ldd	r24, Y+7	; 0x07
    38a6:	98 17       	cp	r25, r24
    38a8:	38 f2       	brcs	.-114    	; 0x3838 <LCD_WriteNumberFunc+0xa2>
		u8 num = n%10;
		Gotoxy(y,x+counter-i-1);
		LCD_vidWriteCharctr(num+48);
		n=n/10;
	}
	if(flag) {Gotoxy(y,x+counter-i-1); LCD_vidWriteCharctr('-');}
    38aa:	88 85       	ldd	r24, Y+8	; 0x08
    38ac:	88 23       	and	r24, r24
    38ae:	81 f0       	breq	.+32     	; 0x38d0 <LCD_WriteNumberFunc+0x13a>
    38b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    38b2:	8f 81       	ldd	r24, Y+7	; 0x07
    38b4:	98 0f       	add	r25, r24
    38b6:	8a 81       	ldd	r24, Y+2	; 0x02
    38b8:	29 2f       	mov	r18, r25
    38ba:	28 1b       	sub	r18, r24
    38bc:	82 2f       	mov	r24, r18
    38be:	98 2f       	mov	r25, r24
    38c0:	91 50       	subi	r25, 0x01	; 1
    38c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38c4:	69 2f       	mov	r22, r25
    38c6:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <Gotoxy>
    38ca:	8d e2       	ldi	r24, 0x2D	; 45
    38cc:	0e 94 b7 1a 	call	0x356e	; 0x356e <LCD_vidWriteCharctr>

}
    38d0:	2e 96       	adiw	r28, 0x0e	; 14
    38d2:	0f b6       	in	r0, 0x3f	; 63
    38d4:	f8 94       	cli
    38d6:	de bf       	out	0x3e, r29	; 62
    38d8:	0f be       	out	0x3f, r0	; 63
    38da:	cd bf       	out	0x3d, r28	; 61
    38dc:	cf 91       	pop	r28
    38de:	df 91       	pop	r29
    38e0:	08 95       	ret

000038e2 <HKPD_vInit>:
#include "../../LIB/STD_TYPES.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "KPD_private.h"
#include "KPD_config.h"
#include "KPD_interface.h"
void HKPD_vInit(void){
    38e2:	df 93       	push	r29
    38e4:	cf 93       	push	r28
    38e6:	cd b7       	in	r28, 0x3d	; 61
    38e8:	de b7       	in	r29, 0x3e	; 62

	/*SET the microcontroller PINS that will be connected to rows TO BE input with pull-up*/
	MDIO_vSetPinDir(KPD_ROWS_PORT, KPD_ROW0_PIN, DIO_INPUT);
    38ea:	80 e0       	ldi	r24, 0x00	; 0
    38ec:	60 e0       	ldi	r22, 0x00	; 0
    38ee:	40 e0       	ldi	r20, 0x00	; 0
    38f0:	0e 94 62 11 	call	0x22c4	; 0x22c4 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(KPD_ROWS_PORT, KPD_ROW1_PIN, DIO_INPUT);
    38f4:	80 e0       	ldi	r24, 0x00	; 0
    38f6:	61 e0       	ldi	r22, 0x01	; 1
    38f8:	40 e0       	ldi	r20, 0x00	; 0
    38fa:	0e 94 62 11 	call	0x22c4	; 0x22c4 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(KPD_ROWS_PORT, KPD_ROW2_PIN, DIO_INPUT);
    38fe:	80 e0       	ldi	r24, 0x00	; 0
    3900:	62 e0       	ldi	r22, 0x02	; 2
    3902:	40 e0       	ldi	r20, 0x00	; 0
    3904:	0e 94 62 11 	call	0x22c4	; 0x22c4 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(KPD_ROWS_PORT, KPD_ROW3_PIN, DIO_INPUT);
    3908:	80 e0       	ldi	r24, 0x00	; 0
    390a:	63 e0       	ldi	r22, 0x03	; 3
    390c:	40 e0       	ldi	r20, 0x00	; 0
    390e:	0e 94 62 11 	call	0x22c4	; 0x22c4 <MDIO_vSetPinDir>
	//Activating pull resistor
	MDIO_vSetPinVal(KPD_ROWS_PORT, KPD_ROW0_PIN, DIO_HIGH);
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	60 e0       	ldi	r22, 0x00	; 0
    3916:	41 e0       	ldi	r20, 0x01	; 1
    3918:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(KPD_ROWS_PORT, KPD_ROW1_PIN, DIO_HIGH);
    391c:	80 e0       	ldi	r24, 0x00	; 0
    391e:	61 e0       	ldi	r22, 0x01	; 1
    3920:	41 e0       	ldi	r20, 0x01	; 1
    3922:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(KPD_ROWS_PORT, KPD_ROW2_PIN, DIO_HIGH);
    3926:	80 e0       	ldi	r24, 0x00	; 0
    3928:	62 e0       	ldi	r22, 0x02	; 2
    392a:	41 e0       	ldi	r20, 0x01	; 1
    392c:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(KPD_ROWS_PORT, KPD_ROW3_PIN, DIO_HIGH);
    3930:	80 e0       	ldi	r24, 0x00	; 0
    3932:	63 e0       	ldi	r22, 0x03	; 3
    3934:	41 e0       	ldi	r20, 0x01	; 1
    3936:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>

	/*SET the microcontroller PINS that will be connected to columns TO BE OUTPUT HIGH*/
	MDIO_vSetPinDir(KPD_COLUMNS_PORT, KPD_COLUMN0_PIN, DIO_OUTPUT);
    393a:	80 e0       	ldi	r24, 0x00	; 0
    393c:	64 e0       	ldi	r22, 0x04	; 4
    393e:	41 e0       	ldi	r20, 0x01	; 1
    3940:	0e 94 62 11 	call	0x22c4	; 0x22c4 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(KPD_COLUMNS_PORT, KPD_COLUMN1_PIN, DIO_OUTPUT);
    3944:	80 e0       	ldi	r24, 0x00	; 0
    3946:	65 e0       	ldi	r22, 0x05	; 5
    3948:	41 e0       	ldi	r20, 0x01	; 1
    394a:	0e 94 62 11 	call	0x22c4	; 0x22c4 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(KPD_COLUMNS_PORT, KPD_COLUMN2_PIN, DIO_OUTPUT);
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	66 e0       	ldi	r22, 0x06	; 6
    3952:	41 e0       	ldi	r20, 0x01	; 1
    3954:	0e 94 62 11 	call	0x22c4	; 0x22c4 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(KPD_COLUMNS_PORT, KPD_COLUMN3_PIN, DIO_OUTPUT);
    3958:	80 e0       	ldi	r24, 0x00	; 0
    395a:	67 e0       	ldi	r22, 0x07	; 7
    395c:	41 e0       	ldi	r20, 0x01	; 1
    395e:	0e 94 62 11 	call	0x22c4	; 0x22c4 <MDIO_vSetPinDir>

	MDIO_vSetPinVal(KPD_COLUMNS_PORT, KPD_COLUMN0_PIN, DIO_HIGH);
    3962:	80 e0       	ldi	r24, 0x00	; 0
    3964:	64 e0       	ldi	r22, 0x04	; 4
    3966:	41 e0       	ldi	r20, 0x01	; 1
    3968:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(KPD_COLUMNS_PORT, KPD_COLUMN1_PIN, DIO_HIGH);
    396c:	80 e0       	ldi	r24, 0x00	; 0
    396e:	65 e0       	ldi	r22, 0x05	; 5
    3970:	41 e0       	ldi	r20, 0x01	; 1
    3972:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(KPD_COLUMNS_PORT, KPD_COLUMN2_PIN, DIO_HIGH);
    3976:	80 e0       	ldi	r24, 0x00	; 0
    3978:	66 e0       	ldi	r22, 0x06	; 6
    397a:	41 e0       	ldi	r20, 0x01	; 1
    397c:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(KPD_COLUMNS_PORT, KPD_COLUMN3_PIN, DIO_HIGH);
    3980:	80 e0       	ldi	r24, 0x00	; 0
    3982:	67 e0       	ldi	r22, 0x07	; 7
    3984:	41 e0       	ldi	r20, 0x01	; 1
    3986:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>


}
    398a:	cf 91       	pop	r28
    398c:	df 91       	pop	r29
    398e:	08 95       	ret

00003990 <HKPD_u8GetPressedKey>:
u8 HKPD_u8GetPressedKey(void)
{
    3990:	df 93       	push	r29
    3992:	cf 93       	push	r28
    3994:	00 d0       	rcall	.+0      	; 0x3996 <HKPD_u8GetPressedKey+0x6>
    3996:	00 d0       	rcall	.+0      	; 0x3998 <HKPD_u8GetPressedKey+0x8>
    3998:	0f 92       	push	r0
    399a:	cd b7       	in	r28, 0x3d	; 61
    399c:	de b7       	in	r29, 0x3e	; 62
    static u8 Local_u8KPDColumnsArray[KPD_COLUMNS_NUM] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN};
    static u8 Local_u8KPDRowsArray[KPD_ROWS_NUM] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    u8 Local_u8RowValue;
    u8 Local_u8ColumnsIterator;
    u8 Local_u8RowsIterator;
    u8 Local_u8PressedKey = KPD_NOT_PRESSED_VAL;
    399e:	8f ef       	ldi	r24, 0xFF	; 255
    39a0:	89 83       	std	Y+1, r24	; 0x01
    for (Local_u8ColumnsIterator = 0; Local_u8ColumnsIterator < KPD_COLUMNS_NUM; Local_u8ColumnsIterator++)
    39a2:	1b 82       	std	Y+3, r1	; 0x03
    39a4:	57 c0       	rjmp	.+174    	; 0x3a54 <HKPD_u8GetPressedKey+0xc4>
    {
        /* Activate A Column, Activate(Ground) */
    	MDIO_vSetPinVal(KPD_COLUMNS_PORT, Local_u8KPDColumnsArray[Local_u8ColumnsIterator], DIO_LOW);
    39a6:	8b 81       	ldd	r24, Y+3	; 0x03
    39a8:	88 2f       	mov	r24, r24
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	fc 01       	movw	r30, r24
    39ae:	ec 56       	subi	r30, 0x6C	; 108
    39b0:	fe 4f       	sbci	r31, 0xFE	; 254
    39b2:	90 81       	ld	r25, Z
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	69 2f       	mov	r22, r25
    39b8:	40 e0       	ldi	r20, 0x00	; 0
    39ba:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>
        /*Iterate On The KPD Rows */
        for (Local_u8RowsIterator = 0; Local_u8RowsIterator < KPD_ROWS_NUM; Local_u8RowsIterator++)
    39be:	1a 82       	std	Y+2, r1	; 0x02
    39c0:	37 c0       	rjmp	.+110    	; 0x3a30 <HKPD_u8GetPressedKey+0xa0>
        {
            /* Get The Row Value */
            Local_u8RowValue = MDIO_u8ReadPin(KPD_ROWS_PORT, Local_u8KPDRowsArray[Local_u8RowsIterator]);
    39c2:	8a 81       	ldd	r24, Y+2	; 0x02
    39c4:	88 2f       	mov	r24, r24
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	fc 01       	movw	r30, r24
    39ca:	e0 57       	subi	r30, 0x70	; 112
    39cc:	fe 4f       	sbci	r31, 0xFE	; 254
    39ce:	90 81       	ld	r25, Z
    39d0:	80 e0       	ldi	r24, 0x00	; 0
    39d2:	69 2f       	mov	r22, r25
    39d4:	0e 94 54 13 	call	0x26a8	; 0x26a8 <MDIO_u8ReadPin>
    39d8:	8c 83       	std	Y+4, r24	; 0x04
            if (Local_u8RowValue == DIO_LOW)
    39da:	8c 81       	ldd	r24, Y+4	; 0x04
    39dc:	88 23       	and	r24, r24
    39de:	29 f5       	brne	.+74     	; 0x3a2a <HKPD_u8GetPressedKey+0x9a>
            {
                /* Get The Pressed Key */
                Local_u8PressedKey = Local_u8KPDArray[Local_u8RowsIterator][Local_u8ColumnsIterator];
    39e0:	8a 81       	ldd	r24, Y+2	; 0x02
    39e2:	48 2f       	mov	r20, r24
    39e4:	50 e0       	ldi	r21, 0x00	; 0
    39e6:	8b 81       	ldd	r24, Y+3	; 0x03
    39e8:	28 2f       	mov	r18, r24
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	ca 01       	movw	r24, r20
    39ee:	88 0f       	add	r24, r24
    39f0:	99 1f       	adc	r25, r25
    39f2:	88 0f       	add	r24, r24
    39f4:	99 1f       	adc	r25, r25
    39f6:	82 0f       	add	r24, r18
    39f8:	93 1f       	adc	r25, r19
    39fa:	fc 01       	movw	r30, r24
    39fc:	e8 56       	subi	r30, 0x68	; 104
    39fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3a00:	80 81       	ld	r24, Z
    3a02:	89 83       	std	Y+1, r24	; 0x01
    3a04:	0c c0       	rjmp	.+24     	; 0x3a1e <HKPD_u8GetPressedKey+0x8e>
                /*Polling(busy wait) till the key is released */
                while (Local_u8RowValue == DIO_LOW)
                {
                    Local_u8RowValue = MDIO_u8ReadPin(KPD_ROWS_PORT, Local_u8KPDRowsArray[Local_u8RowsIterator]);
    3a06:	8a 81       	ldd	r24, Y+2	; 0x02
    3a08:	88 2f       	mov	r24, r24
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	fc 01       	movw	r30, r24
    3a0e:	e0 57       	subi	r30, 0x70	; 112
    3a10:	fe 4f       	sbci	r31, 0xFE	; 254
    3a12:	90 81       	ld	r25, Z
    3a14:	80 e0       	ldi	r24, 0x00	; 0
    3a16:	69 2f       	mov	r22, r25
    3a18:	0e 94 54 13 	call	0x26a8	; 0x26a8 <MDIO_u8ReadPin>
    3a1c:	8c 83       	std	Y+4, r24	; 0x04
            if (Local_u8RowValue == DIO_LOW)
            {
                /* Get The Pressed Key */
                Local_u8PressedKey = Local_u8KPDArray[Local_u8RowsIterator][Local_u8ColumnsIterator];
                /*Polling(busy wait) till the key is released */
                while (Local_u8RowValue == DIO_LOW)
    3a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    3a20:	88 23       	and	r24, r24
    3a22:	89 f3       	breq	.-30     	; 0x3a06 <HKPD_u8GetPressedKey+0x76>
                {
                    Local_u8RowValue = MDIO_u8ReadPin(KPD_ROWS_PORT, Local_u8KPDRowsArray[Local_u8RowsIterator]);
                }
                /* Return The Pressed Key */
                return Local_u8PressedKey;
    3a24:	89 81       	ldd	r24, Y+1	; 0x01
    3a26:	8d 83       	std	Y+5, r24	; 0x05
    3a28:	1b c0       	rjmp	.+54     	; 0x3a60 <HKPD_u8GetPressedKey+0xd0>
    for (Local_u8ColumnsIterator = 0; Local_u8ColumnsIterator < KPD_COLUMNS_NUM; Local_u8ColumnsIterator++)
    {
        /* Activate A Column, Activate(Ground) */
    	MDIO_vSetPinVal(KPD_COLUMNS_PORT, Local_u8KPDColumnsArray[Local_u8ColumnsIterator], DIO_LOW);
        /*Iterate On The KPD Rows */
        for (Local_u8RowsIterator = 0; Local_u8RowsIterator < KPD_ROWS_NUM; Local_u8RowsIterator++)
    3a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a2c:	8f 5f       	subi	r24, 0xFF	; 255
    3a2e:	8a 83       	std	Y+2, r24	; 0x02
    3a30:	8a 81       	ldd	r24, Y+2	; 0x02
    3a32:	84 30       	cpi	r24, 0x04	; 4
    3a34:	30 f2       	brcs	.-116    	; 0x39c2 <HKPD_u8GetPressedKey+0x32>
                /* Return The Pressed Key */
                return Local_u8PressedKey;
            }
        }
        /* Deactivate A Column, Deactivate(VCC) */
        MDIO_vSetPinVal(KPD_COLUMNS_PORT, Local_u8KPDColumnsArray[Local_u8ColumnsIterator], DIO_HIGH);
    3a36:	8b 81       	ldd	r24, Y+3	; 0x03
    3a38:	88 2f       	mov	r24, r24
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	fc 01       	movw	r30, r24
    3a3e:	ec 56       	subi	r30, 0x6C	; 108
    3a40:	fe 4f       	sbci	r31, 0xFE	; 254
    3a42:	90 81       	ld	r25, Z
    3a44:	80 e0       	ldi	r24, 0x00	; 0
    3a46:	69 2f       	mov	r22, r25
    3a48:	41 e0       	ldi	r20, 0x01	; 1
    3a4a:	0e 94 62 12 	call	0x24c4	; 0x24c4 <MDIO_vSetPinVal>
    static u8 Local_u8KPDRowsArray[KPD_ROWS_NUM] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    u8 Local_u8RowValue;
    u8 Local_u8ColumnsIterator;
    u8 Local_u8RowsIterator;
    u8 Local_u8PressedKey = KPD_NOT_PRESSED_VAL;
    for (Local_u8ColumnsIterator = 0; Local_u8ColumnsIterator < KPD_COLUMNS_NUM; Local_u8ColumnsIterator++)
    3a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a50:	8f 5f       	subi	r24, 0xFF	; 255
    3a52:	8b 83       	std	Y+3, r24	; 0x03
    3a54:	8b 81       	ldd	r24, Y+3	; 0x03
    3a56:	84 30       	cpi	r24, 0x04	; 4
    3a58:	08 f4       	brcc	.+2      	; 0x3a5c <HKPD_u8GetPressedKey+0xcc>
    3a5a:	a5 cf       	rjmp	.-182    	; 0x39a6 <HKPD_u8GetPressedKey+0x16>
        }
        /* Deactivate A Column, Deactivate(VCC) */
        MDIO_vSetPinVal(KPD_COLUMNS_PORT, Local_u8KPDColumnsArray[Local_u8ColumnsIterator], DIO_HIGH);
    }
    /* Return The Default Value */
    return Local_u8PressedKey;
    3a5c:	89 81       	ldd	r24, Y+1	; 0x01
    3a5e:	8d 83       	std	Y+5, r24	; 0x05
    3a60:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3a62:	0f 90       	pop	r0
    3a64:	0f 90       	pop	r0
    3a66:	0f 90       	pop	r0
    3a68:	0f 90       	pop	r0
    3a6a:	0f 90       	pop	r0
    3a6c:	cf 91       	pop	r28
    3a6e:	df 91       	pop	r29
    3a70:	08 95       	ret

00003a72 <main>:
#include "../HAL/Servo/Servo_interface.h"
#include "../MCAL/SPI/SPI_interface.h"
#include "../MCAL/Timer/Timer_interface.h"

int main(void)
{
    3a72:	df 93       	push	r29
    3a74:	cf 93       	push	r28
    3a76:	cd b7       	in	r28, 0x3d	; 61
    3a78:	de b7       	in	r29, 0x3e	; 62
    3a7a:	aa 97       	sbiw	r28, 0x2a	; 42
    3a7c:	0f b6       	in	r0, 0x3f	; 63
    3a7e:	f8 94       	cli
    3a80:	de bf       	out	0x3e, r29	; 62
    3a82:	0f be       	out	0x3f, r0	; 63
    3a84:	cd bf       	out	0x3d, r28	; 61

	// initialize the servo and Timer0
	MServo_voidInit();
    3a86:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <MServo_voidInit>
	vTIMER0_Init();
    3a8a:	0e 94 6d 07 	call	0xeda	; 0xeda <vTIMER0_Init>
	vTIMER0_Start();
    3a8e:	0e 94 a6 08 	call	0x114c	; 0x114c <vTIMER0_Start>
	// make the servo move to 0 degree then 90 degree then 180 degree using Timer0
	while (1)
	{
		MServo_voidSetAngle(90);
    3a92:	8a e5       	ldi	r24, 0x5A	; 90
    3a94:	0e 94 19 15 	call	0x2a32	; 0x2a32 <MServo_voidSetAngle>
    3a98:	80 e0       	ldi	r24, 0x00	; 0
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	aa e7       	ldi	r26, 0x7A	; 122
    3a9e:	b4 e4       	ldi	r27, 0x44	; 68
    3aa0:	8f a3       	std	Y+39, r24	; 0x27
    3aa2:	98 a7       	std	Y+40, r25	; 0x28
    3aa4:	a9 a7       	std	Y+41, r26	; 0x29
    3aa6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aa8:	6f a1       	ldd	r22, Y+39	; 0x27
    3aaa:	78 a5       	ldd	r23, Y+40	; 0x28
    3aac:	89 a5       	ldd	r24, Y+41	; 0x29
    3aae:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ab0:	20 e0       	ldi	r18, 0x00	; 0
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	4a ef       	ldi	r20, 0xFA	; 250
    3ab6:	54 e4       	ldi	r21, 0x44	; 68
    3ab8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3abc:	dc 01       	movw	r26, r24
    3abe:	cb 01       	movw	r24, r22
    3ac0:	8b a3       	std	Y+35, r24	; 0x23
    3ac2:	9c a3       	std	Y+36, r25	; 0x24
    3ac4:	ad a3       	std	Y+37, r26	; 0x25
    3ac6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ac8:	6b a1       	ldd	r22, Y+35	; 0x23
    3aca:	7c a1       	ldd	r23, Y+36	; 0x24
    3acc:	8d a1       	ldd	r24, Y+37	; 0x25
    3ace:	9e a1       	ldd	r25, Y+38	; 0x26
    3ad0:	20 e0       	ldi	r18, 0x00	; 0
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	40 e8       	ldi	r20, 0x80	; 128
    3ad6:	5f e3       	ldi	r21, 0x3F	; 63
    3ad8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3adc:	88 23       	and	r24, r24
    3ade:	2c f4       	brge	.+10     	; 0x3aea <main+0x78>
		__ticks = 1;
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	9a a3       	std	Y+34, r25	; 0x22
    3ae6:	89 a3       	std	Y+33, r24	; 0x21
    3ae8:	3f c0       	rjmp	.+126    	; 0x3b68 <main+0xf6>
	else if (__tmp > 65535)
    3aea:	6b a1       	ldd	r22, Y+35	; 0x23
    3aec:	7c a1       	ldd	r23, Y+36	; 0x24
    3aee:	8d a1       	ldd	r24, Y+37	; 0x25
    3af0:	9e a1       	ldd	r25, Y+38	; 0x26
    3af2:	20 e0       	ldi	r18, 0x00	; 0
    3af4:	3f ef       	ldi	r19, 0xFF	; 255
    3af6:	4f e7       	ldi	r20, 0x7F	; 127
    3af8:	57 e4       	ldi	r21, 0x47	; 71
    3afa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3afe:	18 16       	cp	r1, r24
    3b00:	4c f5       	brge	.+82     	; 0x3b54 <main+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b02:	6f a1       	ldd	r22, Y+39	; 0x27
    3b04:	78 a5       	ldd	r23, Y+40	; 0x28
    3b06:	89 a5       	ldd	r24, Y+41	; 0x29
    3b08:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	40 e2       	ldi	r20, 0x20	; 32
    3b10:	51 e4       	ldi	r21, 0x41	; 65
    3b12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b16:	dc 01       	movw	r26, r24
    3b18:	cb 01       	movw	r24, r22
    3b1a:	bc 01       	movw	r22, r24
    3b1c:	cd 01       	movw	r24, r26
    3b1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b22:	dc 01       	movw	r26, r24
    3b24:	cb 01       	movw	r24, r22
    3b26:	9a a3       	std	Y+34, r25	; 0x22
    3b28:	89 a3       	std	Y+33, r24	; 0x21
    3b2a:	0f c0       	rjmp	.+30     	; 0x3b4a <main+0xd8>
    3b2c:	88 ec       	ldi	r24, 0xC8	; 200
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	98 a3       	std	Y+32, r25	; 0x20
    3b32:	8f 8f       	std	Y+31, r24	; 0x1f
    3b34:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b36:	98 a1       	ldd	r25, Y+32	; 0x20
    3b38:	01 97       	sbiw	r24, 0x01	; 1
    3b3a:	f1 f7       	brne	.-4      	; 0x3b38 <main+0xc6>
    3b3c:	98 a3       	std	Y+32, r25	; 0x20
    3b3e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b40:	89 a1       	ldd	r24, Y+33	; 0x21
    3b42:	9a a1       	ldd	r25, Y+34	; 0x22
    3b44:	01 97       	sbiw	r24, 0x01	; 1
    3b46:	9a a3       	std	Y+34, r25	; 0x22
    3b48:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b4a:	89 a1       	ldd	r24, Y+33	; 0x21
    3b4c:	9a a1       	ldd	r25, Y+34	; 0x22
    3b4e:	00 97       	sbiw	r24, 0x00	; 0
    3b50:	69 f7       	brne	.-38     	; 0x3b2c <main+0xba>
    3b52:	14 c0       	rjmp	.+40     	; 0x3b7c <main+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b54:	6b a1       	ldd	r22, Y+35	; 0x23
    3b56:	7c a1       	ldd	r23, Y+36	; 0x24
    3b58:	8d a1       	ldd	r24, Y+37	; 0x25
    3b5a:	9e a1       	ldd	r25, Y+38	; 0x26
    3b5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b60:	dc 01       	movw	r26, r24
    3b62:	cb 01       	movw	r24, r22
    3b64:	9a a3       	std	Y+34, r25	; 0x22
    3b66:	89 a3       	std	Y+33, r24	; 0x21
    3b68:	89 a1       	ldd	r24, Y+33	; 0x21
    3b6a:	9a a1       	ldd	r25, Y+34	; 0x22
    3b6c:	9e 8f       	std	Y+30, r25	; 0x1e
    3b6e:	8d 8f       	std	Y+29, r24	; 0x1d
    3b70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b72:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b74:	01 97       	sbiw	r24, 0x01	; 1
    3b76:	f1 f7       	brne	.-4      	; 0x3b74 <main+0x102>
    3b78:	9e 8f       	std	Y+30, r25	; 0x1e
    3b7a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		MServo_voidSetAngle(0);
    3b7c:	80 e0       	ldi	r24, 0x00	; 0
    3b7e:	0e 94 19 15 	call	0x2a32	; 0x2a32 <MServo_voidSetAngle>
    3b82:	80 e0       	ldi	r24, 0x00	; 0
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	aa e7       	ldi	r26, 0x7A	; 122
    3b88:	b4 e4       	ldi	r27, 0x44	; 68
    3b8a:	89 8f       	std	Y+25, r24	; 0x19
    3b8c:	9a 8f       	std	Y+26, r25	; 0x1a
    3b8e:	ab 8f       	std	Y+27, r26	; 0x1b
    3b90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b92:	69 8d       	ldd	r22, Y+25	; 0x19
    3b94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b9a:	20 e0       	ldi	r18, 0x00	; 0
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	4a ef       	ldi	r20, 0xFA	; 250
    3ba0:	54 e4       	ldi	r21, 0x44	; 68
    3ba2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ba6:	dc 01       	movw	r26, r24
    3ba8:	cb 01       	movw	r24, r22
    3baa:	8d 8b       	std	Y+21, r24	; 0x15
    3bac:	9e 8b       	std	Y+22, r25	; 0x16
    3bae:	af 8b       	std	Y+23, r26	; 0x17
    3bb0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bb2:	6d 89       	ldd	r22, Y+21	; 0x15
    3bb4:	7e 89       	ldd	r23, Y+22	; 0x16
    3bb6:	8f 89       	ldd	r24, Y+23	; 0x17
    3bb8:	98 8d       	ldd	r25, Y+24	; 0x18
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	40 e8       	ldi	r20, 0x80	; 128
    3bc0:	5f e3       	ldi	r21, 0x3F	; 63
    3bc2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3bc6:	88 23       	and	r24, r24
    3bc8:	2c f4       	brge	.+10     	; 0x3bd4 <main+0x162>
		__ticks = 1;
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	9c 8b       	std	Y+20, r25	; 0x14
    3bd0:	8b 8b       	std	Y+19, r24	; 0x13
    3bd2:	3f c0       	rjmp	.+126    	; 0x3c52 <main+0x1e0>
	else if (__tmp > 65535)
    3bd4:	6d 89       	ldd	r22, Y+21	; 0x15
    3bd6:	7e 89       	ldd	r23, Y+22	; 0x16
    3bd8:	8f 89       	ldd	r24, Y+23	; 0x17
    3bda:	98 8d       	ldd	r25, Y+24	; 0x18
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	3f ef       	ldi	r19, 0xFF	; 255
    3be0:	4f e7       	ldi	r20, 0x7F	; 127
    3be2:	57 e4       	ldi	r21, 0x47	; 71
    3be4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3be8:	18 16       	cp	r1, r24
    3bea:	4c f5       	brge	.+82     	; 0x3c3e <main+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bec:	69 8d       	ldd	r22, Y+25	; 0x19
    3bee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bf4:	20 e0       	ldi	r18, 0x00	; 0
    3bf6:	30 e0       	ldi	r19, 0x00	; 0
    3bf8:	40 e2       	ldi	r20, 0x20	; 32
    3bfa:	51 e4       	ldi	r21, 0x41	; 65
    3bfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c00:	dc 01       	movw	r26, r24
    3c02:	cb 01       	movw	r24, r22
    3c04:	bc 01       	movw	r22, r24
    3c06:	cd 01       	movw	r24, r26
    3c08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	cb 01       	movw	r24, r22
    3c10:	9c 8b       	std	Y+20, r25	; 0x14
    3c12:	8b 8b       	std	Y+19, r24	; 0x13
    3c14:	0f c0       	rjmp	.+30     	; 0x3c34 <main+0x1c2>
    3c16:	88 ec       	ldi	r24, 0xC8	; 200
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	9a 8b       	std	Y+18, r25	; 0x12
    3c1c:	89 8b       	std	Y+17, r24	; 0x11
    3c1e:	89 89       	ldd	r24, Y+17	; 0x11
    3c20:	9a 89       	ldd	r25, Y+18	; 0x12
    3c22:	01 97       	sbiw	r24, 0x01	; 1
    3c24:	f1 f7       	brne	.-4      	; 0x3c22 <main+0x1b0>
    3c26:	9a 8b       	std	Y+18, r25	; 0x12
    3c28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c2a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c2c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c2e:	01 97       	sbiw	r24, 0x01	; 1
    3c30:	9c 8b       	std	Y+20, r25	; 0x14
    3c32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c34:	8b 89       	ldd	r24, Y+19	; 0x13
    3c36:	9c 89       	ldd	r25, Y+20	; 0x14
    3c38:	00 97       	sbiw	r24, 0x00	; 0
    3c3a:	69 f7       	brne	.-38     	; 0x3c16 <main+0x1a4>
    3c3c:	14 c0       	rjmp	.+40     	; 0x3c66 <main+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c3e:	6d 89       	ldd	r22, Y+21	; 0x15
    3c40:	7e 89       	ldd	r23, Y+22	; 0x16
    3c42:	8f 89       	ldd	r24, Y+23	; 0x17
    3c44:	98 8d       	ldd	r25, Y+24	; 0x18
    3c46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c4a:	dc 01       	movw	r26, r24
    3c4c:	cb 01       	movw	r24, r22
    3c4e:	9c 8b       	std	Y+20, r25	; 0x14
    3c50:	8b 8b       	std	Y+19, r24	; 0x13
    3c52:	8b 89       	ldd	r24, Y+19	; 0x13
    3c54:	9c 89       	ldd	r25, Y+20	; 0x14
    3c56:	98 8b       	std	Y+16, r25	; 0x10
    3c58:	8f 87       	std	Y+15, r24	; 0x0f
    3c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c5c:	98 89       	ldd	r25, Y+16	; 0x10
    3c5e:	01 97       	sbiw	r24, 0x01	; 1
    3c60:	f1 f7       	brne	.-4      	; 0x3c5e <main+0x1ec>
    3c62:	98 8b       	std	Y+16, r25	; 0x10
    3c64:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		MServo_voidSetAngle(-90);
    3c66:	86 ea       	ldi	r24, 0xA6	; 166
    3c68:	0e 94 19 15 	call	0x2a32	; 0x2a32 <MServo_voidSetAngle>
    3c6c:	80 e0       	ldi	r24, 0x00	; 0
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	aa e7       	ldi	r26, 0x7A	; 122
    3c72:	b4 e4       	ldi	r27, 0x44	; 68
    3c74:	8b 87       	std	Y+11, r24	; 0x0b
    3c76:	9c 87       	std	Y+12, r25	; 0x0c
    3c78:	ad 87       	std	Y+13, r26	; 0x0d
    3c7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c84:	20 e0       	ldi	r18, 0x00	; 0
    3c86:	30 e0       	ldi	r19, 0x00	; 0
    3c88:	4a ef       	ldi	r20, 0xFA	; 250
    3c8a:	54 e4       	ldi	r21, 0x44	; 68
    3c8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c90:	dc 01       	movw	r26, r24
    3c92:	cb 01       	movw	r24, r22
    3c94:	8f 83       	std	Y+7, r24	; 0x07
    3c96:	98 87       	std	Y+8, r25	; 0x08
    3c98:	a9 87       	std	Y+9, r26	; 0x09
    3c9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c9e:	78 85       	ldd	r23, Y+8	; 0x08
    3ca0:	89 85       	ldd	r24, Y+9	; 0x09
    3ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca4:	20 e0       	ldi	r18, 0x00	; 0
    3ca6:	30 e0       	ldi	r19, 0x00	; 0
    3ca8:	40 e8       	ldi	r20, 0x80	; 128
    3caa:	5f e3       	ldi	r21, 0x3F	; 63
    3cac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3cb0:	88 23       	and	r24, r24
    3cb2:	2c f4       	brge	.+10     	; 0x3cbe <main+0x24c>
		__ticks = 1;
    3cb4:	81 e0       	ldi	r24, 0x01	; 1
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	9e 83       	std	Y+6, r25	; 0x06
    3cba:	8d 83       	std	Y+5, r24	; 0x05
    3cbc:	3f c0       	rjmp	.+126    	; 0x3d3c <main+0x2ca>
	else if (__tmp > 65535)
    3cbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3cc0:	78 85       	ldd	r23, Y+8	; 0x08
    3cc2:	89 85       	ldd	r24, Y+9	; 0x09
    3cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc6:	20 e0       	ldi	r18, 0x00	; 0
    3cc8:	3f ef       	ldi	r19, 0xFF	; 255
    3cca:	4f e7       	ldi	r20, 0x7F	; 127
    3ccc:	57 e4       	ldi	r21, 0x47	; 71
    3cce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3cd2:	18 16       	cp	r1, r24
    3cd4:	4c f5       	brge	.+82     	; 0x3d28 <main+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cde:	20 e0       	ldi	r18, 0x00	; 0
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	40 e2       	ldi	r20, 0x20	; 32
    3ce4:	51 e4       	ldi	r21, 0x41	; 65
    3ce6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3cea:	dc 01       	movw	r26, r24
    3cec:	cb 01       	movw	r24, r22
    3cee:	bc 01       	movw	r22, r24
    3cf0:	cd 01       	movw	r24, r26
    3cf2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cf6:	dc 01       	movw	r26, r24
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	9e 83       	std	Y+6, r25	; 0x06
    3cfc:	8d 83       	std	Y+5, r24	; 0x05
    3cfe:	0f c0       	rjmp	.+30     	; 0x3d1e <main+0x2ac>
    3d00:	88 ec       	ldi	r24, 0xC8	; 200
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	9c 83       	std	Y+4, r25	; 0x04
    3d06:	8b 83       	std	Y+3, r24	; 0x03
    3d08:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d0c:	01 97       	sbiw	r24, 0x01	; 1
    3d0e:	f1 f7       	brne	.-4      	; 0x3d0c <main+0x29a>
    3d10:	9c 83       	std	Y+4, r25	; 0x04
    3d12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d14:	8d 81       	ldd	r24, Y+5	; 0x05
    3d16:	9e 81       	ldd	r25, Y+6	; 0x06
    3d18:	01 97       	sbiw	r24, 0x01	; 1
    3d1a:	9e 83       	std	Y+6, r25	; 0x06
    3d1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d20:	9e 81       	ldd	r25, Y+6	; 0x06
    3d22:	00 97       	sbiw	r24, 0x00	; 0
    3d24:	69 f7       	brne	.-38     	; 0x3d00 <main+0x28e>
    3d26:	b5 ce       	rjmp	.-662    	; 0x3a92 <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d28:	6f 81       	ldd	r22, Y+7	; 0x07
    3d2a:	78 85       	ldd	r23, Y+8	; 0x08
    3d2c:	89 85       	ldd	r24, Y+9	; 0x09
    3d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d34:	dc 01       	movw	r26, r24
    3d36:	cb 01       	movw	r24, r22
    3d38:	9e 83       	std	Y+6, r25	; 0x06
    3d3a:	8d 83       	std	Y+5, r24	; 0x05
    3d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d40:	9a 83       	std	Y+2, r25	; 0x02
    3d42:	89 83       	std	Y+1, r24	; 0x01
    3d44:	89 81       	ldd	r24, Y+1	; 0x01
    3d46:	9a 81       	ldd	r25, Y+2	; 0x02
    3d48:	01 97       	sbiw	r24, 0x01	; 1
    3d4a:	f1 f7       	brne	.-4      	; 0x3d48 <main+0x2d6>
    3d4c:	9a 83       	std	Y+2, r25	; 0x02
    3d4e:	89 83       	std	Y+1, r24	; 0x01
    3d50:	a0 ce       	rjmp	.-704    	; 0x3a92 <main+0x20>

00003d52 <__divmodsi4>:
    3d52:	97 fb       	bst	r25, 7
    3d54:	09 2e       	mov	r0, r25
    3d56:	05 26       	eor	r0, r21
    3d58:	0e d0       	rcall	.+28     	; 0x3d76 <__divmodsi4_neg1>
    3d5a:	57 fd       	sbrc	r21, 7
    3d5c:	04 d0       	rcall	.+8      	; 0x3d66 <__divmodsi4_neg2>
    3d5e:	14 d0       	rcall	.+40     	; 0x3d88 <__udivmodsi4>
    3d60:	0a d0       	rcall	.+20     	; 0x3d76 <__divmodsi4_neg1>
    3d62:	00 1c       	adc	r0, r0
    3d64:	38 f4       	brcc	.+14     	; 0x3d74 <__divmodsi4_exit>

00003d66 <__divmodsi4_neg2>:
    3d66:	50 95       	com	r21
    3d68:	40 95       	com	r20
    3d6a:	30 95       	com	r19
    3d6c:	21 95       	neg	r18
    3d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d70:	4f 4f       	sbci	r20, 0xFF	; 255
    3d72:	5f 4f       	sbci	r21, 0xFF	; 255

00003d74 <__divmodsi4_exit>:
    3d74:	08 95       	ret

00003d76 <__divmodsi4_neg1>:
    3d76:	f6 f7       	brtc	.-4      	; 0x3d74 <__divmodsi4_exit>
    3d78:	90 95       	com	r25
    3d7a:	80 95       	com	r24
    3d7c:	70 95       	com	r23
    3d7e:	61 95       	neg	r22
    3d80:	7f 4f       	sbci	r23, 0xFF	; 255
    3d82:	8f 4f       	sbci	r24, 0xFF	; 255
    3d84:	9f 4f       	sbci	r25, 0xFF	; 255
    3d86:	08 95       	ret

00003d88 <__udivmodsi4>:
    3d88:	a1 e2       	ldi	r26, 0x21	; 33
    3d8a:	1a 2e       	mov	r1, r26
    3d8c:	aa 1b       	sub	r26, r26
    3d8e:	bb 1b       	sub	r27, r27
    3d90:	fd 01       	movw	r30, r26
    3d92:	0d c0       	rjmp	.+26     	; 0x3dae <__udivmodsi4_ep>

00003d94 <__udivmodsi4_loop>:
    3d94:	aa 1f       	adc	r26, r26
    3d96:	bb 1f       	adc	r27, r27
    3d98:	ee 1f       	adc	r30, r30
    3d9a:	ff 1f       	adc	r31, r31
    3d9c:	a2 17       	cp	r26, r18
    3d9e:	b3 07       	cpc	r27, r19
    3da0:	e4 07       	cpc	r30, r20
    3da2:	f5 07       	cpc	r31, r21
    3da4:	20 f0       	brcs	.+8      	; 0x3dae <__udivmodsi4_ep>
    3da6:	a2 1b       	sub	r26, r18
    3da8:	b3 0b       	sbc	r27, r19
    3daa:	e4 0b       	sbc	r30, r20
    3dac:	f5 0b       	sbc	r31, r21

00003dae <__udivmodsi4_ep>:
    3dae:	66 1f       	adc	r22, r22
    3db0:	77 1f       	adc	r23, r23
    3db2:	88 1f       	adc	r24, r24
    3db4:	99 1f       	adc	r25, r25
    3db6:	1a 94       	dec	r1
    3db8:	69 f7       	brne	.-38     	; 0x3d94 <__udivmodsi4_loop>
    3dba:	60 95       	com	r22
    3dbc:	70 95       	com	r23
    3dbe:	80 95       	com	r24
    3dc0:	90 95       	com	r25
    3dc2:	9b 01       	movw	r18, r22
    3dc4:	ac 01       	movw	r20, r24
    3dc6:	bd 01       	movw	r22, r26
    3dc8:	cf 01       	movw	r24, r30
    3dca:	08 95       	ret

00003dcc <__prologue_saves__>:
    3dcc:	2f 92       	push	r2
    3dce:	3f 92       	push	r3
    3dd0:	4f 92       	push	r4
    3dd2:	5f 92       	push	r5
    3dd4:	6f 92       	push	r6
    3dd6:	7f 92       	push	r7
    3dd8:	8f 92       	push	r8
    3dda:	9f 92       	push	r9
    3ddc:	af 92       	push	r10
    3dde:	bf 92       	push	r11
    3de0:	cf 92       	push	r12
    3de2:	df 92       	push	r13
    3de4:	ef 92       	push	r14
    3de6:	ff 92       	push	r15
    3de8:	0f 93       	push	r16
    3dea:	1f 93       	push	r17
    3dec:	cf 93       	push	r28
    3dee:	df 93       	push	r29
    3df0:	cd b7       	in	r28, 0x3d	; 61
    3df2:	de b7       	in	r29, 0x3e	; 62
    3df4:	ca 1b       	sub	r28, r26
    3df6:	db 0b       	sbc	r29, r27
    3df8:	0f b6       	in	r0, 0x3f	; 63
    3dfa:	f8 94       	cli
    3dfc:	de bf       	out	0x3e, r29	; 62
    3dfe:	0f be       	out	0x3f, r0	; 63
    3e00:	cd bf       	out	0x3d, r28	; 61
    3e02:	09 94       	ijmp

00003e04 <__epilogue_restores__>:
    3e04:	2a 88       	ldd	r2, Y+18	; 0x12
    3e06:	39 88       	ldd	r3, Y+17	; 0x11
    3e08:	48 88       	ldd	r4, Y+16	; 0x10
    3e0a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e0c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e0e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e10:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e12:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e14:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e16:	b9 84       	ldd	r11, Y+9	; 0x09
    3e18:	c8 84       	ldd	r12, Y+8	; 0x08
    3e1a:	df 80       	ldd	r13, Y+7	; 0x07
    3e1c:	ee 80       	ldd	r14, Y+6	; 0x06
    3e1e:	fd 80       	ldd	r15, Y+5	; 0x05
    3e20:	0c 81       	ldd	r16, Y+4	; 0x04
    3e22:	1b 81       	ldd	r17, Y+3	; 0x03
    3e24:	aa 81       	ldd	r26, Y+2	; 0x02
    3e26:	b9 81       	ldd	r27, Y+1	; 0x01
    3e28:	ce 0f       	add	r28, r30
    3e2a:	d1 1d       	adc	r29, r1
    3e2c:	0f b6       	in	r0, 0x3f	; 63
    3e2e:	f8 94       	cli
    3e30:	de bf       	out	0x3e, r29	; 62
    3e32:	0f be       	out	0x3f, r0	; 63
    3e34:	cd bf       	out	0x3d, r28	; 61
    3e36:	ed 01       	movw	r28, r26
    3e38:	08 95       	ret

00003e3a <_exit>:
    3e3a:	f8 94       	cli

00003e3c <__stop_program>:
    3e3c:	ff cf       	rjmp	.-2      	; 0x3e3c <__stop_program>
